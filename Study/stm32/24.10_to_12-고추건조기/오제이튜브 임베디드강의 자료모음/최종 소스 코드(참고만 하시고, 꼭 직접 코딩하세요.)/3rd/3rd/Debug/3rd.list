
3rd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008844  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  08008958  08008958  00018958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b14  08009b14  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08009b14  08009b14  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b14  08009b14  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08009b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001ec  08009d08  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08009d08  00020834  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f45  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003736  00000000  00000000  0003a15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003d890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c8  00000000  00000000  0003ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae3b  00000000  00000000  00040150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a03  00000000  00000000  0005af8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000913a8  00000000  00000000  0007298e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069e0  00000000  00000000  00103d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800893c 	.word	0x0800893c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800893c 	.word	0x0800893c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
	return m_init;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <isTemperSensorInit+0x10>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	20000208 	.word	0x20000208

08000e6c <isBusy>:

uint8_t isBusy(){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000e70:	f000 fab4 	bl	80013dc <isBusyLine>
 8000e74:	4603      	mov	r3, r0
	//return m_busy;
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <isConverting>:

uint8_t isConverting(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

	return m_isConverting;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <isConverting+0x10>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	2000020a 	.word	0x2000020a

08000e90 <Ds18b20_Init_Simple>:

bool    Ds18b20_Init_Simple(){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
		m_init = 0;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	491b      	ldr	r1, [pc, #108]	; (8000f0c <Ds18b20_Init_Simple+0x7c>)
 8000e9e:	481c      	ldr	r0, [pc, #112]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea0:	f000 fb0e 	bl	80014c0 <OneWire_Init>
		//OneWire_First(&OneWire);

		OneWire.ROM_NO[0] = 0x28;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ea6:	2228      	movs	r2, #40	; 0x28
 8000ea8:	725a      	strb	r2, [r3, #9]
		OneWire.ROM_NO[1] = 0x3d;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eac:	223d      	movs	r2, #61	; 0x3d
 8000eae:	729a      	strb	r2, [r3, #10]
		OneWire.ROM_NO[2] = 0x8c;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb2:	228c      	movs	r2, #140	; 0x8c
 8000eb4:	72da      	strb	r2, [r3, #11]
		OneWire.ROM_NO[3] = 0x95;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eb8:	2295      	movs	r2, #149	; 0x95
 8000eba:	731a      	strb	r2, [r3, #12]
		OneWire.ROM_NO[4] = 0xf0;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ebe:	22f0      	movs	r2, #240	; 0xf0
 8000ec0:	735a      	strb	r2, [r3, #13]
		OneWire.ROM_NO[5] = 0x01;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	739a      	strb	r2, [r3, #14]
		OneWire.ROM_NO[6] = 0x3c;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000eca:	223c      	movs	r2, #60	; 0x3c
 8000ecc:	73da      	strb	r2, [r3, #15]
		OneWire.ROM_NO[7] = 0x67;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed0:	2267      	movs	r2, #103	; 0x67
 8000ed2:	741a      	strb	r2, [r3, #16]
		OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000ed4:	490f      	ldr	r1, [pc, #60]	; (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ed8:	f000 fc46 	bl	8001768 <OneWire_GetFullROM>

		Ds18b20Delay(50);
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f002 f8ff 	bl	80030e0 <HAL_Delay>
		DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	490b      	ldr	r1, [pc, #44]	; (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ee6:	480a      	ldr	r0, [pc, #40]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ee8:	f000 f96e 	bl	80011c8 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8000eec:	2032      	movs	r0, #50	; 0x32
 8000eee:	f002 f8f7 	bl	80030e0 <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <Ds18b20_Init_Simple+0x84>)
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <Ds18b20_Init_Simple+0x80>)
 8000ef6:	f000 f9ff 	bl	80012f8 <DS18B20_DisableAlarmTemperature>
		m_init = 1;
 8000efa:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <Ds18b20_Init_Simple+0x78>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
		return true;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000208 	.word	0x20000208
 8000f0c:	40010800 	.word	0x40010800
 8000f10:	2000065c 	.word	0x2000065c
 8000f14:	20000670 	.word	0x20000670

08000f18 <StartConverting>:
	return true;
}
#endif
//###########################################################################################

void StartConverting(){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	m_busy = 1;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <StartConverting+0x20>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <StartConverting+0x24>)
 8000f24:	f000 f84a 	bl	8000fbc <DS18B20_StartAll>
	m_isConverting = 1;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <StartConverting+0x28>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f2e:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <StartConverting+0x20>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000209 	.word	0x20000209
 8000f3c:	2000065c 	.word	0x2000065c
 8000f40:	2000020a 	.word	0x2000020a

08000f44 <checkConverting>:

void checkConverting(){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <checkConverting+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire); //완료 1,비완료 0
 8000f4e:	4809      	ldr	r0, [pc, #36]	; (8000f74 <checkConverting+0x30>)
 8000f50:	f000 fa2d 	bl	80013ae <DS18B20_AllDone>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf0c      	ite	eq
 8000f5a:	2301      	moveq	r3, #1
 8000f5c:	2300      	movne	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <checkConverting+0x34>)
 8000f64:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000f66:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <checkConverting+0x2c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000209 	.word	0x20000209
 8000f74:	2000065c 	.word	0x2000065c
 8000f78:	2000020a 	.word	0x2000020a

08000f7c <getTemper>:

float getTemper(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f002 f8ad 	bl	80030e0 <HAL_Delay>
	m_busy = 1;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <getTemper+0x30>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <getTemper+0x34>)
 8000f8e:	4909      	ldr	r1, [pc, #36]	; (8000fb4 <getTemper+0x38>)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <getTemper+0x3c>)
 8000f92:	f000 f827 	bl	8000fe4 <DS18B20_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <getTemper+0x38>)
 8000f9c:	731a      	strb	r2, [r3, #12]
	m_busy = 0;
 8000f9e:	4b03      	ldr	r3, [pc, #12]	; (8000fac <getTemper+0x30>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <getTemper+0x38>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000209 	.word	0x20000209
 8000fb0:	20000678 	.word	0x20000678
 8000fb4:	20000670 	.word	0x20000670
 8000fb8:	2000065c 	.word	0x2000065c

08000fbc <DS18B20_StartAll>:
}



void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 faaf 	bl	8001528 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8000fca:	21cc      	movs	r1, #204	; 0xcc
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fb6d 	bl	80016ac <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000fd2:	2144      	movs	r1, #68	; 0x44
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fb69 	bl	80016ac <OneWire_WriteByte>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b08b      	sub	sp, #44	; 0x2c
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8000ffa:	68b8      	ldr	r0, [r7, #8]
 8000ffc:	f000 f96c 	bl	80012d8 <DS18B20_Is>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <DS18B20_Read+0x26>
		return false;
 8001006:	2300      	movs	r3, #0
 8001008:	e0d8      	b.n	80011bc <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fb10 	bl	8001630 <OneWire_ReadBit>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8001016:	2300      	movs	r3, #0
 8001018:	e0d0      	b.n	80011bc <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fa84 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 fb81 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001028:	21be      	movs	r1, #190	; 0xbe
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f000 fb3e 	bl	80016ac <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8001030:	2300      	movs	r3, #0
 8001032:	77fb      	strb	r3, [r7, #31]
 8001034:	e00d      	b.n	8001052 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001036:	7ffc      	ldrb	r4, [r7, #31]
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 fb55 	bl	80016e8 <OneWire_ReadByte>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001046:	4423      	add	r3, r4
 8001048:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 800104c:	7ffb      	ldrb	r3, [r7, #31]
 800104e:	3301      	adds	r3, #1
 8001050:	77fb      	strb	r3, [r7, #31]
 8001052:	7ffb      	ldrb	r3, [r7, #31]
 8001054:	2b08      	cmp	r3, #8
 8001056:	d9ee      	bls.n	8001036 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2108      	movs	r1, #8
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fb9e 	bl	80017a0 <OneWire_CRC8>
 8001064:	4603      	mov	r3, r0
 8001066:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 8001068:	7f3b      	ldrb	r3, [r7, #28]
 800106a:	7fba      	ldrb	r2, [r7, #30]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <DS18B20_Read+0x90>
		/* CRC invalid */
		return false;
 8001070:	2300      	movs	r3, #0
 8001072:	e0a3      	b.n	80011bc <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8001074:	7d3b      	ldrb	r3, [r7, #20]
 8001076:	b21a      	sxth	r2, r3
 8001078:	7d7b      	ldrb	r3, [r7, #21]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21b      	sxth	r3, r3
 8001082:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 fa4f 	bl	8001528 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800108a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800108e:	2b00      	cmp	r3, #0
 8001090:	da05      	bge.n	800109e <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001092:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001094:	425b      	negs	r3, r3
 8001096:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800109e:	7e3b      	ldrb	r3, [r7, #24]
 80010a0:	115b      	asrs	r3, r3, #5
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3309      	adds	r3, #9
 80010ac:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80010ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80010b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 80010d2:	7f7b      	ldrb	r3, [r7, #29]
 80010d4:	3b09      	subs	r3, #9
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d850      	bhi.n	800117c <DS18B20_Read+0x198>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <DS18B20_Read+0xfc>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	08001115 	.word	0x08001115
 80010e8:	08001139 	.word	0x08001139
 80010ec:	0800115d 	.word	0x0800115d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe32 	bl	8000d64 <__aeabi_i2f>
 8001100:	4603      	mov	r3, r0
 8001102:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001104:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	f7ff f829 	bl	8000160 <__aeabi_fmul>
 800110e:	4603      	mov	r3, r0
 8001110:	623b      	str	r3, [r7, #32]
		break;
 8001112:	e038      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	b29b      	uxth	r3, r3
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fe20 	bl	8000d64 <__aeabi_i2f>
 8001124:	4603      	mov	r3, r0
 8001126:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001128:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800112c:	6a38      	ldr	r0, [r7, #32]
 800112e:	f7ff f817 	bl	8000160 <__aeabi_fmul>
 8001132:	4603      	mov	r3, r0
 8001134:	623b      	str	r3, [r7, #32]
		 break;
 8001136:	e026      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8001138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	b29b      	uxth	r3, r3
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fe0e 	bl	8000d64 <__aeabi_i2f>
 8001148:	4603      	mov	r3, r0
 800114a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800114c:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f7ff f805 	bl	8000160 <__aeabi_fmul>
 8001156:	4603      	mov	r3, r0
 8001158:	623b      	str	r3, [r7, #32]
		break;
 800115a:	e014      	b.n	8001186 <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 800115c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fdfe 	bl	8000d64 <__aeabi_i2f>
 8001168:	4603      	mov	r3, r0
 800116a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 800116c:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8001170:	6a38      	ldr	r0, [r7, #32]
 8001172:	f7fe fff5 	bl	8000160 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	623b      	str	r3, [r7, #32]
		 break;
 800117a:	e004      	b.n	8001186 <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <DS18B20_Read+0x1e0>)
 800117e:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 8001186:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fdea 	bl	8000d64 <__aeabi_i2f>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	6a38      	ldr	r0, [r7, #32]
 8001196:	f7ff fd31 	bl	8000bfc <__addsf3>
 800119a:	4603      	mov	r3, r0
 800119c:	623b      	str	r3, [r7, #32]
	if (minus) 
 800119e:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 80011a6:	6a39      	ldr	r1, [r7, #32]
 80011a8:	f04f 0000 	mov.w	r0, #0
 80011ac:	f7ff fd24 	bl	8000bf8 <__aeabi_fsub>
 80011b0:	4603      	mov	r3, r0
 80011b2:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	372c      	adds	r7, #44	; 0x2c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	437f0000 	.word	0x437f0000

080011c8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4613      	mov	r3, r2
 80011d4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 80011d6:	68b8      	ldr	r0, [r7, #8]
 80011d8:	f000 f87e 	bl	80012d8 <DS18B20_Is>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <DS18B20_SetResolution+0x1e>
		return 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e074      	b.n	80012d0 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f99e 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 fa9b 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80011f4:	21be      	movs	r1, #190	; 0xbe
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 fa58 	bl	80016ac <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 fa73 	bl	80016e8 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f000 fa70 	bl	80016e8 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fa6d 	bl	80016e8 <OneWire_ReadByte>
 800120e:	4603      	mov	r3, r0
 8001210:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 fa68 	bl	80016e8 <OneWire_ReadByte>
 8001218:	4603      	mov	r3, r0
 800121a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 fa63 	bl	80016e8 <OneWire_ReadByte>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b09      	cmp	r3, #9
 800122a:	d108      	bne.n	800123e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001232:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	f023 0320 	bic.w	r3, r3, #32
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e022      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d108      	bne.n	8001256 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	75fb      	strb	r3, [r7, #23]
 8001254:	e016      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b0b      	cmp	r3, #11
 800125a:	d108      	bne.n	800126e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001262:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	f023 0320 	bic.w	r3, r3, #32
 800126a:	75fb      	strb	r3, [r7, #23]
 800126c:	e00a      	b.n	8001284 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d107      	bne.n	8001284 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f94f 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fa4c 	bl	800172a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001292:	214e      	movs	r1, #78	; 0x4e
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f000 fa09 	bl	80016ac <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800129a:	7dbb      	ldrb	r3, [r7, #22]
 800129c:	4619      	mov	r1, r3
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 fa04 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80012a4:	7d7b      	ldrb	r3, [r7, #21]
 80012a6:	4619      	mov	r1, r3
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f000 f9ff 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f000 f9fa 	bl	80016ac <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f935 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012be:	68b9      	ldr	r1, [r7, #8]
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f000 fa32 	bl	800172a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80012c6:	2148      	movs	r1, #72	; 0x48
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f9ef 	bl	80016ac <OneWire_WriteByte>
	
	return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b28      	cmp	r3, #40	; 0x28
 80012e6:	d101      	bne.n	80012ec <DS18B20_Is+0x14>
		return 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <DS18B20_Is+0x16>
	
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff ffe8 	bl	80012d8 <DS18B20_Is>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800130e:	2300      	movs	r3, #0
 8001310:	e049      	b.n	80013a6 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f908 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa05 	bl	800172a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001320:	21be      	movs	r1, #190	; 0xbe
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9c2 	bl	80016ac <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9dd 	bl	80016e8 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f9da 	bl	80016e8 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f9d7 	bl	80016e8 <OneWire_ReadByte>
 800133a:	4603      	mov	r3, r0
 800133c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f9d2 	bl	80016e8 <OneWire_ReadByte>
 8001344:	4603      	mov	r3, r0
 8001346:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 f9cd 	bl	80016e8 <OneWire_ReadByte>
 800134e:	4603      	mov	r3, r0
 8001350:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8001352:	237d      	movs	r3, #125	; 0x7d
 8001354:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8001356:	23c9      	movs	r3, #201	; 0xc9
 8001358:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 f8e4 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9e1 	bl	800172a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001368:	214e      	movs	r1, #78	; 0x4e
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f99e 	bl	80016ac <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f999 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	4619      	mov	r1, r3
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f994 	bl	80016ac <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4619      	mov	r1, r3
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f98f 	bl	80016ac <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f8ca 	bl	8001528 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f9c7 	bl	800172a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800139c:	2148      	movs	r1, #72	; 0x48
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f984 	bl	80016ac <OneWire_WriteByte>
	
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 f93a 	bl	8001630 <OneWire_ReadBit>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <getCurrentTemper>:

float getCurrentTemper(){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <getCurrentTemper+0x10>)
 80013ce:	689b      	ldr	r3, [r3, #8]

}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	20000670 	.word	0x20000670

080013dc <isBusyLine>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t m_busy_line =0;
uint8_t isBusyLine(){
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

	return m_busy_line;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <isBusyLine+0x10>)
 80013e2:	781b      	ldrb	r3, [r3, #0]

}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	2000020b 	.word	0x2000020b

080013f0 <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <ONEWIRE_DELAY+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001402:	bf00      	nop
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <ONEWIRE_DELAY+0x2c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	429a      	cmp	r2, r3
 800140e:	d9f9      	bls.n	8001404 <ONEWIRE_DELAY+0x14>
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	200007d8 	.word	0x200007d8

08001420 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	611a      	str	r2, [r3, #16]
}	
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	889a      	ldrh	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	611a      	str	r2, [r3, #16]
}	
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f107 0208 	add.w	r2, r7, #8
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ff60 	bl	8003344 <HAL_GPIO_Init>
}	
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001494:	2311      	movs	r3, #17
 8001496:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	889b      	ldrh	r3, [r3, #4]
 80014a4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f107 0208 	add.w	r2, r7, #8
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 ff47 	bl	8003344 <HAL_GPIO_Init>

}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	4613      	mov	r3, r2
 80014cc:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <OneWire_Init+0x60>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <OneWire_Init+0x64>)
 80014d6:	f003 fd53 	bl	8004f80 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff ffd0 	bl	800148c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff ffa6 	bl	800143e <ONEWIRE_HIGH>
	OneWireDelay(1000);
 80014f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f6:	f001 fdf3 	bl	80030e0 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff ff90 	bl	8001420 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001500:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001504:	f001 fdec 	bl	80030e0 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff ff98 	bl	800143e <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800150e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001512:	f001 fde5 	bl	80030e0 <HAL_Delay>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000020b 	.word	0x2000020b
 8001524:	200007d8 	.word	0x200007d8

08001528 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff75 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa8 	bl	800148c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800153c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001540:	f7ff ff56 	bl	80013f0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001544:	2014      	movs	r0, #20
 8001546:	f7ff ff53 	bl	80013f0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <OneWire_Reset+0x60>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff82 	bl	800145a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001556:	2046      	movs	r0, #70	; 0x46
 8001558:	f7ff ff4a 	bl	80013f0 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f002 f870 	bl	800364c <HAL_GPIO_ReadPin>
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <OneWire_Reset+0x60>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8001576:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800157a:	f7ff ff39 	bl	80013f0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	2000020b 	.word	0x2000020b

0800158c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]


	if (bit) 
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d024      	beq.n	80015e8 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		m_busy_line = 1;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <OneWire_WriteBit+0xa0>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff3b 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ff6e 	bl	800148c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f7ff ff1d 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 0;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <OneWire_WriteBit+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]

		/* Bit high */
		m_busy_line = 1;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <OneWire_WriteBit+0xa0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff49 	bl	800145a <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <OneWire_WriteBit+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 80015ce:	2037      	movs	r0, #55	; 0x37
 80015d0:	f7ff ff0e 	bl	80013f0 <ONEWIRE_DELAY>

		m_busy_line = 1;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <OneWire_WriteBit+0xa0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff3d 	bl	800145a <ONEWIRE_INPUT>
		m_busy_line = 0;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <OneWire_WriteBit+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 80015e6:	e01d      	b.n	8001624 <OneWire_WriteBit+0x98>
		m_busy_line = 1;
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <OneWire_WriteBit+0xa0>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff16 	bl	8001420 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff49 	bl	800148c <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <OneWire_WriteBit+0xa0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8001600:	2041      	movs	r0, #65	; 0x41
 8001602:	f7ff fef5 	bl	80013f0 <ONEWIRE_DELAY>
		m_busy_line = 1;
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <OneWire_WriteBit+0xa0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff24 	bl	800145a <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001612:	2005      	movs	r0, #5
 8001614:	f7ff feec 	bl	80013f0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff1e 	bl	800145a <ONEWIRE_INPUT>
		m_busy_line = 0;
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <OneWire_WriteBit+0xa0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000020b 	.word	0x2000020b

08001630 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */

	m_busy_line = 1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <OneWire_ReadBit+0x78>)
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff feec 	bl	8001420 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff1f 	bl	800148c <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff fece 	bl	80013f0 <ONEWIRE_DELAY>
	m_busy_line = 0;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <OneWire_ReadBit+0x78>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]

	/* Release line */
	m_busy_line = 1;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <OneWire_ReadBit+0x78>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fefa 	bl	800145a <ONEWIRE_INPUT>

	ONEWIRE_DELAY(10);
 8001666:	200a      	movs	r0, #10
 8001668:	f7ff fec2 	bl	80013f0 <ONEWIRE_DELAY>
	m_busy_line = 0;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <OneWire_ReadBit+0x78>)
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
	

	/* Read line value */
	m_busy_line = 1;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <OneWire_ReadBit+0x78>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	889b      	ldrh	r3, [r3, #4]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f001 ffe2 	bl	800364c <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <OneWire_ReadBit+0x78>)
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8001698:	2032      	movs	r0, #50	; 0x32
 800169a:	f7ff fea9 	bl	80013f0 <ONEWIRE_DELAY>
	

	/* Return bit value */
	return bit;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000020b 	.word	0x2000020b

080016ac <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80016b8:	2308      	movs	r3, #8
 80016ba:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80016bc:	e00a      	b.n	80016d4 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff5f 	bl	800158c <OneWire_WriteBit>
		byte >>= 1;
 80016ce:	78fb      	ldrb	r3, [r7, #3]
 80016d0:	085b      	lsrs	r3, r3, #1
 80016d2:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	73fa      	strb	r2, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ef      	bne.n	80016be <OneWire_WriteByte+0x12>
	}
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80016f0:	2308      	movs	r3, #8
 80016f2:	73fb      	strb	r3, [r7, #15]
 80016f4:	2300      	movs	r3, #0
 80016f6:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80016f8:	e00d      	b.n	8001716 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80016fa:	7bbb      	ldrb	r3, [r7, #14]
 80016fc:	085b      	lsrs	r3, r3, #1
 80016fe:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff95 	bl	8001630 <OneWire_ReadBit>
 8001706:	4603      	mov	r3, r0
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	b25a      	sxtb	r2, r3
 800170c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001710:	4313      	orrs	r3, r2
 8001712:	b25b      	sxtb	r3, r3
 8001714:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	73fa      	strb	r2, [r7, #15]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ec      	bne.n	80016fa <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8001720:	7bbb      	ldrb	r3, [r7, #14]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001734:	2155      	movs	r1, #85	; 0x55
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb8 	bl	80016ac <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e00a      	b.n	8001758 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffad 	bl	80016ac <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	3301      	adds	r3, #1
 8001756:	73fb      	strb	r3, [r7, #15]
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	2b07      	cmp	r3, #7
 800175c:	d9f1      	bls.n	8001742 <OneWire_SelectWithPointer+0x18>
	}	
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
 8001776:	e00a      	b.n	800178e <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001778:	7bfa      	ldrb	r2, [r7, #15]
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	440b      	add	r3, r1
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	440a      	add	r2, r1
 8001784:	7a52      	ldrb	r2, [r2, #9]
 8001786:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b07      	cmp	r3, #7
 8001792:	d9f1      	bls.n	8001778 <OneWire_GetFullROM+0x10>
	}
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80017ac:	2300      	movs	r3, #0
 80017ae:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 80017b0:	e022      	b.n	80017f8 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017bc:	2308      	movs	r3, #8
 80017be:	737b      	strb	r3, [r7, #13]
 80017c0:	e017      	b.n	80017f2 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	4053      	eors	r3, r2
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 80017d6:	7b3b      	ldrb	r3, [r7, #12]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80017e2:	43db      	mvns	r3, r3
 80017e4:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	737b      	strb	r3, [r7, #13]
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e4      	bne.n	80017c2 <OneWire_CRC8+0x22>
	while (len--) {
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	1e5a      	subs	r2, r3, #1
 80017fc:	70fa      	strb	r2, [r7, #3]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1d7      	bne.n	80017b2 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <SSD1306_InvertDisplay+0x1a>
 800181c:	22a7      	movs	r2, #167	; 0xa7
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f000 fa93 	bl	8001d4c <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001826:	e004      	b.n	8001832 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001828:	22a6      	movs	r2, #166	; 0xa6
 800182a:	2100      	movs	r1, #0
 800182c:	2078      	movs	r0, #120	; 0x78
 800182e:	f000 fa8d 	bl	8001d4c <ssd1306_I2C_Write>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001842:	f000 fa27 	bl	8001c94 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001846:	f644 6320 	movw	r3, #20000	; 0x4e20
 800184a:	2201      	movs	r2, #1
 800184c:	2178      	movs	r1, #120	; 0x78
 800184e:	485b      	ldr	r0, [pc, #364]	; (80019bc <SSD1306_Init+0x180>)
 8001850:	f002 f990 	bl	8003b74 <HAL_I2C_IsDeviceReady>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800185a:	2300      	movs	r3, #0
 800185c:	e0a9      	b.n	80019b2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800185e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001862:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001864:	e002      	b.n	800186c <SSD1306_Init+0x30>
		p--;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3b01      	subs	r3, #1
 800186a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f9      	bne.n	8001866 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001872:	22ae      	movs	r2, #174	; 0xae
 8001874:	2100      	movs	r1, #0
 8001876:	2078      	movs	r0, #120	; 0x78
 8001878:	f000 fa68 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	; 0x78
 8001882:	f000 fa63 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001886:	2210      	movs	r2, #16
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	; 0x78
 800188c:	f000 fa5e 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001890:	22b0      	movs	r2, #176	; 0xb0
 8001892:	2100      	movs	r1, #0
 8001894:	2078      	movs	r0, #120	; 0x78
 8001896:	f000 fa59 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800189a:	22c8      	movs	r2, #200	; 0xc8
 800189c:	2100      	movs	r1, #0
 800189e:	2078      	movs	r0, #120	; 0x78
 80018a0:	f000 fa54 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	2078      	movs	r0, #120	; 0x78
 80018aa:	f000 fa4f 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80018ae:	2210      	movs	r2, #16
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f000 fa4a 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80018b8:	2240      	movs	r2, #64	; 0x40
 80018ba:	2100      	movs	r1, #0
 80018bc:	2078      	movs	r0, #120	; 0x78
 80018be:	f000 fa45 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80018c2:	2281      	movs	r2, #129	; 0x81
 80018c4:	2100      	movs	r1, #0
 80018c6:	2078      	movs	r0, #120	; 0x78
 80018c8:	f000 fa40 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80018cc:	22ff      	movs	r2, #255	; 0xff
 80018ce:	2100      	movs	r1, #0
 80018d0:	2078      	movs	r0, #120	; 0x78
 80018d2:	f000 fa3b 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80018d6:	22a1      	movs	r2, #161	; 0xa1
 80018d8:	2100      	movs	r1, #0
 80018da:	2078      	movs	r0, #120	; 0x78
 80018dc:	f000 fa36 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80018e0:	22a6      	movs	r2, #166	; 0xa6
 80018e2:	2100      	movs	r1, #0
 80018e4:	2078      	movs	r0, #120	; 0x78
 80018e6:	f000 fa31 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80018ea:	22a8      	movs	r2, #168	; 0xa8
 80018ec:	2100      	movs	r1, #0
 80018ee:	2078      	movs	r0, #120	; 0x78
 80018f0:	f000 fa2c 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80018f4:	223f      	movs	r2, #63	; 0x3f
 80018f6:	2100      	movs	r1, #0
 80018f8:	2078      	movs	r0, #120	; 0x78
 80018fa:	f000 fa27 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018fe:	22a4      	movs	r2, #164	; 0xa4
 8001900:	2100      	movs	r1, #0
 8001902:	2078      	movs	r0, #120	; 0x78
 8001904:	f000 fa22 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001908:	22d3      	movs	r2, #211	; 0xd3
 800190a:	2100      	movs	r1, #0
 800190c:	2078      	movs	r0, #120	; 0x78
 800190e:	f000 fa1d 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	2078      	movs	r0, #120	; 0x78
 8001918:	f000 fa18 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800191c:	22d5      	movs	r2, #213	; 0xd5
 800191e:	2100      	movs	r1, #0
 8001920:	2078      	movs	r0, #120	; 0x78
 8001922:	f000 fa13 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001926:	22f0      	movs	r2, #240	; 0xf0
 8001928:	2100      	movs	r1, #0
 800192a:	2078      	movs	r0, #120	; 0x78
 800192c:	f000 fa0e 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001930:	22d9      	movs	r2, #217	; 0xd9
 8001932:	2100      	movs	r1, #0
 8001934:	2078      	movs	r0, #120	; 0x78
 8001936:	f000 fa09 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800193a:	2222      	movs	r2, #34	; 0x22
 800193c:	2100      	movs	r1, #0
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f000 fa04 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001944:	22da      	movs	r2, #218	; 0xda
 8001946:	2100      	movs	r1, #0
 8001948:	2078      	movs	r0, #120	; 0x78
 800194a:	f000 f9ff 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800194e:	2212      	movs	r2, #18
 8001950:	2100      	movs	r1, #0
 8001952:	2078      	movs	r0, #120	; 0x78
 8001954:	f000 f9fa 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001958:	22db      	movs	r2, #219	; 0xdb
 800195a:	2100      	movs	r1, #0
 800195c:	2078      	movs	r0, #120	; 0x78
 800195e:	f000 f9f5 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001962:	2220      	movs	r2, #32
 8001964:	2100      	movs	r1, #0
 8001966:	2078      	movs	r0, #120	; 0x78
 8001968:	f000 f9f0 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800196c:	228d      	movs	r2, #141	; 0x8d
 800196e:	2100      	movs	r1, #0
 8001970:	2078      	movs	r0, #120	; 0x78
 8001972:	f000 f9eb 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001976:	2214      	movs	r2, #20
 8001978:	2100      	movs	r1, #0
 800197a:	2078      	movs	r0, #120	; 0x78
 800197c:	f000 f9e6 	bl	8001d4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001980:	22af      	movs	r2, #175	; 0xaf
 8001982:	2100      	movs	r1, #0
 8001984:	2078      	movs	r0, #120	; 0x78
 8001986:	f000 f9e1 	bl	8001d4c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800198a:	222e      	movs	r2, #46	; 0x2e
 800198c:	2100      	movs	r1, #0
 800198e:	2078      	movs	r0, #120	; 0x78
 8001990:	f000 f9dc 	bl	8001d4c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001994:	2000      	movs	r0, #0
 8001996:	f000 f843 	bl	8001a20 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800199a:	f000 f813 	bl	80019c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <SSD1306_Init+0x184>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SSD1306_Init+0x184>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <SSD1306_Init+0x184>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80019b0:	2301      	movs	r3, #1
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200006f8 	.word	0x200006f8
 80019c0:	2000060c 	.word	0x2000060c

080019c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80019ca:	2300      	movs	r3, #0
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e01d      	b.n	8001a0c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3b50      	subs	r3, #80	; 0x50
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	2100      	movs	r1, #0
 80019da:	2078      	movs	r0, #120	; 0x78
 80019dc:	f000 f9b6 	bl	8001d4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2078      	movs	r0, #120	; 0x78
 80019e6:	f000 f9b1 	bl	8001d4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80019ea:	2210      	movs	r2, #16
 80019ec:	2100      	movs	r1, #0
 80019ee:	2078      	movs	r0, #120	; 0x78
 80019f0:	f000 f9ac 	bl	8001d4c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <SSD1306_UpdateScreen+0x58>)
 80019fa:	441a      	add	r2, r3
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	2140      	movs	r1, #64	; 0x40
 8001a00:	2078      	movs	r0, #120	; 0x78
 8001a02:	f000 f95b 	bl	8001cbc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	71fb      	strb	r3, [r7, #7]
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b07      	cmp	r3, #7
 8001a10:	d9de      	bls.n	80019d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000020c 	.word	0x2000020c

08001a20 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <SSD1306_Fill+0x14>
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <SSD1306_Fill+0x16>
 8001a34:	23ff      	movs	r3, #255	; 0xff
 8001a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <SSD1306_Fill+0x2c>)
 8001a3e:	f004 f899 	bl	8005b74 <memset>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000020c 	.word	0x2000020c

08001a50 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	70fb      	strb	r3, [r7, #3]
	if (
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b7f      	cmp	r3, #127	; 0x7f
 8001a66:	d848      	bhi.n	8001afa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001a68:	88bb      	ldrh	r3, [r7, #4]
 8001a6a:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6c:	d845      	bhi.n	8001afa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <SSD1306_DrawPixel+0xb4>)
 8001a70:	791b      	ldrb	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d006      	beq.n	8001a84 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d11a      	bne.n	8001ac0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a8a:	88fa      	ldrh	r2, [r7, #6]
 8001a8c:	88bb      	ldrh	r3, [r7, #4]
 8001a8e:	08db      	lsrs	r3, r3, #3
 8001a90:	b298      	uxth	r0, r3
 8001a92:	4603      	mov	r3, r0
 8001a94:	01db      	lsls	r3, r3, #7
 8001a96:	4413      	add	r3, r2
 8001a98:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <SSD1306_DrawPixel+0xb8>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b259      	sxtb	r1, r3
 8001ab0:	88fa      	ldrh	r2, [r7, #6]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	01db      	lsls	r3, r3, #7
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2c9      	uxtb	r1, r1
 8001aba:	4a13      	ldr	r2, [pc, #76]	; (8001b08 <SSD1306_DrawPixel+0xb8>)
 8001abc:	54d1      	strb	r1, [r2, r3]
 8001abe:	e01d      	b.n	8001afc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ac0:	88fa      	ldrh	r2, [r7, #6]
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	b298      	uxth	r0, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	4413      	add	r3, r2
 8001ace:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <SSD1306_DrawPixel+0xb8>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	88bb      	ldrh	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b259      	sxtb	r1, r3
 8001aea:	88fa      	ldrh	r2, [r7, #6]
 8001aec:	4603      	mov	r3, r0
 8001aee:	01db      	lsls	r3, r3, #7
 8001af0:	4413      	add	r3, r2
 8001af2:	b2c9      	uxtb	r1, r1
 8001af4:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <SSD1306_DrawPixel+0xb8>)
 8001af6:	54d1      	strb	r1, [r2, r3]
 8001af8:	e000      	b.n	8001afc <SSD1306_DrawPixel+0xac>
		return;
 8001afa:	bf00      	nop
	}
}
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	2000060c 	.word	0x2000060c
 8001b08:	2000020c 	.word	0x2000020c

08001b0c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	80fb      	strh	r3, [r7, #6]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SSD1306_GotoXY+0x28>)
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <SSD1306_GotoXY+0x28>)
 8001b24:	88bb      	ldrh	r3, [r7, #4]
 8001b26:	8053      	strh	r3, [r2, #2]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000060c 	.word	0x2000060c

08001b38 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
	if (
 8001b54:	2b7f      	cmp	r3, #127	; 0x7f
 8001b56:	dc07      	bgt.n	8001b68 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001b5a:	885b      	ldrh	r3, [r3, #2]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	785b      	ldrb	r3, [r3, #1]
 8001b62:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001b64:	2b3f      	cmp	r3, #63	; 0x3f
 8001b66:	dd01      	ble.n	8001b6c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e05e      	b.n	8001c2a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e04b      	b.n	8001c0a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	3b20      	subs	r3, #32
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	7849      	ldrb	r1, [r1, #1]
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	440b      	add	r3, r1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	e030      	b.n	8001bf8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d010      	beq.n	8001bc8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b298      	uxth	r0, r3
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bb4:	885a      	ldrh	r2, [r3, #2]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	79ba      	ldrb	r2, [r7, #6]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff ff45 	bl	8001a50 <SSD1306_DrawPixel>
 8001bc6:	e014      	b.n	8001bf2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	b298      	uxth	r0, r3
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001bd6:	885a      	ldrh	r2, [r3, #2]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b299      	uxth	r1, r3
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7ff ff2f 	bl	8001a50 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d3c8      	bcc.n	8001b96 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d3ad      	bcc.n	8001b72 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <SSD1306_Putc+0xfc>)
 8001c26:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001c28:	79fb      	ldrb	r3, [r7, #7]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000060c 	.word	0x2000060c

08001c38 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001c46:	e012      	b.n	8001c6e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	79fa      	ldrb	r2, [r7, #7]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff71 	bl	8001b38 <SSD1306_Putc>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d002      	beq.n	8001c68 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	e008      	b.n	8001c7a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1e8      	bne.n	8001c48 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff feca 	bl	8001a20 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001c8c:	f7ff fe9a 	bl	80019c4 <SSD1306_UpdateScreen>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <ssd1306_I2C_Init+0x24>)
 8001c9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c9e:	e002      	b.n	8001ca6 <ssd1306_I2C_Init+0x12>
		p--;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f9      	bne.n	8001ca0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	0003d090 	.word	0x0003d090

08001cbc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b0c7      	sub	sp, #284	; 0x11c
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	4639      	mov	r1, r7
 8001cc8:	600a      	str	r2, [r1, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	1dfb      	adds	r3, r7, #7
 8001cce:	4622      	mov	r2, r4
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	460a      	mov	r2, r1
 8001cdc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	1dba      	adds	r2, r7, #6
 8001ce4:	7812      	ldrb	r2, [r2, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001cee:	e010      	b.n	8001d12 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001cf0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cf4:	463a      	mov	r2, r7
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	441a      	add	r2, r3
 8001cfa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cfe:	3301      	adds	r3, #1
 8001d00:	7811      	ldrb	r1, [r2, #0]
 8001d02:	f107 020c 	add.w	r2, r7, #12
 8001d06:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d08:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	1d3a      	adds	r2, r7, #4
 8001d1a:	8812      	ldrh	r2, [r2, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d8e7      	bhi.n	8001cf0 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b299      	uxth	r1, r3
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f107 020c 	add.w	r2, r7, #12
 8001d32:	200a      	movs	r0, #10
 8001d34:	9000      	str	r0, [sp, #0]
 8001d36:	4804      	ldr	r0, [pc, #16]	; (8001d48 <ssd1306_I2C_WriteMulti+0x8c>)
 8001d38:	f001 fe1e 	bl	8003978 <HAL_I2C_Master_Transmit>
}
 8001d3c:	bf00      	nop
 8001d3e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	bf00      	nop
 8001d48:	200006f8 	.word	0x200006f8

08001d4c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	460b      	mov	r3, r1
 8001d58:	71bb      	strb	r3, [r7, #6]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	f107 020c 	add.w	r2, r7, #12
 8001d6e:	230a      	movs	r3, #10
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2302      	movs	r3, #2
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <ssd1306_I2C_Write+0x38>)
 8001d76:	f001 fdff 	bl	8003978 <HAL_I2C_Master_Transmit>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200006f8 	.word	0x200006f8

08001d88 <checkButton>:
#include "oledController.h"
#include "heaterController.h"

int count=0;

void checkButton(){
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

	 if(g_f_sw_up){
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <checkButton+0x5c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d009      	beq.n	8001da8 <checkButton+0x20>
			//  printf("push g_f_sw_up\r\n");
			  g_f_sw_up=0;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <checkButton+0x5c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
			  count++;
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <checkButton+0x60>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <checkButton+0x60>)
 8001da2:	6013      	str	r3, [r2, #0]
			  temper_up();
 8001da4:	f000 f9ac 	bl	8002100 <temper_up>


		  }
		  if(g_f_sw_down){
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <checkButton+0x64>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <checkButton+0x32>
			//  printf("push g_f_sw_down\r\n");
			  g_f_sw_down=0;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <checkButton+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	701a      	strb	r2, [r3, #0]
			  temper_down();
 8001db6:	f000 f9bb 	bl	8002130 <temper_down>
		  }

		  if(g_f_sw_fix){
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <checkButton+0x68>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d006      	beq.n	8001dd0 <checkButton+0x48>
			//  printf("push g_f_sw_fix\r\n");
			  g_f_sw_fix=0;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <checkButton+0x68>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
			  //HAL_GPIO_TogglePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin);
			  startToggle();
 8001dc8:	f000 fd42 	bl	8002850 <startToggle>
			  setFixedTemper();
 8001dcc:	f000 f9c8 	bl	8002160 <setFixedTemper>
		  }

		  if(g_f_sw_on){
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <checkButton+0x6c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <checkButton+0x56>
			//  printf("push g_f_sw_on\r\n");
			  g_f_sw_on=0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <checkButton+0x6c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
		  }


}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2000061e 	.word	0x2000061e
 8001de8:	20000614 	.word	0x20000614
 8001dec:	2000061f 	.word	0x2000061f
 8001df0:	20000620 	.word	0x20000620
 8001df4:	20000621 	.word	0x20000621

08001df8 <getSwState>:


ON_OFF_t getSwState(){
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(PB12_START_SW_PIN_GPIO_Port_GPIO_Port, PB12_START_SW_PIN_GPIO_Port_Pin)){
 8001dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <getSwState+0x20>)
 8001e02:	f001 fc23 	bl	800364c <HAL_GPIO_ReadPin>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <getSwState+0x18>
			return OFF_t;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <getSwState+0x1a>
	}else{
			return ON_t;
 8001e10:	2301      	movs	r3, #1
	}
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010c00 	.word	0x40010c00

08001e1c <init_fnd>:
#include "fnd_controller.h"

uint8_t _LED_0F[29];
static SPI_HandleTypeDef * m_hspi;

void init_fnd(SPI_HandleTypeDef * hspi) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	_LED_0F[0] = 0xC0; //0
 8001e24:	4b2f      	ldr	r3, [pc, #188]	; (8001ee4 <init_fnd+0xc8>)
 8001e26:	22c0      	movs	r2, #192	; 0xc0
 8001e28:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8001e2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <init_fnd+0xc8>)
 8001e2c:	22f9      	movs	r2, #249	; 0xf9
 8001e2e:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <init_fnd+0xc8>)
 8001e32:	22a4      	movs	r2, #164	; 0xa4
 8001e34:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <init_fnd+0xc8>)
 8001e38:	22b0      	movs	r2, #176	; 0xb0
 8001e3a:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <init_fnd+0xc8>)
 8001e3e:	2299      	movs	r2, #153	; 0x99
 8001e40:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <init_fnd+0xc8>)
 8001e44:	2292      	movs	r2, #146	; 0x92
 8001e46:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8001e48:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <init_fnd+0xc8>)
 8001e4a:	2282      	movs	r2, #130	; 0x82
 8001e4c:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <init_fnd+0xc8>)
 8001e50:	22f8      	movs	r2, #248	; 0xf8
 8001e52:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <init_fnd+0xc8>)
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8001e5a:	4b22      	ldr	r3, [pc, #136]	; (8001ee4 <init_fnd+0xc8>)
 8001e5c:	2290      	movs	r2, #144	; 0x90
 8001e5e:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <init_fnd+0xc8>)
 8001e62:	2288      	movs	r2, #136	; 0x88
 8001e64:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <init_fnd+0xc8>)
 8001e68:	2283      	movs	r2, #131	; 0x83
 8001e6a:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <init_fnd+0xc8>)
 8001e6e:	22c6      	movs	r2, #198	; 0xc6
 8001e70:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <init_fnd+0xc8>)
 8001e74:	22a1      	movs	r2, #161	; 0xa1
 8001e76:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8001e78:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <init_fnd+0xc8>)
 8001e7a:	2286      	movs	r2, #134	; 0x86
 8001e7c:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <init_fnd+0xc8>)
 8001e80:	228e      	movs	r2, #142	; 0x8e
 8001e82:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <init_fnd+0xc8>)
 8001e86:	22c2      	movs	r2, #194	; 0xc2
 8001e88:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <init_fnd+0xc8>)
 8001e8c:	2289      	movs	r2, #137	; 0x89
 8001e8e:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <init_fnd+0xc8>)
 8001e92:	22f9      	movs	r2, #249	; 0xf9
 8001e94:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <init_fnd+0xc8>)
 8001e98:	22f1      	movs	r2, #241	; 0xf1
 8001e9a:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <init_fnd+0xc8>)
 8001e9e:	22c3      	movs	r2, #195	; 0xc3
 8001ea0:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <init_fnd+0xc8>)
 8001ea4:	22a9      	movs	r2, #169	; 0xa9
 8001ea6:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <init_fnd+0xc8>)
 8001eaa:	22c0      	movs	r2, #192	; 0xc0
 8001eac:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <init_fnd+0xc8>)
 8001eb0:	228c      	movs	r2, #140	; 0x8c
 8001eb2:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <init_fnd+0xc8>)
 8001eb6:	2298      	movs	r2, #152	; 0x98
 8001eb8:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <init_fnd+0xc8>)
 8001ebc:	2292      	movs	r2, #146	; 0x92
 8001ebe:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <init_fnd+0xc8>)
 8001ec2:	22c1      	movs	r2, #193	; 0xc1
 8001ec4:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <init_fnd+0xc8>)
 8001ec8:	2291      	movs	r2, #145	; 0x91
 8001eca:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <init_fnd+0xc8>)
 8001ece:	22fe      	movs	r2, #254	; 0xfe
 8001ed0:	771a      	strb	r2, [r3, #28]
	m_hspi = hspi;
 8001ed2:	4a05      	ldr	r2, [pc, #20]	; (8001ee8 <init_fnd+0xcc>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20000680 	.word	0x20000680
 8001ee8:	20000618 	.word	0x20000618

08001eec <send>:

void send(uint8_t X) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
		}
		X <<= 1;
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
	}*/
	HAL_SPI_Transmit(m_hspi, &X, 1, 100);
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <send+0x20>)
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	1df9      	adds	r1, r7, #7
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	2201      	movs	r2, #1
 8001f00:	f002 fe0c 	bl	8004b1c <HAL_SPI_Transmit>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000618 	.word	0x20000618

08001f10 <send_port>:


 void send_port(uint8_t X, uint8_t port)
 {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	71fb      	strb	r3, [r7, #7]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71bb      	strb	r3, [r7, #6]
 send(X);
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ffe2 	bl	8001eec <send>
 send(port);
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ffde 	bl	8001eec <send>
 HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8001f30:	2200      	movs	r2, #0
 8001f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <send_port+0x40>)
 8001f38:	f001 fb9f 	bl	800367a <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <send_port+0x40>)
 8001f44:	f001 fb99 	bl	800367a <HAL_GPIO_WritePin>
 }
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40010c00 	.word	0x40010c00

08001f54 <digit4_temper>:
		}
	}
}

static uint8_t m_tempercount = 0;
void digit4_temper(int temper) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;

	n1 = (int) temper % 10;
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <digit4_temper+0x144>)
 8001f60:	fb83 1302 	smull	r1, r3, r3, r2
 8001f64:	1099      	asrs	r1, r3, #2
 8001f66:	17d3      	asrs	r3, r2, #31
 8001f68:	1ac9      	subs	r1, r1, r3
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <digit4_temper+0x148>)
 8001f7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f7e:	1159      	asrs	r1, r3, #5
 8001f80:	17d3      	asrs	r3, r2, #31
 8001f82:	1acb      	subs	r3, r1, r3
 8001f84:	2164      	movs	r1, #100	; 0x64
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	4a42      	ldr	r2, [pc, #264]	; (8002098 <digit4_temper+0x144>)
 8001f8e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f92:	1092      	asrs	r2, r2, #2
 8001f94:	17db      	asrs	r3, r3, #31
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper)) / 100;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a3f      	ldr	r2, [pc, #252]	; (800209c <digit4_temper+0x148>)
 8001f9e:	fb82 1203 	smull	r1, r2, r2, r3
 8001fa2:	1152      	asrs	r2, r2, #5
 8001fa4:	17db      	asrs	r3, r3, #31
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper)) / 1000;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a3c      	ldr	r2, [pc, #240]	; (80020a0 <digit4_temper+0x14c>)
 8001fae:	fb82 1203 	smull	r1, r2, r2, r3
 8001fb2:	1192      	asrs	r2, r2, #6
 8001fb4:	17db      	asrs	r3, r3, #31
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 8001fba:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <digit4_temper+0x150>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d838      	bhi.n	8002034 <digit4_temper+0xe0>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <digit4_temper+0x74>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001feb 	.word	0x08001feb
 8001fd0:	08002003 	.word	0x08002003
 8001fd4:	0800201b 	.word	0x0800201b

	case 0:
		send_port(_LED_0F[n1], 0b0001); //0
 8001fd8:	4a33      	ldr	r2, [pc, #204]	; (80020a8 <digit4_temper+0x154>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4413      	add	r3, r2
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff94 	bl	8001f10 <send_port>
		break;
 8001fe8:	e029      	b.n	800203e <digit4_temper+0xea>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010); //1
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <digit4_temper+0x154>)
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff ff88 	bl	8001f10 <send_port>
		break;
 8002000:	e01d      	b.n	800203e <digit4_temper+0xea>
	case 2:
		if (temper > 99) {
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b63      	cmp	r3, #99	; 0x63
 8002006:	dd17      	ble.n	8002038 <digit4_temper+0xe4>
			send_port(_LED_0F[n3], 0b0100);
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <digit4_temper+0x154>)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2104      	movs	r1, #4
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff7c 	bl	8001f10 <send_port>
		}
		break;
 8002018:	e00e      	b.n	8002038 <digit4_temper+0xe4>
	case 3:
		if (temper > 999) {
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002020:	db0c      	blt.n	800203c <digit4_temper+0xe8>
			send_port(_LED_0F[n4], 0b1000);
 8002022:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <digit4_temper+0x154>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2108      	movs	r1, #8
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff6f 	bl	8001f10 <send_port>
		}
		break;
 8002032:	e003      	b.n	800203c <digit4_temper+0xe8>
	default:
		break;
 8002034:	bf00      	nop
 8002036:	e002      	b.n	800203e <digit4_temper+0xea>
		break;
 8002038:	bf00      	nop
 800203a:	e000      	b.n	800203e <digit4_temper+0xea>
		break;
 800203c:	bf00      	nop
	}

	m_tempercount++;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <digit4_temper+0x150>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <digit4_temper+0x150>)
 8002048:	701a      	strb	r2, [r3, #0]

	if (temper > 999 && m_tempercount >= 4) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002050:	db07      	blt.n	8002062 <digit4_temper+0x10e>
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <digit4_temper+0x150>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d903      	bls.n	8002062 <digit4_temper+0x10e>
		m_tempercount = 0;
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <digit4_temper+0x150>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
 8002060:	e015      	b.n	800208e <digit4_temper+0x13a>
	}else if(temper > 99 && m_tempercount >= 3){
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b63      	cmp	r3, #99	; 0x63
 8002066:	dd07      	ble.n	8002078 <digit4_temper+0x124>
 8002068:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <digit4_temper+0x150>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d903      	bls.n	8002078 <digit4_temper+0x124>
		m_tempercount = 0;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <digit4_temper+0x150>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e00a      	b.n	800208e <digit4_temper+0x13a>
	}else if(temper <= 99 && m_tempercount >= 2){
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b63      	cmp	r3, #99	; 0x63
 800207c:	dc07      	bgt.n	800208e <digit4_temper+0x13a>
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <digit4_temper+0x150>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d903      	bls.n	800208e <digit4_temper+0x13a>
		m_tempercount = 0;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <digit4_temper+0x150>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
	}

}
 800208c:	e7ff      	b.n	800208e <digit4_temper+0x13a>
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	66666667 	.word	0x66666667
 800209c:	51eb851f 	.word	0x51eb851f
 80020a0:	10624dd3 	.word	0x10624dd3
 80020a4:	2000061c 	.word	0x2000061c
 80020a8:	20000680 	.word	0x20000680

080020ac <heaterControl>:
void initHeater(){
	m_state=0;
	heaterOnOff(OFF_t);
}

void heaterControl(float temper){
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

	if(m_state){
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <heaterControl+0x4c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00c      	beq.n	80020d6 <heaterControl+0x2a>

		if((int)temper >= (m_fixed_temper - GOING_UP_GAP)){
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7fe fea5 	bl	8000e0c <__aeabi_f2iz>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <heaterControl+0x50>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3b05      	subs	r3, #5
 80020ca:	429a      	cmp	r2, r3
 80020cc:	db0f      	blt.n	80020ee <heaterControl+0x42>
				heaterOnOff(OFF_t);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f000 f85e 	bl	8002190 <heaterOnOff>
			heaterOnOff(ON_t);
		}
	}


}
 80020d4:	e00b      	b.n	80020ee <heaterControl+0x42>
		if((int)temper <  m_fixed_temper - GOING_DOWN_GAP){
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fe98 	bl	8000e0c <__aeabi_f2iz>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <heaterControl+0x50>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3b05      	subs	r3, #5
 80020e4:	429a      	cmp	r2, r3
 80020e6:	da02      	bge.n	80020ee <heaterControl+0x42>
			heaterOnOff(ON_t);
 80020e8:	2001      	movs	r0, #1
 80020ea:	f000 f851 	bl	8002190 <heaterOnOff>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000061d 	.word	0x2000061d
 80020fc:	2000000c 	.word	0x2000000c

08002100 <temper_up>:

void temper_up(){
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

	m_desired_temper++;
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <temper_up+0x2c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	4a08      	ldr	r2, [pc, #32]	; (800212c <temper_up+0x2c>)
 800210c:	6013      	str	r3, [r2, #0]
	if(m_desired_temper > 99){
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <temper_up+0x2c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b63      	cmp	r3, #99	; 0x63
 8002114:	dd02      	ble.n	800211c <temper_up+0x1c>
		m_desired_temper = 0;
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <temper_up+0x2c>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <temper_up+0x2c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fc49 	bl	80029b8 <printTemper>

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000008 	.word	0x20000008

08002130 <temper_down>:

void temper_down(){
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0

	m_desired_temper--;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <temper_down+0x2c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3b01      	subs	r3, #1
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <temper_down+0x2c>)
 800213c:	6013      	str	r3, [r2, #0]
	if(m_desired_temper < 0){
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <temper_down+0x2c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	da02      	bge.n	800214c <temper_down+0x1c>
		m_desired_temper = 99;
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <temper_down+0x2c>)
 8002148:	2263      	movs	r2, #99	; 0x63
 800214a:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <temper_down+0x2c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fc31 	bl	80029b8 <printTemper>

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000008 	.word	0x20000008

08002160 <setFixedTemper>:



void setFixedTemper(){
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
	m_fixed_temper = m_desired_temper;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <setFixedTemper+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <setFixedTemper+0x18>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000008 	.word	0x20000008
 8002178:	2000000c 	.word	0x2000000c

0800217c <getFixedTemper>:

int getFixedTemper(void){
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	return m_desired_temper;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <getFixedTemper+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000008 	.word	0x20000008

08002190 <heaterOnOff>:


void heaterOnOff(uint8_t onOff){
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin,onOff);
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	461a      	mov	r2, r3
 800219e:	2120      	movs	r1, #32
 80021a0:	480c      	ldr	r0, [pc, #48]	; (80021d4 <heaterOnOff+0x44>)
 80021a2:	f001 fa6a 	bl	800367a <HAL_GPIO_WritePin>
	m_state = onOff;
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <heaterOnOff+0x48>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	7013      	strb	r3, [r2, #0]

	if(onOff == ON_t){
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <heaterOnOff+0x30>
		led2OnOff(ON_t);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 f838 	bl	8002228 <led2OnOff>
		printHeaterState(ON_t);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f000 fc27 	bl	8002a0c <printHeaterState>
	}else{
		led2OnOff(OFF_t);
		printHeaterState(OFF_t);
	}

}
 80021be:	e005      	b.n	80021cc <heaterOnOff+0x3c>
		led2OnOff(OFF_t);
 80021c0:	2000      	movs	r0, #0
 80021c2:	f000 f831 	bl	8002228 <led2OnOff>
		printHeaterState(OFF_t);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 fc20 	bl	8002a0c <printHeaterState>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010c00 	.word	0x40010c00
 80021d8:	2000061d 	.word	0x2000061d

080021dc <getHeaterState>:


uint8_t getHeaterState(){
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	return m_state;
 80021e0:	4b02      	ldr	r3, [pc, #8]	; (80021ec <getHeaterState+0x10>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	2000061d 	.word	0x2000061d

080021f0 <led1OnOff>:
#include "ledController.h"


void led1OnOff(ON_OFF_t on_off){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]

	if(on_off == ON_t){
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <led1OnOff+0x1c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2140      	movs	r1, #64	; 0x40
 8002204:	4807      	ldr	r0, [pc, #28]	; (8002224 <led1OnOff+0x34>)
 8002206:	f001 fa38 	bl	800367a <HAL_GPIO_WritePin>
	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
	}

}
 800220a:	e007      	b.n	800221c <led1OnOff+0x2c>
	}else if(on_off == OFF_t){
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d104      	bne.n	800221c <led1OnOff+0x2c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 8002212:	2201      	movs	r2, #1
 8002214:	2140      	movs	r1, #64	; 0x40
 8002216:	4803      	ldr	r0, [pc, #12]	; (8002224 <led1OnOff+0x34>)
 8002218:	f001 fa2f 	bl	800367a <HAL_GPIO_WritePin>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40010c00 	.word	0x40010c00

08002228 <led2OnOff>:


void led2OnOff(ON_OFF_t on_off){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	if(on_off == ON_t){
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <led2OnOff+0x1c>
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <led2OnOff+0x34>)
 800223e:	f001 fa1c 	bl	800367a <HAL_GPIO_WritePin>
	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 1);
	}
}
 8002242:	e007      	b.n	8002254 <led2OnOff+0x2c>
	}else if(on_off == OFF_t){
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d104      	bne.n	8002254 <led2OnOff+0x2c>
		HAL_GPIO_WritePin(PB7_LED1_GPIO_Port, PB7_LED1_Pin, 1);
 800224a:	2201      	movs	r2, #1
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	4803      	ldr	r0, [pc, #12]	; (800225c <led2OnOff+0x34>)
 8002250:	f001 fa13 	bl	800367a <HAL_GPIO_WritePin>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010c00 	.word	0x40010c00

08002260 <_write>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

int _write(int file,char * p, int len){
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 10);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	b29a      	uxth	r2, r3
 8002270:	230a      	movs	r3, #10
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <_write+0x24>)
 8002276:	f003 face 	bl	8005816 <HAL_UART_Transmit>
	return len;
 800227a:	687b      	ldr	r3, [r7, #4]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000794 	.word	0x20000794

08002288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float temper = 0.0;
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002294:	f000 fec2 	bl	800301c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002298:	f000 f85c 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229c:	f000 f9c6 	bl	800262c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80022a0:	f000 f99a 	bl	80025d8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80022a4:	f000 f900 	bl	80024a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022a8:	f000 f94a 	bl	8002540 <MX_TIM3_Init>
  MX_I2C2_Init();
 80022ac:	f000 f898 	bl	80023e0 <MX_I2C2_Init>
  MX_SPI2_Init();
 80022b0:	f000 f8c4 	bl	800243c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80022b4:	f7ff fac2 	bl	800183c <SSD1306_Init>
  opening();
 80022b8:	f000 fa93 	bl	80027e2 <opening>

  init_fnd(&hspi2);
 80022bc:	4821      	ldr	r0, [pc, #132]	; (8002344 <main+0xbc>)
 80022be:	f7ff fdad 	bl	8001e1c <init_fnd>

  HAL_TIM_Base_Start_IT(&htim3);
 80022c2:	4821      	ldr	r0, [pc, #132]	; (8002348 <main+0xc0>)
 80022c4:	f002 fea6 	bl	8005014 <HAL_TIM_Base_Start_IT>
  Ds18b20_Init_Simple();
 80022c8:	f7fe fde2 	bl	8000e90 <Ds18b20_Init_Simple>
  static int m_count =0;
  static int m_first =0;
  while (1)
  {

	  checkButton();
 80022cc:	f7ff fd5c 	bl	8001d88 <checkButton>

	  if((m_count > 100) || !m_first){
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <main+0xc4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b64      	cmp	r3, #100	; 0x64
 80022d6:	dc03      	bgt.n	80022e0 <main+0x58>
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <main+0xc8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d127      	bne.n	8002330 <main+0xa8>
		  if(!isConverting()){
 80022e0:	f7fe fdcc 	bl	8000e7c <isConverting>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <main+0x66>
				  StartConverting();
 80022ea:	f7fe fe15 	bl	8000f18 <StartConverting>
			  }

			  checkConverting();
 80022ee:	f7fe fe29 	bl	8000f44 <checkConverting>

			  if(!isConverting()){
 80022f2:	f7fe fdc3 	bl	8000e7c <isConverting>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d119      	bne.n	8002330 <main+0xa8>
				  temper = getTemper();
 80022fc:	f7fe fe3e 	bl	8000f7c <getTemper>
 8002300:	6078      	str	r0, [r7, #4]
				  if(getSwState() == ON_t){
 8002302:	f7ff fd79 	bl	8001df8 <getSwState>
 8002306:	4603      	mov	r3, r0
 8002308:	2b01      	cmp	r3, #1
 800230a:	d103      	bne.n	8002314 <main+0x8c>
					  heaterControl(temper);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fecd 	bl	80020ac <heaterControl>
 8002312:	e007      	b.n	8002324 <main+0x9c>
				  }else{
					  if(getHeaterState() == ON_t){
 8002314:	f7ff ff62 	bl	80021dc <getHeaterState>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <main+0x9c>
						  heaterOnOff(OFF_t);
 800231e:	2000      	movs	r0, #0
 8002320:	f7ff ff36 	bl	8002190 <heaterOnOff>
					  }
				  }
				  m_count = 0;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <main+0xc4>)
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
				  m_first = 1;
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <main+0xc8>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
			  }
	  }

	  m_count++;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <main+0xc4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3301      	adds	r3, #1
 8002336:	4a05      	ldr	r2, [pc, #20]	; (800234c <main+0xc4>)
 8002338:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f000 fed0 	bl	80030e0 <HAL_Delay>
	  checkButton();
 8002340:	e7c4      	b.n	80022cc <main+0x44>
 8002342:	bf00      	nop
 8002344:	200006a0 	.word	0x200006a0
 8002348:	2000074c 	.word	0x2000074c
 800234c:	20000624 	.word	0x20000624
 8002350:	20000628 	.word	0x20000628

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b090      	sub	sp, #64	; 0x40
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 0318 	add.w	r3, r7, #24
 800235e:	2228      	movs	r2, #40	; 0x28
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f003 fc06 	bl	8005b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002376:	2301      	movs	r3, #1
 8002378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800237a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002388:	2302      	movs	r3, #2
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002392:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002398:	f107 0318 	add.w	r3, r7, #24
 800239c:	4618      	mov	r0, r3
 800239e:	f001 ff1f 	bl	80041e0 <HAL_RCC_OscConfig>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80023a8:	f000 fa16 	bl	80027d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ac:	230f      	movs	r3, #15
 80023ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b0:	2302      	movs	r3, #2
 80023b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2102      	movs	r1, #2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 f98a 	bl	80046e0 <HAL_RCC_ClockConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023d2:	f000 fa01 	bl	80027d8 <Error_Handler>
  }
}
 80023d6:	bf00      	nop
 80023d8:	3740      	adds	r7, #64	; 0x40
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <MX_I2C2_Init+0x50>)
 80023e6:	4a13      	ldr	r2, [pc, #76]	; (8002434 <MX_I2C2_Init+0x54>)
 80023e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80023ea:	4b11      	ldr	r3, [pc, #68]	; (8002430 <MX_I2C2_Init+0x50>)
 80023ec:	4a12      	ldr	r2, [pc, #72]	; (8002438 <MX_I2C2_Init+0x58>)
 80023ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <MX_I2C2_Init+0x50>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023f6:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <MX_I2C2_Init+0x50>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_I2C2_Init+0x50>)
 80023fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <MX_I2C2_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_I2C2_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <MX_I2C2_Init+0x50>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_I2C2_Init+0x50>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800241c:	4804      	ldr	r0, [pc, #16]	; (8002430 <MX_I2C2_Init+0x50>)
 800241e:	f001 f967 	bl	80036f0 <HAL_I2C_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002428:	f000 f9d6 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200006f8 	.word	0x200006f8
 8002434:	40005800 	.word	0x40005800
 8002438:	00061a80 	.word	0x00061a80

0800243c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002440:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <MX_SPI2_Init+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_SPI2_Init+0x64>)
 800245c:	2202      	movs	r2, #2
 800245e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002470:	2220      	movs	r2, #32
 8002472:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_SPI2_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_SPI2_Init+0x64>)
 8002488:	220a      	movs	r2, #10
 800248a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	; (80024a0 <MX_SPI2_Init+0x64>)
 800248e:	f002 fac1 	bl	8004a14 <HAL_SPI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002498:	f000 f99e 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200006a0 	.word	0x200006a0
 80024a4:	40003800 	.word	0x40003800

080024a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	463b      	mov	r3, r7
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <MX_TIM2_Init+0x94>)
 80024c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <MX_TIM2_Init+0x94>)
 80024ce:	2247      	movs	r2, #71	; 0x47
 80024d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <MX_TIM2_Init+0x94>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <MX_TIM2_Init+0x94>)
 80024da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <MX_TIM2_Init+0x94>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <MX_TIM2_Init+0x94>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ec:	4813      	ldr	r0, [pc, #76]	; (800253c <MX_TIM2_Init+0x94>)
 80024ee:	f002 fcf7 	bl	8004ee0 <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024f8:	f000 f96e 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002502:	f107 0308 	add.w	r3, r7, #8
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <MX_TIM2_Init+0x94>)
 800250a:	f002 fedd 	bl	80052c8 <HAL_TIM_ConfigClockSource>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002514:	f000 f960 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002518:	2300      	movs	r3, #0
 800251a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002520:	463b      	mov	r3, r7
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_TIM2_Init+0x94>)
 8002526:	f003 f8b9 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002530:	f000 f952 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002534:	bf00      	nop
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	200007d8 	.word	0x200007d8

08002540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002546:	f107 0308 	add.w	r3, r7, #8
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002554:	463b      	mov	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <MX_TIM3_Init+0x90>)
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <MX_TIM3_Init+0x94>)
 8002560:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_TIM3_Init+0x90>)
 8002564:	2247      	movs	r2, #71	; 0x47
 8002566:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <MX_TIM3_Init+0x90>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800256e:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_TIM3_Init+0x90>)
 8002570:	2231      	movs	r2, #49	; 0x31
 8002572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002574:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <MX_TIM3_Init+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_TIM3_Init+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002580:	4813      	ldr	r0, [pc, #76]	; (80025d0 <MX_TIM3_Init+0x90>)
 8002582:	f002 fcad 	bl	8004ee0 <HAL_TIM_Base_Init>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800258c:	f000 f924 	bl	80027d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002594:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <MX_TIM3_Init+0x90>)
 800259e:	f002 fe93 	bl	80052c8 <HAL_TIM_ConfigClockSource>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80025a8:	f000 f916 	bl	80027d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_TIM3_Init+0x90>)
 80025ba:	f003 f86f 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80025c4:	f000 f908 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000074c 	.word	0x2000074c
 80025d4:	40000400 	.word	0x40000400

080025d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <MX_USART1_UART_Init+0x50>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 80025fe:	220c      	movs	r2, #12
 8002600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_USART1_UART_Init+0x4c>)
 8002610:	f003 f8b4 	bl	800577c <HAL_UART_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800261a:	f000 f8dd 	bl	80027d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000794 	.word	0x20000794
 8002628:	40013800 	.word	0x40013800

0800262c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002640:	4b60      	ldr	r3, [pc, #384]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <MX_GPIO_Init+0x198>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002658:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <MX_GPIO_Init+0x198>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <MX_GPIO_Init+0x198>)
 800265e:	f043 0320 	orr.w	r3, r3, #32
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	4b54      	ldr	r3, [pc, #336]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a53      	ldr	r2, [pc, #332]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b51      	ldr	r3, [pc, #324]	; (80027c4 <MX_GPIO_Init+0x198>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b4e      	ldr	r3, [pc, #312]	; (80027c4 <MX_GPIO_Init+0x198>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <MX_GPIO_Init+0x198>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <MX_GPIO_Init+0x198>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026a6:	4848      	ldr	r0, [pc, #288]	; (80027c8 <MX_GPIO_Init+0x19c>)
 80026a8:	f000 ffe7 	bl	800367a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 80026ac:	2201      	movs	r2, #1
 80026ae:	210c      	movs	r1, #12
 80026b0:	4846      	ldr	r0, [pc, #280]	; (80027cc <MX_GPIO_Init+0x1a0>)
 80026b2:	f000 ffe2 	bl	800367a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED1_Pin, GPIO_PIN_SET);
 80026b6:	2201      	movs	r2, #1
 80026b8:	f244 01c0 	movw	r1, #16576	; 0x40c0
 80026bc:	4844      	ldr	r0, [pc, #272]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 80026be:	f000 ffdc 	bl	800367a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2120      	movs	r1, #32
 80026c6:	4842      	ldr	r0, [pc, #264]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 80026c8:	f000 ffd7 	bl	800367a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80026cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026d2:	2311      	movs	r3, #17
 80026d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 0310 	add.w	r3, r7, #16
 80026e2:	4619      	mov	r1, r3
 80026e4:	4838      	ldr	r0, [pc, #224]	; (80027c8 <MX_GPIO_Init+0x19c>)
 80026e6:	f000 fe2d 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80026ea:	2301      	movs	r3, #1
 80026ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 80026f6:	f107 0310 	add.w	r3, r7, #16
 80026fa:	4619      	mov	r1, r3
 80026fc:	4833      	ldr	r0, [pc, #204]	; (80027cc <MX_GPIO_Init+0x1a0>)
 80026fe:	f000 fe21 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_TEMP_DATA_Pin PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA2_TEMP_DATA_Pin|PA3_TEMP_DATA_Pin;
 8002702:	230c      	movs	r3, #12
 8002704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4619      	mov	r1, r3
 8002718:	482c      	ldr	r0, [pc, #176]	; (80027cc <MX_GPIO_Init+0x1a0>)
 800271a:	f000 fe13 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin;
 800271e:	2307      	movs	r3, #7
 8002720:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <MX_GPIO_Init+0x1a8>)
 8002724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4619      	mov	r1, r3
 8002730:	4827      	ldr	r0, [pc, #156]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 8002732:	f000 fe07 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12_START_SW_PIN_GPIO_Port_Pin */
  GPIO_InitStruct.Pin = PB12_START_SW_PIN_GPIO_Port_Pin;
 8002736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002740:	2301      	movs	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB12_START_SW_PIN_GPIO_Port_GPIO_Port, &GPIO_InitStruct);
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4619      	mov	r1, r3
 800274a:	4821      	ldr	r0, [pc, #132]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 800274c:	f000 fdfa 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB6_LED1_Pin PB7_LED1_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED1_Pin;
 8002750:	f244 03c0 	movw	r3, #16576	; 0x40c0
 8002754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002756:	2301      	movs	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800275a:	2301      	movs	r3, #1
 800275c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f107 0310 	add.w	r3, r7, #16
 8002766:	4619      	mov	r1, r3
 8002768:	4819      	ldr	r0, [pc, #100]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 800276a:	f000 fdeb 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 800276e:	2320      	movs	r3, #32
 8002770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002772:	2301      	movs	r3, #1
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002776:	2302      	movs	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 800277e:	f107 0310 	add.w	r3, r7, #16
 8002782:	4619      	mov	r1, r3
 8002784:	4812      	ldr	r0, [pc, #72]	; (80027d0 <MX_GPIO_Init+0x1a4>)
 8002786:	f000 fddd 	bl	8003344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 800278a:	2200      	movs	r2, #0
 800278c:	2109      	movs	r1, #9
 800278e:	2006      	movs	r0, #6
 8002790:	f000 fda1 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002794:	2006      	movs	r0, #6
 8002796:	f000 fdba 	bl	800330e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2109      	movs	r1, #9
 800279e:	2007      	movs	r0, #7
 80027a0:	f000 fd99 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027a4:	2007      	movs	r0, #7
 80027a6:	f000 fdb2 	bl	800330e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2109      	movs	r1, #9
 80027ae:	2008      	movs	r0, #8
 80027b0:	f000 fd91 	bl	80032d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80027b4:	2008      	movs	r0, #8
 80027b6:	f000 fdaa 	bl	800330e <HAL_NVIC_EnableIRQ>

}
 80027ba:	bf00      	nop
 80027bc:	3720      	adds	r7, #32
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40011000 	.word	0x40011000
 80027cc:	40010800 	.word	0x40010800
 80027d0:	40010c00 	.word	0x40010c00
 80027d4:	10210000 	.word	0x10210000

080027d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027dc:	b672      	cpsid	i
}
 80027de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <Error_Handler+0x8>

080027e2 <opening>:

static uint8_t m_toggle = 0;
static uint8_t m_toggle_count = 0;

void printTemperNoUpdate(int temper) ;
void opening() {
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0

	 SSD1306_Clear();
	 SSD1306_DrawBitmap(0, 0, ojtubelog4, 128, 64, 1);
	 SSD1306_UpdateScreen();
	 HAL_Delay(5000);*/
	printDefault();
 80027e6:	f000 f843 	bl	8002870 <printDefault>
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <toggleScreen>:

void toggleScreen() {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0

	if (m_toggle_count > 0) {
 80027f4:	4b14      	ldr	r3, [pc, #80]	; (8002848 <toggleScreen+0x58>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d019      	beq.n	8002830 <toggleScreen+0x40>
		if (!m_toggle) {
 80027fc:	4b13      	ldr	r3, [pc, #76]	; (800284c <toggleScreen+0x5c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <toggleScreen+0x24>
			SSD1306_Clear();
 8002804:	f7ff fa3d 	bl	8001c82 <SSD1306_Clear>
			SSD1306_UpdateScreen();
 8002808:	f7ff f8dc 	bl	80019c4 <SSD1306_UpdateScreen>
			m_toggle = 1;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <toggleScreen+0x5c>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e00d      	b.n	8002830 <toggleScreen+0x40>
		} else {
			printBackground();
 8002814:	f000 f886 	bl	8002924 <printBackground>
			printTemperNoUpdate(getFixedTemper());
 8002818:	f7ff fcb0 	bl	800217c <getFixedTemper>
 800281c:	4603      	mov	r3, r0
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f8a2 	bl	8002968 <printTemperNoUpdate>
			printHeaterState(OFF_t);
 8002824:	2000      	movs	r0, #0
 8002826:	f000 f8f1 	bl	8002a0c <printHeaterState>

			m_toggle = 0;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <toggleScreen+0x5c>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
		}
	}
	if(m_toggle_count > 0 ){
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <toggleScreen+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <toggleScreen+0x54>
		m_toggle_count--;
 8002838:	4b03      	ldr	r3, [pc, #12]	; (8002848 <toggleScreen+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3b01      	subs	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b01      	ldr	r3, [pc, #4]	; (8002848 <toggleScreen+0x58>)
 8002842:	701a      	strb	r2, [r3, #0]
	}
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2000062d 	.word	0x2000062d
 800284c:	2000062c 	.word	0x2000062c

08002850 <startToggle>:

void startToggle() {
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	if(m_toggle_count == 0 ){
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <startToggle+0x1c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <startToggle+0x12>
		m_toggle_count = 4;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <startToggle+0x1c>)
 800285e:	2204      	movs	r2, #4
 8002860:	701a      	strb	r2, [r3, #0]
	}
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	2000062d 	.word	0x2000062d

08002870 <printDefault>:

void printDefault() {
 8002870:	b580      	push	{r7, lr}
 8002872:	b09a      	sub	sp, #104	; 0x68
 8002874:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 8002876:	2000      	movs	r0, #0
 8002878:	f7fe ffc9 	bl	800180e <SSD1306_InvertDisplay>
	SSD1306_Clear();
 800287c:	f7ff fa01 	bl	8001c82 <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8002880:	2100      	movs	r1, #0
 8002882:	2001      	movs	r0, #1
 8002884:	f7ff f942 	bl	8001b0c <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8002888:	2201      	movs	r2, #1
 800288a:	4921      	ldr	r1, [pc, #132]	; (8002910 <printDefault+0xa0>)
 800288c:	4821      	ldr	r0, [pc, #132]	; (8002914 <printDefault+0xa4>)
 800288e:	f7ff f9d3 	bl	8001c38 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8002892:	210f      	movs	r1, #15
 8002894:	2000      	movs	r0, #0
 8002896:	f7ff f939 	bl	8001b0c <SSD1306_GotoXY>
	SSD1306_Puts("-----------", &Font_11x18, 1);
 800289a:	2201      	movs	r2, #1
 800289c:	491c      	ldr	r1, [pc, #112]	; (8002910 <printDefault+0xa0>)
 800289e:	481e      	ldr	r0, [pc, #120]	; (8002918 <printDefault+0xa8>)
 80028a0:	f7ff f9ca 	bl	8001c38 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 80028a4:	2126      	movs	r1, #38	; 0x26
 80028a6:	200e      	movs	r0, #14
 80028a8:	f7ff f930 	bl	8001b0c <SSD1306_GotoXY>

	char temper_str[100] = "";
 80028ac:	2300      	movs	r3, #0
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	2260      	movs	r2, #96	; 0x60
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f003 f95b 	bl	8005b74 <memset>
	itoa(DEFAULT_TEMPER,temper_str,10);
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	220a      	movs	r2, #10
 80028c2:	4619      	mov	r1, r3
 80028c4:	2019      	movs	r0, #25
 80028c6:	f003 f953 	bl	8005b70 <itoa>
	strcat(temper_str,".0");
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fc3f 	bl	8000150 <strlen>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	4413      	add	r3, r2
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <printDefault+0xac>)
 80028dc:	8811      	ldrh	r1, [r2, #0]
 80028de:	7892      	ldrb	r2, [r2, #2]
 80028e0:	8019      	strh	r1, [r3, #0]
 80028e2:	709a      	strb	r2, [r3, #2]
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 80028e4:	1d3b      	adds	r3, r7, #4
 80028e6:	2201      	movs	r2, #1
 80028e8:	4909      	ldr	r1, [pc, #36]	; (8002910 <printDefault+0xa0>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff f9a4 	bl	8001c38 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 80028f0:	2126      	movs	r1, #38	; 0x26
 80028f2:	2051      	movs	r0, #81	; 0x51
 80028f4:	f7ff f90a 	bl	8001b0c <SSD1306_GotoXY>
	SSD1306_Puts("Off", &Font_11x18, 1);
 80028f8:	2201      	movs	r2, #1
 80028fa:	4905      	ldr	r1, [pc, #20]	; (8002910 <printDefault+0xa0>)
 80028fc:	4808      	ldr	r0, [pc, #32]	; (8002920 <printDefault+0xb0>)
 80028fe:	f7ff f99b 	bl	8001c38 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8002902:	f7ff f85f 	bl	80019c4 <SSD1306_UpdateScreen>

}
 8002906:	bf00      	nop
 8002908:	3768      	adds	r7, #104	; 0x68
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000
 8002914:	08008958 	.word	0x08008958
 8002918:	08008964 	.word	0x08008964
 800291c:	08008970 	.word	0x08008970
 8002920:	08008974 	.word	0x08008974

08002924 <printBackground>:

void printBackground() {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe ff70 	bl	800180e <SSD1306_InvertDisplay>
	SSD1306_Clear();
 800292e:	f7ff f9a8 	bl	8001c82 <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8002932:	2100      	movs	r1, #0
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff f8e9 	bl	8001b0c <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 800293a:	2201      	movs	r2, #1
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <printBackground+0x38>)
 800293e:	4808      	ldr	r0, [pc, #32]	; (8002960 <printBackground+0x3c>)
 8002940:	f7ff f97a 	bl	8001c38 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8002944:	210f      	movs	r1, #15
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff f8e0 	bl	8001b0c <SSD1306_GotoXY>
	SSD1306_Puts("-----------", &Font_11x18, 1);
 800294c:	2201      	movs	r2, #1
 800294e:	4903      	ldr	r1, [pc, #12]	; (800295c <printBackground+0x38>)
 8002950:	4804      	ldr	r0, [pc, #16]	; (8002964 <printBackground+0x40>)
 8002952:	f7ff f971 	bl	8001c38 <SSD1306_Puts>

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000
 8002960:	08008958 	.word	0x08008958
 8002964:	08008964 	.word	0x08008964

08002968 <printTemperNoUpdate>:


void printTemperNoUpdate(int temper) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b09c      	sub	sp, #112	; 0x70
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

	SSD1306_GotoXY(14, 38);
 8002970:	2126      	movs	r1, #38	; 0x26
 8002972:	200e      	movs	r0, #14
 8002974:	f7ff f8ca 	bl	8001b0c <SSD1306_GotoXY>
	char temper_str[100] = "";
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	2260      	movs	r2, #96	; 0x60
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f003 f8f5 	bl	8005b74 <memset>
	sprintf(temper_str, "%2d.0", temper);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <printTemperNoUpdate+0x48>)
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fd56 	bl	8006444 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8002998:	f107 030c 	add.w	r3, r7, #12
 800299c:	2201      	movs	r2, #1
 800299e:	4905      	ldr	r1, [pc, #20]	; (80029b4 <printTemperNoUpdate+0x4c>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f949 	bl	8001c38 <SSD1306_Puts>

}
 80029a6:	bf00      	nop
 80029a8:	3770      	adds	r7, #112	; 0x70
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	08008978 	.word	0x08008978
 80029b4:	20000000 	.word	0x20000000

080029b8 <printTemper>:

void printTemper(int temper) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b09c      	sub	sp, #112	; 0x70
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	SSD1306_GotoXY(14, 38);
 80029c0:	2126      	movs	r1, #38	; 0x26
 80029c2:	200e      	movs	r0, #14
 80029c4:	f7ff f8a2 	bl	8001b0c <SSD1306_GotoXY>
	char temper_str[100] = "";
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	2260      	movs	r2, #96	; 0x60
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 f8cd 	bl	8005b74 <memset>
	sprintf(temper_str, "%2d.0", temper);
 80029da:	f107 030c 	add.w	r3, r7, #12
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4908      	ldr	r1, [pc, #32]	; (8002a04 <printTemper+0x4c>)
 80029e2:	4618      	mov	r0, r3
 80029e4:	f003 fd2e 	bl	8006444 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2201      	movs	r2, #1
 80029ee:	4906      	ldr	r1, [pc, #24]	; (8002a08 <printTemper+0x50>)
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff f921 	bl	8001c38 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80029f6:	f7fe ffe5 	bl	80019c4 <SSD1306_UpdateScreen>

}
 80029fa:	bf00      	nop
 80029fc:	3770      	adds	r7, #112	; 0x70
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	08008978 	.word	0x08008978
 8002a08:	20000000 	.word	0x20000000

08002a0c <printHeaterState>:

void printHeaterState(ON_OFF_t onOff) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	SSD1306_GotoXY(81, 38);
 8002a16:	2126      	movs	r1, #38	; 0x26
 8002a18:	2051      	movs	r0, #81	; 0x51
 8002a1a:	f7ff f877 	bl	8001b0c <SSD1306_GotoXY>
	if(onOff == ON_t){
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <printHeaterState+0x24>
		SSD1306_Puts("On ", &Font_11x18, 1);
 8002a24:	2201      	movs	r2, #1
 8002a26:	4908      	ldr	r1, [pc, #32]	; (8002a48 <printHeaterState+0x3c>)
 8002a28:	4808      	ldr	r0, [pc, #32]	; (8002a4c <printHeaterState+0x40>)
 8002a2a:	f7ff f905 	bl	8001c38 <SSD1306_Puts>
 8002a2e:	e004      	b.n	8002a3a <printHeaterState+0x2e>
	}else{
		SSD1306_Puts("Off", &Font_11x18, 1);
 8002a30:	2201      	movs	r2, #1
 8002a32:	4905      	ldr	r1, [pc, #20]	; (8002a48 <printHeaterState+0x3c>)
 8002a34:	4806      	ldr	r0, [pc, #24]	; (8002a50 <printHeaterState+0x44>)
 8002a36:	f7ff f8ff 	bl	8001c38 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 8002a3a:	f7fe ffc3 	bl	80019c4 <SSD1306_UpdateScreen>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	08008980 	.word	0x08008980
 8002a50:	08008974 	.word	0x08008974

08002a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	6193      	str	r3, [r2, #24]
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	61d3      	str	r3, [r2, #28]
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_MspInit+0x5c>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_MspInit+0x60>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <HAL_MspInit+0x60>)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000

08002ab8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0310 	add.w	r3, r7, #16
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_I2C_MspInit+0x74>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d124      	bne.n	8002b22 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad8:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002ade:	f043 0308 	orr.w	r3, r3, #8
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002af0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002af4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4619      	mov	r1, r3
 8002b04:	480b      	ldr	r0, [pc, #44]	; (8002b34 <HAL_I2C_MspInit+0x7c>)
 8002b06:	f000 fc1d 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002b10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b14:	61d3      	str	r3, [r2, #28]
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_I2C_MspInit+0x78>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b22:	bf00      	nop
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40005800 	.word	0x40005800
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010c00 	.word	0x40010c00

08002b38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_SPI_MspInit+0x74>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d124      	bne.n	8002ba2 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b62:	61d3      	str	r3, [r2, #28]
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_SPI_MspInit+0x78>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 8002b88:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_SPI_MspInit+0x7c>)
 8002b9e:	f000 fbd1 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40003800 	.word	0x40003800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010c00 	.word	0x40010c00

08002bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d114      	bne.n	8002bf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	61d3      	str	r3, [r2, #28]
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2100      	movs	r1, #0
 8002be6:	201c      	movs	r0, #28
 8002be8:	f000 fb75 	bl	80032d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bec:	201c      	movs	r0, #28
 8002bee:	f000 fb8e 	bl	800330e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bf2:	e018      	b.n	8002c26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_TIM_Base_MspInit+0x7c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	61d3      	str	r3, [r2, #28]
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_TIM_Base_MspInit+0x78>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	210a      	movs	r1, #10
 8002c1a:	201d      	movs	r0, #29
 8002c1c:	f000 fb5b 	bl	80032d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c20:	201d      	movs	r0, #29
 8002c22:	f000 fb74 	bl	800330e <HAL_NVIC_EnableIRQ>
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40000400 	.word	0x40000400

08002c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_UART_MspInit+0x8c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d131      	bne.n	8002cbc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	6193      	str	r3, [r2, #24]
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_UART_MspInit+0x90>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	480b      	ldr	r0, [pc, #44]	; (8002ccc <HAL_UART_MspInit+0x94>)
 8002c9e:	f000 fb51 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4805      	ldr	r0, [pc, #20]	; (8002ccc <HAL_UART_MspInit+0x94>)
 8002cb8:	f000 fb44 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010800 	.word	0x40010800

08002cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002cd4:	e7fe      	b.n	8002cd4 <NMI_Handler+0x4>

08002cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cda:	e7fe      	b.n	8002cda <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	e7fe      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce6:	e7fe      	b.n	8002ce6 <BusFault_Handler+0x4>

08002ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cec:	e7fe      	b.n	8002cec <UsageFault_Handler+0x4>

08002cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr

08002cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d16:	f000 f9c7 	bl	80030a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f000 fcc1 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */


	if((HAL_GetTick() - m_button_before_time) > BUTTON_GAP){
 8002d2a:	f000 f9cf 	bl	80030cc <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <EXTI0_IRQHandler+0x30>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2bc8      	cmp	r3, #200	; 0xc8
 8002d38:	d902      	bls.n	8002d40 <EXTI0_IRQHandler+0x20>
	g_f_sw_up = 1;
 8002d3a:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <EXTI0_IRQHandler+0x34>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
	}

	m_button_before_time = HAL_GetTick();
 8002d40:	f000 f9c4 	bl	80030cc <HAL_GetTick>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a02      	ldr	r2, [pc, #8]	; (8002d50 <EXTI0_IRQHandler+0x30>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000630 	.word	0x20000630
 8002d54:	2000061e 	.word	0x2000061e

08002d58 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f000 fca5 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if((HAL_GetTick() - m_button_before_time) > BUTTON_GAP){
 8002d62:	f000 f9b3 	bl	80030cc <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <EXTI1_IRQHandler+0x30>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2bc8      	cmp	r3, #200	; 0xc8
 8002d70:	d902      	bls.n	8002d78 <EXTI1_IRQHandler+0x20>
	g_f_sw_fix = 1;
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <EXTI1_IRQHandler+0x34>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 8002d78:	f000 f9a8 	bl	80030cc <HAL_GetTick>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4a02      	ldr	r2, [pc, #8]	; (8002d88 <EXTI1_IRQHandler+0x30>)
 8002d80:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000630 	.word	0x20000630
 8002d8c:	20000620 	.word	0x20000620

08002d90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d94:	2004      	movs	r0, #4
 8002d96:	f000 fc89 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	if((HAL_GetTick() - m_button_before_time) > BUTTON_GAP){
 8002d9a:	f000 f997 	bl	80030cc <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <EXTI2_IRQHandler+0x30>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2bc8      	cmp	r3, #200	; 0xc8
 8002da8:	d902      	bls.n	8002db0 <EXTI2_IRQHandler+0x20>
	g_f_sw_down = 1;
 8002daa:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <EXTI2_IRQHandler+0x34>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 8002db0:	f000 f98c 	bl	80030cc <HAL_GetTick>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a02      	ldr	r2, [pc, #8]	; (8002dc0 <EXTI2_IRQHandler+0x30>)
 8002db8:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI2_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000630 	.word	0x20000630
 8002dc4:	2000061f 	.word	0x2000061f

08002dc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <TIM2_IRQHandler+0x10>)
 8002dce:	f002 f973 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200007d8 	.word	0x200007d8

08002ddc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if(m_power_sw_timer > POWER_SW_CHECK_TIME){
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <TIM3_IRQHandler+0x90>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b64      	cmp	r3, #100	; 0x64
 8002de6:	d90e      	bls.n	8002e06 <TIM3_IRQHandler+0x2a>
		if(getSwState() == ON_t){
 8002de8:	f7ff f806 	bl	8001df8 <getSwState>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d103      	bne.n	8002dfa <TIM3_IRQHandler+0x1e>
			led1OnOff(ON_t);
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7ff f9fc 	bl	80021f0 <led1OnOff>
 8002df8:	e002      	b.n	8002e00 <TIM3_IRQHandler+0x24>

		}else{
			led1OnOff(OFF_t);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7ff f9f8 	bl	80021f0 <led1OnOff>
		}
		m_power_sw_timer =0;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <TIM3_IRQHandler+0x90>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
	}

	if(m_toggle_timer > TOGGLE_TIME){
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <TIM3_IRQHandler+0x94>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d904      	bls.n	8002e1c <TIM3_IRQHandler+0x40>
		toggleScreen();
 8002e12:	f7ff fced 	bl	80027f0 <toggleScreen>
		m_toggle_timer = 0;
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <TIM3_IRQHandler+0x94>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
	}

	m_toggle_timer++;
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <TIM3_IRQHandler+0x94>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <TIM3_IRQHandler+0x94>)
 8002e24:	6013      	str	r3, [r2, #0]
	m_power_sw_timer++;
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <TIM3_IRQHandler+0x90>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	4a0f      	ldr	r2, [pc, #60]	; (8002e6c <TIM3_IRQHandler+0x90>)
 8002e2e:	6013      	str	r3, [r2, #0]

	if (isTemperSensorInit() && !isBusy()) {
 8002e30:	f7fe f812 	bl	8000e58 <isTemperSensorInit>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <TIM3_IRQHandler+0x86>
 8002e3a:	f7fe f817 	bl	8000e6c <isBusy>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10e      	bne.n	8002e62 <TIM3_IRQHandler+0x86>
		digit4_temper((int) (getCurrentTemper() * 10));
 8002e44:	f7fe fac0 	bl	80013c8 <getCurrentTemper>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	490a      	ldr	r1, [pc, #40]	; (8002e74 <TIM3_IRQHandler+0x98>)
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd f987 	bl	8000160 <__aeabi_fmul>
 8002e52:	4603      	mov	r3, r0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd ffd9 	bl	8000e0c <__aeabi_f2iz>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f879 	bl	8001f54 <digit4_temper>
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e62:	4805      	ldr	r0, [pc, #20]	; (8002e78 <TIM3_IRQHandler+0x9c>)
 8002e64:	f002 f928 	bl	80050b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20000634 	.word	0x20000634
 8002e70:	20000638 	.word	0x20000638
 8002e74:	41200000 	.word	0x41200000
 8002e78:	2000074c 	.word	0x2000074c

08002e7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
	return 1;
 8002e80:	2301      	movs	r3, #1
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <_kill>:

int _kill(int pid, int sig)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e94:	f002 fe2a 	bl	8005aec <__errno>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2216      	movs	r2, #22
 8002e9c:	601a      	str	r2, [r3, #0]
	return -1;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_exit>:

void _exit (int status)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ffe7 	bl	8002e8a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ebc:	e7fe      	b.n	8002ebc <_exit+0x12>

08002ebe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	e00a      	b.n	8002ee6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ed0:	f3af 8000 	nop.w
 8002ed4:	4601      	mov	r1, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	60ba      	str	r2, [r7, #8]
 8002edc:	b2ca      	uxtb	r2, r1
 8002ede:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	dbf0      	blt.n	8002ed0 <_read+0x12>
	}

return len;
 8002eee:	687b      	ldr	r3, [r7, #4]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	return -1;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f1e:	605a      	str	r2, [r3, #4]
	return 0;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <_isatty>:

int _isatty(int file)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	return 1;
 8002f34:	2301      	movs	r3, #1
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <_sbrk+0x5c>)
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <_sbrk+0x60>)
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <_sbrk+0x64>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <_sbrk+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d207      	bcs.n	8002f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f88:	f002 fdb0 	bl	8005aec <__errno>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	220c      	movs	r2, #12
 8002f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	e009      	b.n	8002fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <_sbrk+0x64>)
 8002fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20005000 	.word	0x20005000
 8002fb8:	00000400 	.word	0x00000400
 8002fbc:	2000063c 	.word	0x2000063c
 8002fc0:	20000838 	.word	0x20000838

08002fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd2:	490d      	ldr	r1, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd4:	4a0d      	ldr	r2, [pc, #52]	; (800300c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ff6:	f7ff ffe5 	bl	8002fc4 <SystemInit>
/* Call static constructors c++ 생성자 호출시 필요함.*/
    bl __libc_init_array
 8002ffa:	f002 fd7d 	bl	8005af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ffe:	f7ff f943 	bl	8002288 <main>
  bx lr
 8003002:	4770      	bx	lr
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800300c:	08009b1c 	.word	0x08009b1c
  ldr r2, =_sbss
 8003010:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003014:	20000834 	.word	0x20000834

08003018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC1_2_IRQHandler>
	...

0800301c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x28>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x28>)
 8003026:	f043 0310 	orr.w	r3, r3, #16
 800302a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f947 	bl	80032c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	200f      	movs	r0, #15
 8003034:	f000 f808 	bl	8003048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7ff fd0c 	bl	8002a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40022000 	.word	0x40022000

08003048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_InitTick+0x54>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_InitTick+0x58>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800305e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f95f 	bl	800332a <HAL_SYSTICK_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e00e      	b.n	8003094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b0f      	cmp	r3, #15
 800307a:	d80a      	bhi.n	8003092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800307c:	2200      	movs	r2, #0
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	f000 f927 	bl	80032d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <HAL_InitTick+0x5c>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000010 	.word	0x20000010
 80030a0:	20000018 	.word	0x20000018
 80030a4:	20000014 	.word	0x20000014

080030a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_IncTick+0x1c>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_IncTick+0x20>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	4a03      	ldr	r2, [pc, #12]	; (80030c8 <HAL_IncTick+0x20>)
 80030ba:	6013      	str	r3, [r2, #0]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	20000018 	.word	0x20000018
 80030c8:	20000820 	.word	0x20000820

080030cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return uwTick;
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <HAL_GetTick+0x10>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000820 	.word	0x20000820

080030e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e8:	f7ff fff0 	bl	80030cc <HAL_GetTick>
 80030ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d005      	beq.n	8003106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <HAL_Delay+0x44>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003106:	bf00      	nop
 8003108:	f7ff ffe0 	bl	80030cc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8f7      	bhi.n	8003108 <HAL_Delay+0x28>
  {
  }
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000018 	.word	0x20000018

08003128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003138:	4b0c      	ldr	r3, [pc, #48]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003144:	4013      	ands	r3, r2
 8003146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003150:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003154:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315a:	4a04      	ldr	r2, [pc, #16]	; (800316c <__NVIC_SetPriorityGrouping+0x44>)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	60d3      	str	r3, [r2, #12]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000ed00 	.word	0xe000ed00

08003170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <__NVIC_GetPriorityGrouping+0x18>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	0a1b      	lsrs	r3, r3, #8
 800317a:	f003 0307 	and.w	r3, r3, #7
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	2b00      	cmp	r3, #0
 800319c:	db0b      	blt.n	80031b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	f003 021f 	and.w	r2, r3, #31
 80031a4:	4906      	ldr	r1, [pc, #24]	; (80031c0 <__NVIC_EnableIRQ+0x34>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2001      	movs	r0, #1
 80031ae:	fa00 f202 	lsl.w	r2, r0, r2
 80031b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db0a      	blt.n	80031ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <__NVIC_SetPriority+0x4c>)
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	440b      	add	r3, r1
 80031e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ec:	e00a      	b.n	8003204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	4908      	ldr	r1, [pc, #32]	; (8003214 <__NVIC_SetPriority+0x50>)
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3b04      	subs	r3, #4
 80031fc:	0112      	lsls	r2, r2, #4
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	440b      	add	r3, r1
 8003202:	761a      	strb	r2, [r3, #24]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
         );
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d301      	bcc.n	8003292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <SysTick_Config+0x40>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329a:	210f      	movs	r1, #15
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f7ff ff90 	bl	80031c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <SysTick_Config+0x40>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <SysTick_Config+0x40>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	e000e010 	.word	0xe000e010

080032c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff2d 	bl	8003128 <__NVIC_SetPriorityGrouping>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032e8:	f7ff ff42 	bl	8003170 <__NVIC_GetPriorityGrouping>
 80032ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff90 	bl	8003218 <NVIC_EncodePriority>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff5f 	bl	80031c4 <__NVIC_SetPriority>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff35 	bl	800318c <__NVIC_EnableIRQ>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffa2 	bl	800327c <SysTick_Config>
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b08b      	sub	sp, #44	; 0x2c
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003356:	e169      	b.n	800362c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003358:	2201      	movs	r2, #1
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	4013      	ands	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	f040 8158 	bne.w	8003626 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a9a      	ldr	r2, [pc, #616]	; (80035e4 <HAL_GPIO_Init+0x2a0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d05e      	beq.n	800343e <HAL_GPIO_Init+0xfa>
 8003380:	4a98      	ldr	r2, [pc, #608]	; (80035e4 <HAL_GPIO_Init+0x2a0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d875      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 8003386:	4a98      	ldr	r2, [pc, #608]	; (80035e8 <HAL_GPIO_Init+0x2a4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d058      	beq.n	800343e <HAL_GPIO_Init+0xfa>
 800338c:	4a96      	ldr	r2, [pc, #600]	; (80035e8 <HAL_GPIO_Init+0x2a4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d86f      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 8003392:	4a96      	ldr	r2, [pc, #600]	; (80035ec <HAL_GPIO_Init+0x2a8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d052      	beq.n	800343e <HAL_GPIO_Init+0xfa>
 8003398:	4a94      	ldr	r2, [pc, #592]	; (80035ec <HAL_GPIO_Init+0x2a8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d869      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 800339e:	4a94      	ldr	r2, [pc, #592]	; (80035f0 <HAL_GPIO_Init+0x2ac>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d04c      	beq.n	800343e <HAL_GPIO_Init+0xfa>
 80033a4:	4a92      	ldr	r2, [pc, #584]	; (80035f0 <HAL_GPIO_Init+0x2ac>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d863      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 80033aa:	4a92      	ldr	r2, [pc, #584]	; (80035f4 <HAL_GPIO_Init+0x2b0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d046      	beq.n	800343e <HAL_GPIO_Init+0xfa>
 80033b0:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_GPIO_Init+0x2b0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d85d      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 80033b6:	2b12      	cmp	r3, #18
 80033b8:	d82a      	bhi.n	8003410 <HAL_GPIO_Init+0xcc>
 80033ba:	2b12      	cmp	r3, #18
 80033bc:	d859      	bhi.n	8003472 <HAL_GPIO_Init+0x12e>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <HAL_GPIO_Init+0x80>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	0800343f 	.word	0x0800343f
 80033c8:	08003419 	.word	0x08003419
 80033cc:	0800342b 	.word	0x0800342b
 80033d0:	0800346d 	.word	0x0800346d
 80033d4:	08003473 	.word	0x08003473
 80033d8:	08003473 	.word	0x08003473
 80033dc:	08003473 	.word	0x08003473
 80033e0:	08003473 	.word	0x08003473
 80033e4:	08003473 	.word	0x08003473
 80033e8:	08003473 	.word	0x08003473
 80033ec:	08003473 	.word	0x08003473
 80033f0:	08003473 	.word	0x08003473
 80033f4:	08003473 	.word	0x08003473
 80033f8:	08003473 	.word	0x08003473
 80033fc:	08003473 	.word	0x08003473
 8003400:	08003473 	.word	0x08003473
 8003404:	08003473 	.word	0x08003473
 8003408:	08003421 	.word	0x08003421
 800340c:	08003435 	.word	0x08003435
 8003410:	4a79      	ldr	r2, [pc, #484]	; (80035f8 <HAL_GPIO_Init+0x2b4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003416:	e02c      	b.n	8003472 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	623b      	str	r3, [r7, #32]
          break;
 800341e:	e029      	b.n	8003474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	3304      	adds	r3, #4
 8003426:	623b      	str	r3, [r7, #32]
          break;
 8003428:	e024      	b.n	8003474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	3308      	adds	r3, #8
 8003430:	623b      	str	r3, [r7, #32]
          break;
 8003432:	e01f      	b.n	8003474 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	330c      	adds	r3, #12
 800343a:	623b      	str	r3, [r7, #32]
          break;
 800343c:	e01a      	b.n	8003474 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003446:	2304      	movs	r3, #4
 8003448:	623b      	str	r3, [r7, #32]
          break;
 800344a:	e013      	b.n	8003474 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003454:	2308      	movs	r3, #8
 8003456:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	611a      	str	r2, [r3, #16]
          break;
 800345e:	e009      	b.n	8003474 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003460:	2308      	movs	r3, #8
 8003462:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	615a      	str	r2, [r3, #20]
          break;
 800346a:	e003      	b.n	8003474 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800346c:	2300      	movs	r3, #0
 800346e:	623b      	str	r3, [r7, #32]
          break;
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x130>
          break;
 8003472:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2bff      	cmp	r3, #255	; 0xff
 8003478:	d801      	bhi.n	800347e <HAL_GPIO_Init+0x13a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	e001      	b.n	8003482 <HAL_GPIO_Init+0x13e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2bff      	cmp	r3, #255	; 0xff
 8003488:	d802      	bhi.n	8003490 <HAL_GPIO_Init+0x14c>
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	e002      	b.n	8003496 <HAL_GPIO_Init+0x152>
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	3b08      	subs	r3, #8
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	210f      	movs	r1, #15
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	401a      	ands	r2, r3
 80034a8:	6a39      	ldr	r1, [r7, #32]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	431a      	orrs	r2, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80b1 	beq.w	8003626 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <HAL_GPIO_Init+0x2b8>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	4a4c      	ldr	r2, [pc, #304]	; (80035fc <HAL_GPIO_Init+0x2b8>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6193      	str	r3, [r2, #24]
 80034d0:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <HAL_GPIO_Init+0x2b8>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034dc:	4a48      	ldr	r2, [pc, #288]	; (8003600 <HAL_GPIO_Init+0x2bc>)
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a40      	ldr	r2, [pc, #256]	; (8003604 <HAL_GPIO_Init+0x2c0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_GPIO_Init+0x1ec>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <HAL_GPIO_Init+0x2c4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00d      	beq.n	800352c <HAL_GPIO_Init+0x1e8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3e      	ldr	r2, [pc, #248]	; (800360c <HAL_GPIO_Init+0x2c8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_Init+0x1e4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a3d      	ldr	r2, [pc, #244]	; (8003610 <HAL_GPIO_Init+0x2cc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_GPIO_Init+0x1e0>
 8003520:	2303      	movs	r3, #3
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003524:	2304      	movs	r3, #4
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1ee>
 8003530:	2300      	movs	r3, #0
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003542:	492f      	ldr	r1, [pc, #188]	; (8003600 <HAL_GPIO_Init+0x2bc>)
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	492c      	ldr	r1, [pc, #176]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	600b      	str	r3, [r1, #0]
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	43db      	mvns	r3, r3
 8003572:	4928      	ldr	r1, [pc, #160]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 8003574:	4013      	ands	r3, r2
 8003576:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d006      	beq.n	8003592 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	4922      	ldr	r1, [pc, #136]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
 8003590:	e006      	b.n	80035a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	43db      	mvns	r3, r3
 800359a:	491e      	ldr	r1, [pc, #120]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 800359c:	4013      	ands	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d006      	beq.n	80035ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	4918      	ldr	r1, [pc, #96]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]
 80035b8:	e006      	b.n	80035c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ba:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	4914      	ldr	r1, [pc, #80]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d021      	beq.n	8003618 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	490e      	ldr	r1, [pc, #56]	; (8003614 <HAL_GPIO_Init+0x2d0>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60cb      	str	r3, [r1, #12]
 80035e0:	e021      	b.n	8003626 <HAL_GPIO_Init+0x2e2>
 80035e2:	bf00      	nop
 80035e4:	10320000 	.word	0x10320000
 80035e8:	10310000 	.word	0x10310000
 80035ec:	10220000 	.word	0x10220000
 80035f0:	10210000 	.word	0x10210000
 80035f4:	10120000 	.word	0x10120000
 80035f8:	10110000 	.word	0x10110000
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010000 	.word	0x40010000
 8003604:	40010800 	.word	0x40010800
 8003608:	40010c00 	.word	0x40010c00
 800360c:	40011000 	.word	0x40011000
 8003610:	40011400 	.word	0x40011400
 8003614:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_GPIO_Init+0x304>)
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	43db      	mvns	r3, r3
 8003620:	4909      	ldr	r1, [pc, #36]	; (8003648 <HAL_GPIO_Init+0x304>)
 8003622:	4013      	ands	r3, r2
 8003624:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	3301      	adds	r3, #1
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	f47f ae8e 	bne.w	8003358 <HAL_GPIO_Init+0x14>
  }
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	372c      	adds	r7, #44	; 0x2c
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40010400 	.word	0x40010400

0800364c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	4013      	ands	r3, r2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	e001      	b.n	800366e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800366e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr

0800367a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	807b      	strh	r3, [r7, #2]
 8003686:	4613      	mov	r3, r2
 8003688:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800368a:	787b      	ldrb	r3, [r7, #1]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003690:	887a      	ldrh	r2, [r7, #2]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003696:	e003      	b.n	80036a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	041a      	lsls	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	611a      	str	r2, [r3, #16]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f806 	bl	80036dc <HAL_GPIO_EXTI_Callback>
  }
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e12b      	b.n	800395a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff f9ce 	bl	8002ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003754:	f001 f918 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8003758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	4a81      	ldr	r2, [pc, #516]	; (8003964 <HAL_I2C_Init+0x274>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d807      	bhi.n	8003774 <HAL_I2C_Init+0x84>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a80      	ldr	r2, [pc, #512]	; (8003968 <HAL_I2C_Init+0x278>)
 8003768:	4293      	cmp	r3, r2
 800376a:	bf94      	ite	ls
 800376c:	2301      	movls	r3, #1
 800376e:	2300      	movhi	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	e006      	b.n	8003782 <HAL_I2C_Init+0x92>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a7d      	ldr	r2, [pc, #500]	; (800396c <HAL_I2C_Init+0x27c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	bf94      	ite	ls
 800377c:	2301      	movls	r3, #1
 800377e:	2300      	movhi	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0e7      	b.n	800395a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	4a78      	ldr	r2, [pc, #480]	; (8003970 <HAL_I2C_Init+0x280>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0c9b      	lsrs	r3, r3, #18
 8003794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a6a      	ldr	r2, [pc, #424]	; (8003964 <HAL_I2C_Init+0x274>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d802      	bhi.n	80037c4 <HAL_I2C_Init+0xd4>
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3301      	adds	r3, #1
 80037c2:	e009      	b.n	80037d8 <HAL_I2C_Init+0xe8>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	4a69      	ldr	r2, [pc, #420]	; (8003974 <HAL_I2C_Init+0x284>)
 80037d0:	fba2 2303 	umull	r2, r3, r2, r3
 80037d4:	099b      	lsrs	r3, r3, #6
 80037d6:	3301      	adds	r3, #1
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	495c      	ldr	r1, [pc, #368]	; (8003964 <HAL_I2C_Init+0x274>)
 80037f4:	428b      	cmp	r3, r1
 80037f6:	d819      	bhi.n	800382c <HAL_I2C_Init+0x13c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e59      	subs	r1, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fbb1 f3f3 	udiv	r3, r1, r3
 8003806:	1c59      	adds	r1, r3, #1
 8003808:	f640 73fc 	movw	r3, #4092	; 0xffc
 800380c:	400b      	ands	r3, r1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00a      	beq.n	8003828 <HAL_I2C_Init+0x138>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e59      	subs	r1, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	e051      	b.n	80038cc <HAL_I2C_Init+0x1dc>
 8003828:	2304      	movs	r3, #4
 800382a:	e04f      	b.n	80038cc <HAL_I2C_Init+0x1dc>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d111      	bne.n	8003858 <HAL_I2C_Init+0x168>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e58      	subs	r0, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	440b      	add	r3, r1
 8003842:	fbb0 f3f3 	udiv	r3, r0, r3
 8003846:	3301      	adds	r3, #1
 8003848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e012      	b.n	800387e <HAL_I2C_Init+0x18e>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1e58      	subs	r0, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	0099      	lsls	r1, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	fbb0 f3f3 	udiv	r3, r0, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Init+0x196>
 8003882:	2301      	movs	r3, #1
 8003884:	e022      	b.n	80038cc <HAL_I2C_Init+0x1dc>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10e      	bne.n	80038ac <HAL_I2C_Init+0x1bc>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e58      	subs	r0, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	440b      	add	r3, r1
 800389c:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038aa:	e00f      	b.n	80038cc <HAL_I2C_Init+0x1dc>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	0099      	lsls	r1, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	6809      	ldr	r1, [r1, #0]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6911      	ldr	r1, [r2, #16]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68d2      	ldr	r2, [r2, #12]
 8003906:	4311      	orrs	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	430b      	orrs	r3, r1
 800390e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	000186a0 	.word	0x000186a0
 8003968:	001e847f 	.word	0x001e847f
 800396c:	003d08ff 	.word	0x003d08ff
 8003970:	431bde83 	.word	0x431bde83
 8003974:	10624dd3 	.word	0x10624dd3

08003978 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	460b      	mov	r3, r1
 8003986:	817b      	strh	r3, [r7, #10]
 8003988:	4613      	mov	r3, r2
 800398a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff fb9e 	bl	80030cc <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b20      	cmp	r3, #32
 800399c:	f040 80e0 	bne.w	8003b60 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2319      	movs	r3, #25
 80039a6:	2201      	movs	r2, #1
 80039a8:	4970      	ldr	r1, [pc, #448]	; (8003b6c <HAL_I2C_Master_Transmit+0x1f4>)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fa92 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0d3      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_I2C_Master_Transmit+0x50>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0cc      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d007      	beq.n	80039ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2210      	movs	r2, #16
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	893a      	ldrh	r2, [r7, #8]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a50      	ldr	r2, [pc, #320]	; (8003b70 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a30:	8979      	ldrh	r1, [r7, #10]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	6a3a      	ldr	r2, [r7, #32]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f9ca 	bl	8003dd0 <I2C_MasterRequestWrite>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e08d      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a5c:	e066      	b.n	8003b2c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	6a39      	ldr	r1, [r7, #32]
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fb0c 	bl	8004080 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00d      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d107      	bne.n	8003a86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06b      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d11b      	bne.n	8003b00 <HAL_I2C_Master_Transmit+0x188>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d017      	beq.n	8003b00 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	6a39      	ldr	r1, [r7, #32]
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fafc 	bl	8004102 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00d      	beq.n	8003b2c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d107      	bne.n	8003b28 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b26:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e01a      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d194      	bne.n	8003a5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e000      	b.n	8003b62 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b60:	2302      	movs	r3, #2
  }
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	00100002 	.word	0x00100002
 8003b70:	ffff0000 	.word	0xffff0000

08003b74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	460b      	mov	r3, r1
 8003b82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff faa2 	bl	80030cc <HAL_GetTick>
 8003b88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b20      	cmp	r3, #32
 8003b98:	f040 8111 	bne.w	8003dbe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2319      	movs	r3, #25
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4988      	ldr	r1, [pc, #544]	; (8003dc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f994 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e104      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2C_IsDeviceReady+0x50>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e0fd      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d007      	beq.n	8003bea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2224      	movs	r2, #36	; 0x24
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a70      	ldr	r2, [pc, #448]	; (8003dcc <HAL_I2C_IsDeviceReady+0x258>)
 8003c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f952 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00d      	beq.n	8003c52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c44:	d103      	bne.n	8003c4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0b6      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c62:	f7ff fa33 	bl	80030cc <HAL_GetTick>
 8003c66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c96:	e025      	b.n	8003ce4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c98:	f7ff fa18 	bl	80030cc <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d302      	bcc.n	8003cae <HAL_I2C_IsDeviceReady+0x13a>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	22a0      	movs	r2, #160	; 0xa0
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2ba0      	cmp	r3, #160	; 0xa0
 8003cee:	d005      	beq.n	8003cfc <HAL_I2C_IsDeviceReady+0x188>
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <HAL_I2C_IsDeviceReady+0x188>
 8003cf6:	7dbb      	ldrb	r3, [r7, #22]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0cd      	beq.n	8003c98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d129      	bne.n	8003d66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2319      	movs	r3, #25
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4921      	ldr	r1, [pc, #132]	; (8003dc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f8c6 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e036      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e02c      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	490f      	ldr	r1, [pc, #60]	; (8003dc8 <HAL_I2C_IsDeviceReady+0x254>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8a2 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e012      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	f4ff af32 	bcc.w	8003c0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	00100002 	.word	0x00100002
 8003dcc:	ffff0000 	.word	0xffff0000

08003dd0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d006      	beq.n	8003dfa <I2C_MasterRequestWrite+0x2a>
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d003      	beq.n	8003dfa <I2C_MasterRequestWrite+0x2a>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003df8:	d108      	bne.n	8003e0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e00b      	b.n	8003e24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	2b12      	cmp	r3, #18
 8003e12:	d107      	bne.n	8003e24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f84f 	bl	8003ed4 <I2C_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4a:	d103      	bne.n	8003e54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e035      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e60:	d108      	bne.n	8003e74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e62:	897b      	ldrh	r3, [r7, #10]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e70:	611a      	str	r2, [r3, #16]
 8003e72:	e01b      	b.n	8003eac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	11db      	asrs	r3, r3, #7
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0306 	and.w	r3, r3, #6
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f063 030f 	orn	r3, r3, #15
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	490e      	ldr	r1, [pc, #56]	; (8003ecc <I2C_MasterRequestWrite+0xfc>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f875 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e010      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4907      	ldr	r1, [pc, #28]	; (8003ed0 <I2C_MasterRequestWrite+0x100>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 f865 	bl	8003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	00010008 	.word	0x00010008
 8003ed0:	00010002 	.word	0x00010002

08003ed4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee4:	e025      	b.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d021      	beq.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7ff f8ed 	bl	80030cc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d116      	bne.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e023      	b.n	8003f7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10d      	bne.n	8003f58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	e00c      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf0c      	ite	eq
 8003f6a:	2301      	moveq	r3, #1
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d0b6      	beq.n	8003ee6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f90:	e051      	b.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa0:	d123      	bne.n	8003fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e046      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d021      	beq.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7ff f86b 	bl	80030cc <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d116      	bne.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e020      	b.n	8004078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b01      	cmp	r3, #1
 800403e:	d10c      	bne.n	800405a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	43da      	mvns	r2, r3
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf14      	ite	ne
 8004052:	2301      	movne	r3, #1
 8004054:	2300      	moveq	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	e00b      	b.n	8004072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	43da      	mvns	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	b29b      	uxth	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d18d      	bne.n	8003f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800408c:	e02d      	b.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f878 	bl	8004184 <I2C_IsAcknowledgeFailed>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e02d      	b.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d021      	beq.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a6:	f7ff f811 	bl	80030cc <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d302      	bcc.n	80040bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d116      	bne.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0220 	orr.w	r2, r3, #32
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e007      	b.n	80040fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d1ca      	bne.n	800408e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800410e:	e02d      	b.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 f837 	bl	8004184 <I2C_IsAcknowledgeFailed>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e02d      	b.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d021      	beq.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004128:	f7fe ffd0 	bl	80030cc <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	429a      	cmp	r2, r3
 8004136:	d302      	bcc.n	800413e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d116      	bne.n	800416c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e007      	b.n	800417c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b04      	cmp	r3, #4
 8004178:	d1ca      	bne.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d11b      	bne.n	80041d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f043 0204 	orr.w	r2, r3, #4
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e26c      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8087 	beq.w	800430e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004200:	4b92      	ldr	r3, [pc, #584]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b04      	cmp	r3, #4
 800420a:	d00c      	beq.n	8004226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800420c:	4b8f      	ldr	r3, [pc, #572]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d112      	bne.n	800423e <HAL_RCC_OscConfig+0x5e>
 8004218:	4b8c      	ldr	r3, [pc, #560]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d10b      	bne.n	800423e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004226:	4b89      	ldr	r3, [pc, #548]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d06c      	beq.n	800430c <HAL_RCC_OscConfig+0x12c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d168      	bne.n	800430c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e246      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x76>
 8004248:	4b80      	ldr	r3, [pc, #512]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7f      	ldr	r2, [pc, #508]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e02e      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x98>
 800425e:	4b7b      	ldr	r3, [pc, #492]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7a      	ldr	r2, [pc, #488]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b78      	ldr	r3, [pc, #480]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a77      	ldr	r2, [pc, #476]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0xbc>
 8004282:	4b72      	ldr	r3, [pc, #456]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a71      	ldr	r2, [pc, #452]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6e      	ldr	r2, [pc, #440]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 800429c:	4b6b      	ldr	r3, [pc, #428]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a6a      	ldr	r2, [pc, #424]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b68      	ldr	r3, [pc, #416]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a67      	ldr	r2, [pc, #412]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe ff06 	bl	80030cc <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe ff02 	bl	80030cc <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e1fa      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b5d      	ldr	r3, [pc, #372]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe4>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fe fef2 	bl	80030cc <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe feee 	bl	80030cc <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1e6      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x10c>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d063      	beq.n	80043e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800431a:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004326:	4b49      	ldr	r3, [pc, #292]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b08      	cmp	r3, #8
 8004330:	d11c      	bne.n	800436c <HAL_RCC_OscConfig+0x18c>
 8004332:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x176>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1ba      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4939      	ldr	r1, [pc, #228]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	e03a      	b.n	80043e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d020      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004374:	4b36      	ldr	r3, [pc, #216]	; (8004450 <HAL_RCC_OscConfig+0x270>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437a:	f7fe fea7 	bl	80030cc <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004382:	f7fe fea3 	bl	80030cc <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e19b      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b2a      	ldr	r3, [pc, #168]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4927      	ldr	r1, [pc, #156]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	e015      	b.n	80043e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b6:	4b26      	ldr	r3, [pc, #152]	; (8004450 <HAL_RCC_OscConfig+0x270>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fe86 	bl	80030cc <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fe fe82 	bl	80030cc <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e17a      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	4b1d      	ldr	r3, [pc, #116]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d03a      	beq.n	8004464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d019      	beq.n	800442a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <HAL_RCC_OscConfig+0x274>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fe fe66 	bl	80030cc <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004404:	f7fe fe62 	bl	80030cc <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e15a      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_RCC_OscConfig+0x26c>)
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004422:	2001      	movs	r0, #1
 8004424:	f000 fad8 	bl	80049d8 <RCC_Delay>
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_OscConfig+0x274>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fe fe4c 	bl	80030cc <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	e00f      	b.n	8004458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe fe48 	bl	80030cc <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d908      	bls.n	8004458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e140      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	42420000 	.word	0x42420000
 8004454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b9e      	ldr	r3, [pc, #632]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e9      	bne.n	8004438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a6 	beq.w	80045be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b97      	ldr	r3, [pc, #604]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b94      	ldr	r3, [pc, #592]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	4a93      	ldr	r2, [pc, #588]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	61d3      	str	r3, [r2, #28]
 800448e:	4b91      	ldr	r3, [pc, #580]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b8e      	ldr	r3, [pc, #568]	; (80046d8 <HAL_RCC_OscConfig+0x4f8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b8b      	ldr	r3, [pc, #556]	; (80046d8 <HAL_RCC_OscConfig+0x4f8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a8a      	ldr	r2, [pc, #552]	; (80046d8 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fe fe09 	bl	80030cc <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fe fe05 	bl	80030cc <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	; 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e0fd      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b81      	ldr	r3, [pc, #516]	; (80046d8 <HAL_RCC_OscConfig+0x4f8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x312>
 80044e4:	4b7b      	ldr	r3, [pc, #492]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a7a      	ldr	r2, [pc, #488]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e02d      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x334>
 80044fa:	4b76      	ldr	r3, [pc, #472]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a75      	ldr	r2, [pc, #468]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6213      	str	r3, [r2, #32]
 8004506:	4b73      	ldr	r3, [pc, #460]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a72      	ldr	r2, [pc, #456]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	e01c      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x356>
 800451c:	4b6d      	ldr	r3, [pc, #436]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4a6c      	ldr	r2, [pc, #432]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6213      	str	r3, [r2, #32]
 8004528:	4b6a      	ldr	r3, [pc, #424]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a69      	ldr	r2, [pc, #420]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	e00b      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 8004536:	4b67      	ldr	r3, [pc, #412]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4a66      	ldr	r2, [pc, #408]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4b64      	ldr	r3, [pc, #400]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a63      	ldr	r2, [pc, #396]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d015      	beq.n	8004582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fe fdb9 	bl	80030cc <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fe fdb5 	bl	80030cc <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0ab      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCC_OscConfig+0x37e>
 8004580:	e014      	b.n	80045ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004582:	f7fe fda3 	bl	80030cc <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fe fd9f 	bl	80030cc <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	; 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e095      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	4b4c      	ldr	r3, [pc, #304]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4a47      	ldr	r2, [pc, #284]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8081 	beq.w	80046ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d061      	beq.n	8004698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d146      	bne.n	800466a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCC_OscConfig+0x4fc>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fe fd73 	bl	80030cc <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fe fd6f 	bl	80030cc <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e067      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004610:	d108      	bne.n	8004624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004612:	4b30      	ldr	r3, [pc, #192]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	492d      	ldr	r1, [pc, #180]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004624:	4b2b      	ldr	r3, [pc, #172]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a19      	ldr	r1, [r3, #32]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	430b      	orrs	r3, r1
 8004636:	4927      	ldr	r1, [pc, #156]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_OscConfig+0x4fc>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe fd43 	bl	80030cc <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fe fd3f 	bl	80030cc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e037      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800465c:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x46a>
 8004668:	e02f      	b.n	80046ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_RCC_OscConfig+0x4fc>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fe fd2c 	bl	80030cc <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fe fd28 	bl	80030cc <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e020      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x498>
 8004696:	e018      	b.n	80046ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e013      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCC_OscConfig+0x4f4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40007000 	.word	0x40007000
 80046dc:	42420060 	.word	0x42420060

080046e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0d0      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f4:	4b6a      	ldr	r3, [pc, #424]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d910      	bls.n	8004724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	4b67      	ldr	r3, [pc, #412]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 0207 	bic.w	r2, r3, #7
 800470a:	4965      	ldr	r1, [pc, #404]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	4b63      	ldr	r3, [pc, #396]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e0b8      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d020      	beq.n	8004772 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800473c:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a58      	ldr	r2, [pc, #352]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004754:	4b53      	ldr	r3, [pc, #332]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800475e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004760:	4b50      	ldr	r3, [pc, #320]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	494d      	ldr	r1, [pc, #308]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d040      	beq.n	8004800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004786:	4b47      	ldr	r3, [pc, #284]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d115      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e07f      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479e:	4b41      	ldr	r3, [pc, #260]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e073      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e06b      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047be:	4b39      	ldr	r3, [pc, #228]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f023 0203 	bic.w	r2, r3, #3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4936      	ldr	r1, [pc, #216]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d0:	f7fe fc7c 	bl	80030cc <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d8:	f7fe fc78 	bl	80030cc <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e053      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ee:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 020c 	and.w	r2, r3, #12
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d1eb      	bne.n	80047d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d210      	bcs.n	8004830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 0207 	bic.w	r2, r3, #7
 8004816:	4922      	ldr	r1, [pc, #136]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4313      	orrs	r3, r2
 800481c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0307 	and.w	r3, r3, #7
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d001      	beq.n	8004830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e032      	b.n	8004896 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	4916      	ldr	r1, [pc, #88]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800484a:	4313      	orrs	r3, r2
 800484c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d009      	beq.n	800486e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	490e      	ldr	r1, [pc, #56]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800486e:	f000 f821 	bl	80048b4 <HAL_RCC_GetSysClockFreq>
 8004872:	4602      	mov	r2, r0
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	490a      	ldr	r1, [pc, #40]	; (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	5ccb      	ldrb	r3, [r1, r3]
 8004882:	fa22 f303 	lsr.w	r3, r2, r3
 8004886:	4a09      	ldr	r2, [pc, #36]	; (80048ac <HAL_RCC_ClockConfig+0x1cc>)
 8004888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1d0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fbda 	bl	8003048 <HAL_InitTick>

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40022000 	.word	0x40022000
 80048a4:	40021000 	.word	0x40021000
 80048a8:	080096f0 	.word	0x080096f0
 80048ac:	20000010 	.word	0x20000010
 80048b0:	20000014 	.word	0x20000014

080048b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b4:	b490      	push	{r4, r7}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048ba:	4b2a      	ldr	r3, [pc, #168]	; (8004964 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048bc:	1d3c      	adds	r4, r7, #4
 80048be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048c4:	f240 2301 	movw	r3, #513	; 0x201
 80048c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048de:	4b22      	ldr	r3, [pc, #136]	; (8004968 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d002      	beq.n	80048f4 <HAL_RCC_GetSysClockFreq+0x40>
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d003      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x46>
 80048f2:	e02d      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f6:	623b      	str	r3, [r7, #32]
      break;
 80048f8:	e02d      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	0c9b      	lsrs	r3, r3, #18
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004906:	4413      	add	r3, r2
 8004908:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800490c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_RCC_GetSysClockFreq+0xb4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	0c5b      	lsrs	r3, r3, #17
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004926:	4413      	add	r3, r2
 8004928:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800492c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	fb02 f203 	mul.w	r2, r2, r3
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
 800493e:	e004      	b.n	800494a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004944:	fb02 f303 	mul.w	r3, r2, r3
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	623b      	str	r3, [r7, #32]
      break;
 800494e:	e002      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	623b      	str	r3, [r7, #32]
      break;
 8004954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004956:	6a3b      	ldr	r3, [r7, #32]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bc90      	pop	{r4, r7}
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	08008984 	.word	0x08008984
 8004968:	40021000 	.word	0x40021000
 800496c:	007a1200 	.word	0x007a1200
 8004970:	003d0900 	.word	0x003d0900

08004974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <HAL_RCC_GetHCLKFreq+0x10>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	20000010 	.word	0x20000010

08004988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800498c:	f7ff fff2 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	; (80049ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	08009700 	.word	0x08009700

080049b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049b4:	f7ff ffde 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	0adb      	lsrs	r3, r3, #11
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	; (80049d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	08009700 	.word	0x08009700

080049d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e0:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <RCC_Delay+0x34>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <RCC_Delay+0x38>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049f4:	bf00      	nop
  }
  while (Delay --);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	60fa      	str	r2, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f9      	bne.n	80049f4 <RCC_Delay+0x1c>
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000010 	.word	0x20000010
 8004a10:	10624dd3 	.word	0x10624dd3

08004a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e076      	b.n	8004b14 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d108      	bne.n	8004a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a36:	d009      	beq.n	8004a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61da      	str	r2, [r3, #28]
 8004a3e:	e005      	b.n	8004a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fe f866 	bl	8002b38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad0:	ea42 0103 	orr.w	r1, r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	0c1a      	lsrs	r2, r3, #16
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f002 0204 	and.w	r2, r2, #4
 8004af2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3708      	adds	r7, #8
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_SPI_Transmit+0x22>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e126      	b.n	8004d8c <HAL_SPI_Transmit+0x270>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b46:	f7fe fac1 	bl	80030cc <HAL_GetTick>
 8004b4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d002      	beq.n	8004b62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b60:	e10b      	b.n	8004d7a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_SPI_Transmit+0x52>
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b72:	e102      	b.n	8004d7a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2203      	movs	r2, #3
 8004b78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d10f      	bne.n	8004bdc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d007      	beq.n	8004bfa <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bf8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c02:	d14b      	bne.n	8004c9c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <HAL_SPI_Transmit+0xf6>
 8004c0c:	8afb      	ldrh	r3, [r7, #22]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d13e      	bne.n	8004c90 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	881a      	ldrh	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c36:	e02b      	b.n	8004c90 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d112      	bne.n	8004c6c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c6a:	e011      	b.n	8004c90 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6c:	f7fe fa2e 	bl	80030cc <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d803      	bhi.n	8004c84 <HAL_SPI_Transmit+0x168>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	d102      	bne.n	8004c8a <HAL_SPI_Transmit+0x16e>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d102      	bne.n	8004c90 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c8e:	e074      	b.n	8004d7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ce      	bne.n	8004c38 <HAL_SPI_Transmit+0x11c>
 8004c9a:	e04c      	b.n	8004d36 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <HAL_SPI_Transmit+0x18e>
 8004ca4:	8afb      	ldrh	r3, [r7, #22]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d140      	bne.n	8004d2c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cd0:	e02c      	b.n	8004d2c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d113      	bne.n	8004d08 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d06:	e011      	b.n	8004d2c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d08:	f7fe f9e0 	bl	80030cc <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d803      	bhi.n	8004d20 <HAL_SPI_Transmit+0x204>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1e:	d102      	bne.n	8004d26 <HAL_SPI_Transmit+0x20a>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d2a:	e026      	b.n	8004d7a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1cd      	bne.n	8004cd2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f8b2 	bl	8004ea4 <SPI_EndRxTxTransaction>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d54:	2300      	movs	r3, #0
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77fb      	strb	r3, [r7, #31]
 8004d76:	e000      	b.n	8004d7a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4613      	mov	r3, r2
 8004da2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004da4:	f7fe f992 	bl	80030cc <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004db4:	f7fe f98a 	bl	80030cc <HAL_GetTick>
 8004db8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	015b      	lsls	r3, r3, #5
 8004dc0:	0d1b      	lsrs	r3, r3, #20
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	fb02 f303 	mul.w	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dca:	e054      	b.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d050      	beq.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dd4:	f7fe f97a 	bl	80030cc <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d902      	bls.n	8004dea <SPI_WaitFlagStateUntilTimeout+0x56>
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d13d      	bne.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004df8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e02:	d111      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e0c:	d004      	beq.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e16:	d107      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e30:	d10f      	bne.n	8004e52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e017      	b.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d101      	bne.n	8004e70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d19b      	bne.n	8004dcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000010 	.word	0x20000010

08004ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af02      	add	r7, sp, #8
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2180      	movs	r1, #128	; 0x80
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff ff6a 	bl	8004d94 <SPI_WaitFlagStateUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e000      	b.n	8004ed8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e041      	b.n	8004f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd fe56 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fac4 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d001      	beq.n	8004f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e032      	b.n	8004ffe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIM_Base_Start+0x88>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00e      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x48>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d009      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x48>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a14      	ldr	r2, [pc, #80]	; (800500c <HAL_TIM_Base_Start+0x8c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d004      	beq.n	8004fc8 <HAL_TIM_Base_Start+0x48>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <HAL_TIM_Base_Start+0x90>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d111      	bne.n	8004fec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b06      	cmp	r3, #6
 8004fd8:	d010      	beq.n	8004ffc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0201 	orr.w	r2, r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fea:	e007      	b.n	8004ffc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	bc80      	pop	{r7}
 8005006:	4770      	bx	lr
 8005008:	40012c00 	.word	0x40012c00
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800

08005014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	d001      	beq.n	800502c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e03a      	b.n	80050a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <HAL_TIM_Base_Start_IT+0x98>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x58>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d009      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x58>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a14      	ldr	r2, [pc, #80]	; (80050b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_TIM_Base_Start_IT+0x58>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d111      	bne.n	8005090 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b06      	cmp	r3, #6
 800507c:	d010      	beq.n	80050a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800508e:	e007      	b.n	80050a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800

080050b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0202 	mvn.w	r2, #2
 80050e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9ba 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9ad 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9bc 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b04      	cmp	r3, #4
 8005120:	d122      	bne.n	8005168 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b04      	cmp	r3, #4
 800512e:	d11b      	bne.n	8005168 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0204 	mvn.w	r2, #4
 8005138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f990 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 8005154:	e005      	b.n	8005162 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f983 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f992 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0308 	and.w	r3, r3, #8
 8005180:	2b08      	cmp	r3, #8
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0208 	mvn.w	r2, #8
 800518c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2204      	movs	r2, #4
 8005192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f966 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f959 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f968 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0310 	and.w	r3, r3, #16
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0210 	mvn.w	r2, #16
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2208      	movs	r2, #8
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f93c 	bl	8005474 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f92f 	bl	8005462 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f93e 	bl	8005486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	2b01      	cmp	r3, #1
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0201 	mvn.w	r2, #1
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f90a 	bl	8005450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b80      	cmp	r3, #128	; 0x80
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa81 	bl	800576a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005272:	2b40      	cmp	r3, #64	; 0x40
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005280:	2b40      	cmp	r3, #64	; 0x40
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f902 	bl	8005498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d10e      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d107      	bne.n	80052c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f06f 0220 	mvn.w	r2, #32
 80052b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa4c 	bl	8005758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_TIM_ConfigClockSource+0x18>
 80052dc:	2302      	movs	r3, #2
 80052de:	e0b3      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x180>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005306:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005318:	d03e      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0xd0>
 800531a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531e:	f200 8087 	bhi.w	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005326:	f000 8085 	beq.w	8005434 <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d87f      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005330:	2b70      	cmp	r3, #112	; 0x70
 8005332:	d01a      	beq.n	800536a <HAL_TIM_ConfigClockSource+0xa2>
 8005334:	2b70      	cmp	r3, #112	; 0x70
 8005336:	d87b      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005338:	2b60      	cmp	r3, #96	; 0x60
 800533a:	d050      	beq.n	80053de <HAL_TIM_ConfigClockSource+0x116>
 800533c:	2b60      	cmp	r3, #96	; 0x60
 800533e:	d877      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005340:	2b50      	cmp	r3, #80	; 0x50
 8005342:	d03c      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xf6>
 8005344:	2b50      	cmp	r3, #80	; 0x50
 8005346:	d873      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d058      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x136>
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d86f      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005350:	2b30      	cmp	r3, #48	; 0x30
 8005352:	d064      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x156>
 8005354:	2b30      	cmp	r3, #48	; 0x30
 8005356:	d86b      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005358:	2b20      	cmp	r3, #32
 800535a:	d060      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x156>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d867      	bhi.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d05c      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x156>
 8005364:	2b10      	cmp	r3, #16
 8005366:	d05a      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005368:	e062      	b.n	8005430 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6899      	ldr	r1, [r3, #8]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f000 f970 	bl	800565e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800538c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	609a      	str	r2, [r3, #8]
      break;
 8005396:	e04e      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6899      	ldr	r1, [r3, #8]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f000 f959 	bl	800565e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053ba:	609a      	str	r2, [r3, #8]
      break;
 80053bc:	e03b      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f000 f8d0 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2150      	movs	r1, #80	; 0x50
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f927 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 80053dc:	e02b      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f000 f8ee 	bl	80055cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2160      	movs	r1, #96	; 0x60
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f917 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 80053fc:	e01b      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 f8b0 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2140      	movs	r1, #64	; 0x40
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f907 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 800541c:	e00b      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f000 f8fe 	bl	800562a <TIM_ITRx_SetConfig>
        break;
 800542e:	e002      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005434:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr
	...

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a29      	ldr	r2, [pc, #164]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_Base_SetConfig+0xc0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	431a      	orrs	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e046      	b.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d009      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10c      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800

08005758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e03f      	b.n	800580e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fd fa48 	bl	8002c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f905 	bl	80059d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b08a      	sub	sp, #40	; 0x28
 800581a:	af02      	add	r7, sp, #8
 800581c:	60f8      	str	r0, [r7, #12]
 800581e:	60b9      	str	r1, [r7, #8]
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4613      	mov	r3, r2
 8005824:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	d17c      	bne.n	8005930 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <HAL_UART_Transmit+0x2c>
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e075      	b.n	8005932 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_UART_Transmit+0x3e>
 8005850:	2302      	movs	r3, #2
 8005852:	e06e      	b.n	8005932 <HAL_UART_Transmit+0x11c>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2221      	movs	r2, #33	; 0x21
 8005866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800586a:	f7fd fc2f 	bl	80030cc <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d108      	bne.n	8005898 <HAL_UART_Transmit+0x82>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e003      	b.n	80058a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058a8:	e02a      	b.n	8005900 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f840 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e036      	b.n	8005932 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	3302      	adds	r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e007      	b.n	80058f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d1cf      	bne.n	80058aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	2140      	movs	r1, #64	; 0x40
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f810 	bl	800593a <UART_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e006      	b.n	8005932 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594a:	e02c      	b.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d028      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <UART_WaitOnFlagUntilTimeout+0x30>
 800595a:	f7fd fbb7 	bl	80030cc <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	429a      	cmp	r2, r3
 8005968:	d21d      	bcs.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005978:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695a      	ldr	r2, [r3, #20]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0201 	bic.w	r2, r2, #1
 8005988:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2220      	movs	r2, #32
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00f      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4013      	ands	r3, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	bf0c      	ite	eq
 80059b6:	2301      	moveq	r3, #1
 80059b8:	2300      	movne	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	461a      	mov	r2, r3
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d0c3      	beq.n	800594c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a0a:	f023 030c 	bic.w	r3, r3, #12
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	430b      	orrs	r3, r1
 8005a16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2c      	ldr	r2, [pc, #176]	; (8005ae4 <UART_SetConfig+0x114>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d103      	bne.n	8005a40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a38:	f7fe ffba 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8005a3c:	60f8      	str	r0, [r7, #12]
 8005a3e:	e002      	b.n	8005a46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a40:	f7fe ffa2 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8005a44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009a      	lsls	r2, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	4a22      	ldr	r2, [pc, #136]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	0119      	lsls	r1, r3, #4
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009a      	lsls	r2, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7c:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2064      	movs	r0, #100	; 0x64
 8005a86:	fb00 f303 	mul.w	r3, r0, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	; 0x32
 8005a90:	4a15      	ldr	r2, [pc, #84]	; (8005ae8 <UART_SetConfig+0x118>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a9c:	4419      	add	r1, r3
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009a      	lsls	r2, r3, #2
 8005aa8:	441a      	add	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <UART_SetConfig+0x118>)
 8005ab6:	fba3 0302 	umull	r0, r3, r3, r2
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2064      	movs	r0, #100	; 0x64
 8005abe:	fb00 f303 	mul.w	r3, r0, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	3332      	adds	r3, #50	; 0x32
 8005ac8:	4a07      	ldr	r2, [pc, #28]	; (8005ae8 <UART_SetConfig+0x118>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	440a      	add	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	40013800 	.word	0x40013800
 8005ae8:	51eb851f 	.word	0x51eb851f

08005aec <__errno>:
 8005aec:	4b01      	ldr	r3, [pc, #4]	; (8005af4 <__errno+0x8>)
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000001c 	.word	0x2000001c

08005af8 <__libc_init_array>:
 8005af8:	b570      	push	{r4, r5, r6, lr}
 8005afa:	2600      	movs	r6, #0
 8005afc:	4d0c      	ldr	r5, [pc, #48]	; (8005b30 <__libc_init_array+0x38>)
 8005afe:	4c0d      	ldr	r4, [pc, #52]	; (8005b34 <__libc_init_array+0x3c>)
 8005b00:	1b64      	subs	r4, r4, r5
 8005b02:	10a4      	asrs	r4, r4, #2
 8005b04:	42a6      	cmp	r6, r4
 8005b06:	d109      	bne.n	8005b1c <__libc_init_array+0x24>
 8005b08:	f002 ff18 	bl	800893c <_init>
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	4d0a      	ldr	r5, [pc, #40]	; (8005b38 <__libc_init_array+0x40>)
 8005b10:	4c0a      	ldr	r4, [pc, #40]	; (8005b3c <__libc_init_array+0x44>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	42a6      	cmp	r6, r4
 8005b18:	d105      	bne.n	8005b26 <__libc_init_array+0x2e>
 8005b1a:	bd70      	pop	{r4, r5, r6, pc}
 8005b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b20:	4798      	blx	r3
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7ee      	b.n	8005b04 <__libc_init_array+0xc>
 8005b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b2a:	4798      	blx	r3
 8005b2c:	3601      	adds	r6, #1
 8005b2e:	e7f2      	b.n	8005b16 <__libc_init_array+0x1e>
 8005b30:	08009b14 	.word	0x08009b14
 8005b34:	08009b14 	.word	0x08009b14
 8005b38:	08009b14 	.word	0x08009b14
 8005b3c:	08009b18 	.word	0x08009b18

08005b40 <__itoa>:
 8005b40:	1e93      	subs	r3, r2, #2
 8005b42:	2b22      	cmp	r3, #34	; 0x22
 8005b44:	b510      	push	{r4, lr}
 8005b46:	460c      	mov	r4, r1
 8005b48:	d904      	bls.n	8005b54 <__itoa+0x14>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	461c      	mov	r4, r3
 8005b4e:	700b      	strb	r3, [r1, #0]
 8005b50:	4620      	mov	r0, r4
 8005b52:	bd10      	pop	{r4, pc}
 8005b54:	2a0a      	cmp	r2, #10
 8005b56:	d109      	bne.n	8005b6c <__itoa+0x2c>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	da07      	bge.n	8005b6c <__itoa+0x2c>
 8005b5c:	232d      	movs	r3, #45	; 0x2d
 8005b5e:	700b      	strb	r3, [r1, #0]
 8005b60:	2101      	movs	r1, #1
 8005b62:	4240      	negs	r0, r0
 8005b64:	4421      	add	r1, r4
 8005b66:	f000 fc8d 	bl	8006484 <__utoa>
 8005b6a:	e7f1      	b.n	8005b50 <__itoa+0x10>
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	e7f9      	b.n	8005b64 <__itoa+0x24>

08005b70 <itoa>:
 8005b70:	f7ff bfe6 	b.w	8005b40 <__itoa>

08005b74 <memset>:
 8005b74:	4603      	mov	r3, r0
 8005b76:	4402      	add	r2, r0
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d100      	bne.n	8005b7e <memset+0xa>
 8005b7c:	4770      	bx	lr
 8005b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b82:	e7f9      	b.n	8005b78 <memset+0x4>

08005b84 <__cvt>:
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	bfbb      	ittet	lt
 8005b8e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b92:	461f      	movlt	r7, r3
 8005b94:	2300      	movge	r3, #0
 8005b96:	232d      	movlt	r3, #45	; 0x2d
 8005b98:	b088      	sub	sp, #32
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b9e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ba0:	7013      	strb	r3, [r2, #0]
 8005ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ba4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ba8:	f023 0820 	bic.w	r8, r3, #32
 8005bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bb0:	d005      	beq.n	8005bbe <__cvt+0x3a>
 8005bb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005bb6:	d100      	bne.n	8005bba <__cvt+0x36>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e000      	b.n	8005bc0 <__cvt+0x3c>
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	aa07      	add	r2, sp, #28
 8005bc2:	9204      	str	r2, [sp, #16]
 8005bc4:	aa06      	add	r2, sp, #24
 8005bc6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bca:	e9cd 3500 	strd	r3, r5, [sp]
 8005bce:	4622      	mov	r2, r4
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	f000 fd29 	bl	8006628 <_dtoa_r>
 8005bd6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bda:	4606      	mov	r6, r0
 8005bdc:	d102      	bne.n	8005be4 <__cvt+0x60>
 8005bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005be0:	07db      	lsls	r3, r3, #31
 8005be2:	d522      	bpl.n	8005c2a <__cvt+0xa6>
 8005be4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005be8:	eb06 0905 	add.w	r9, r6, r5
 8005bec:	d110      	bne.n	8005c10 <__cvt+0x8c>
 8005bee:	7833      	ldrb	r3, [r6, #0]
 8005bf0:	2b30      	cmp	r3, #48	; 0x30
 8005bf2:	d10a      	bne.n	8005c0a <__cvt+0x86>
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa ff88 	bl	8000b10 <__aeabi_dcmpeq>
 8005c00:	b918      	cbnz	r0, 8005c0a <__cvt+0x86>
 8005c02:	f1c5 0501 	rsb	r5, r5, #1
 8005c06:	f8ca 5000 	str.w	r5, [sl]
 8005c0a:	f8da 3000 	ldr.w	r3, [sl]
 8005c0e:	4499      	add	r9, r3
 8005c10:	2200      	movs	r2, #0
 8005c12:	2300      	movs	r3, #0
 8005c14:	4620      	mov	r0, r4
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa ff7a 	bl	8000b10 <__aeabi_dcmpeq>
 8005c1c:	b108      	cbz	r0, 8005c22 <__cvt+0x9e>
 8005c1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c22:	2230      	movs	r2, #48	; 0x30
 8005c24:	9b07      	ldr	r3, [sp, #28]
 8005c26:	454b      	cmp	r3, r9
 8005c28:	d307      	bcc.n	8005c3a <__cvt+0xb6>
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	9b07      	ldr	r3, [sp, #28]
 8005c2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c30:	1b9b      	subs	r3, r3, r6
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	b008      	add	sp, #32
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	9107      	str	r1, [sp, #28]
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e7f0      	b.n	8005c24 <__cvt+0xa0>

08005c42 <__exponent>:
 8005c42:	4603      	mov	r3, r0
 8005c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c46:	2900      	cmp	r1, #0
 8005c48:	f803 2b02 	strb.w	r2, [r3], #2
 8005c4c:	bfb6      	itet	lt
 8005c4e:	222d      	movlt	r2, #45	; 0x2d
 8005c50:	222b      	movge	r2, #43	; 0x2b
 8005c52:	4249      	neglt	r1, r1
 8005c54:	2909      	cmp	r1, #9
 8005c56:	7042      	strb	r2, [r0, #1]
 8005c58:	dd2b      	ble.n	8005cb2 <__exponent+0x70>
 8005c5a:	f10d 0407 	add.w	r4, sp, #7
 8005c5e:	46a4      	mov	ip, r4
 8005c60:	270a      	movs	r7, #10
 8005c62:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c66:	460a      	mov	r2, r1
 8005c68:	46a6      	mov	lr, r4
 8005c6a:	fb07 1516 	mls	r5, r7, r6, r1
 8005c6e:	2a63      	cmp	r2, #99	; 0x63
 8005c70:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c74:	4631      	mov	r1, r6
 8005c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c7e:	dcf0      	bgt.n	8005c62 <__exponent+0x20>
 8005c80:	3130      	adds	r1, #48	; 0x30
 8005c82:	f1ae 0502 	sub.w	r5, lr, #2
 8005c86:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	1c44      	adds	r4, r0, #1
 8005c8e:	4561      	cmp	r1, ip
 8005c90:	d30a      	bcc.n	8005ca8 <__exponent+0x66>
 8005c92:	f10d 0209 	add.w	r2, sp, #9
 8005c96:	eba2 020e 	sub.w	r2, r2, lr
 8005c9a:	4565      	cmp	r5, ip
 8005c9c:	bf88      	it	hi
 8005c9e:	2200      	movhi	r2, #0
 8005ca0:	4413      	add	r3, r2
 8005ca2:	1a18      	subs	r0, r3, r0
 8005ca4:	b003      	add	sp, #12
 8005ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ca8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cac:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005cb0:	e7ed      	b.n	8005c8e <__exponent+0x4c>
 8005cb2:	2330      	movs	r3, #48	; 0x30
 8005cb4:	3130      	adds	r1, #48	; 0x30
 8005cb6:	7083      	strb	r3, [r0, #2]
 8005cb8:	70c1      	strb	r1, [r0, #3]
 8005cba:	1d03      	adds	r3, r0, #4
 8005cbc:	e7f1      	b.n	8005ca2 <__exponent+0x60>
	...

08005cc0 <_printf_float>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b091      	sub	sp, #68	; 0x44
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005ccc:	4616      	mov	r6, r2
 8005cce:	461f      	mov	r7, r3
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	f001 fa97 	bl	8007204 <_localeconv_r>
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	9309      	str	r3, [sp, #36]	; 0x24
 8005cdc:	f7fa fa38 	bl	8000150 <strlen>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8005ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce8:	900a      	str	r0, [sp, #40]	; 0x28
 8005cea:	3307      	adds	r3, #7
 8005cec:	f023 0307 	bic.w	r3, r3, #7
 8005cf0:	f103 0208 	add.w	r2, r3, #8
 8005cf4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cf8:	f8d4 b000 	ldr.w	fp, [r4]
 8005cfc:	f8c8 2000 	str.w	r2, [r8]
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d08:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005d0c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005d10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	4640      	mov	r0, r8
 8005d18:	4b9c      	ldr	r3, [pc, #624]	; (8005f8c <_printf_float+0x2cc>)
 8005d1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d1c:	f7fa ff2a 	bl	8000b74 <__aeabi_dcmpun>
 8005d20:	bb70      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	4640      	mov	r0, r8
 8005d28:	4b98      	ldr	r3, [pc, #608]	; (8005f8c <_printf_float+0x2cc>)
 8005d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d2c:	f7fa ff04 	bl	8000b38 <__aeabi_dcmple>
 8005d30:	bb30      	cbnz	r0, 8005d80 <_printf_float+0xc0>
 8005d32:	2200      	movs	r2, #0
 8005d34:	2300      	movs	r3, #0
 8005d36:	4640      	mov	r0, r8
 8005d38:	4651      	mov	r1, sl
 8005d3a:	f7fa fef3 	bl	8000b24 <__aeabi_dcmplt>
 8005d3e:	b110      	cbz	r0, 8005d46 <_printf_float+0x86>
 8005d40:	232d      	movs	r3, #45	; 0x2d
 8005d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d46:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <_printf_float+0x2d0>)
 8005d48:	4892      	ldr	r0, [pc, #584]	; (8005f94 <_printf_float+0x2d4>)
 8005d4a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d4e:	bf94      	ite	ls
 8005d50:	4698      	movls	r8, r3
 8005d52:	4680      	movhi	r8, r0
 8005d54:	2303      	movs	r3, #3
 8005d56:	f04f 0a00 	mov.w	sl, #0
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	f02b 0304 	bic.w	r3, fp, #4
 8005d60:	6023      	str	r3, [r4, #0]
 8005d62:	4633      	mov	r3, r6
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	9700      	str	r7, [sp, #0]
 8005d6a:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d6c:	f000 f9d4 	bl	8006118 <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	f040 8090 	bne.w	8005e96 <_printf_float+0x1d6>
 8005d76:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7a:	b011      	add	sp, #68	; 0x44
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	4642      	mov	r2, r8
 8005d82:	4653      	mov	r3, sl
 8005d84:	4640      	mov	r0, r8
 8005d86:	4651      	mov	r1, sl
 8005d88:	f7fa fef4 	bl	8000b74 <__aeabi_dcmpun>
 8005d8c:	b148      	cbz	r0, 8005da2 <_printf_float+0xe2>
 8005d8e:	f1ba 0f00 	cmp.w	sl, #0
 8005d92:	bfb8      	it	lt
 8005d94:	232d      	movlt	r3, #45	; 0x2d
 8005d96:	4880      	ldr	r0, [pc, #512]	; (8005f98 <_printf_float+0x2d8>)
 8005d98:	bfb8      	it	lt
 8005d9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	; (8005f9c <_printf_float+0x2dc>)
 8005da0:	e7d3      	b.n	8005d4a <_printf_float+0x8a>
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	d142      	bne.n	8005e32 <_printf_float+0x172>
 8005dac:	2306      	movs	r3, #6
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	9206      	str	r2, [sp, #24]
 8005db4:	aa0e      	add	r2, sp, #56	; 0x38
 8005db6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005dba:	aa0d      	add	r2, sp, #52	; 0x34
 8005dbc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005dc0:	9203      	str	r2, [sp, #12]
 8005dc2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005dc6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005dca:	6023      	str	r3, [r4, #0]
 8005dcc:	6863      	ldr	r3, [r4, #4]
 8005dce:	4642      	mov	r2, r8
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	4653      	mov	r3, sl
 8005dd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8005dd8:	f7ff fed4 	bl	8005b84 <__cvt>
 8005ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dde:	4680      	mov	r8, r0
 8005de0:	2947      	cmp	r1, #71	; 0x47
 8005de2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005de4:	d108      	bne.n	8005df8 <_printf_float+0x138>
 8005de6:	1cc8      	adds	r0, r1, #3
 8005de8:	db02      	blt.n	8005df0 <_printf_float+0x130>
 8005dea:	6863      	ldr	r3, [r4, #4]
 8005dec:	4299      	cmp	r1, r3
 8005dee:	dd40      	ble.n	8005e72 <_printf_float+0x1b2>
 8005df0:	f1a9 0902 	sub.w	r9, r9, #2
 8005df4:	fa5f f989 	uxtb.w	r9, r9
 8005df8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005dfc:	d81f      	bhi.n	8005e3e <_printf_float+0x17e>
 8005dfe:	464a      	mov	r2, r9
 8005e00:	3901      	subs	r1, #1
 8005e02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e06:	910d      	str	r1, [sp, #52]	; 0x34
 8005e08:	f7ff ff1b 	bl	8005c42 <__exponent>
 8005e0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e0e:	4682      	mov	sl, r0
 8005e10:	1813      	adds	r3, r2, r0
 8005e12:	2a01      	cmp	r2, #1
 8005e14:	6123      	str	r3, [r4, #16]
 8005e16:	dc02      	bgt.n	8005e1e <_printf_float+0x15e>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	07d2      	lsls	r2, r2, #31
 8005e1c:	d501      	bpl.n	8005e22 <_printf_float+0x162>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6123      	str	r3, [r4, #16]
 8005e22:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d09b      	beq.n	8005d62 <_printf_float+0xa2>
 8005e2a:	232d      	movs	r3, #45	; 0x2d
 8005e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e30:	e797      	b.n	8005d62 <_printf_float+0xa2>
 8005e32:	2947      	cmp	r1, #71	; 0x47
 8005e34:	d1bc      	bne.n	8005db0 <_printf_float+0xf0>
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ba      	bne.n	8005db0 <_printf_float+0xf0>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e7b7      	b.n	8005dae <_printf_float+0xee>
 8005e3e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e42:	d118      	bne.n	8005e76 <_printf_float+0x1b6>
 8005e44:	2900      	cmp	r1, #0
 8005e46:	6863      	ldr	r3, [r4, #4]
 8005e48:	dd0b      	ble.n	8005e62 <_printf_float+0x1a2>
 8005e4a:	6121      	str	r1, [r4, #16]
 8005e4c:	b913      	cbnz	r3, 8005e54 <_printf_float+0x194>
 8005e4e:	6822      	ldr	r2, [r4, #0]
 8005e50:	07d0      	lsls	r0, r2, #31
 8005e52:	d502      	bpl.n	8005e5a <_printf_float+0x19a>
 8005e54:	3301      	adds	r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	f04f 0a00 	mov.w	sl, #0
 8005e5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e60:	e7df      	b.n	8005e22 <_printf_float+0x162>
 8005e62:	b913      	cbnz	r3, 8005e6a <_printf_float+0x1aa>
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	07d2      	lsls	r2, r2, #31
 8005e68:	d501      	bpl.n	8005e6e <_printf_float+0x1ae>
 8005e6a:	3302      	adds	r3, #2
 8005e6c:	e7f4      	b.n	8005e58 <_printf_float+0x198>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e7f2      	b.n	8005e58 <_printf_float+0x198>
 8005e72:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	db05      	blt.n	8005e88 <_printf_float+0x1c8>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	6121      	str	r1, [r4, #16]
 8005e80:	07d8      	lsls	r0, r3, #31
 8005e82:	d5ea      	bpl.n	8005e5a <_printf_float+0x19a>
 8005e84:	1c4b      	adds	r3, r1, #1
 8005e86:	e7e7      	b.n	8005e58 <_printf_float+0x198>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	bfcc      	ite	gt
 8005e8c:	2201      	movgt	r2, #1
 8005e8e:	f1c1 0202 	rsble	r2, r1, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	e7e0      	b.n	8005e58 <_printf_float+0x198>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	055a      	lsls	r2, r3, #21
 8005e9a:	d407      	bmi.n	8005eac <_printf_float+0x1ec>
 8005e9c:	6923      	ldr	r3, [r4, #16]
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	4631      	mov	r1, r6
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	47b8      	blx	r7
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d12b      	bne.n	8005f02 <_printf_float+0x242>
 8005eaa:	e764      	b.n	8005d76 <_printf_float+0xb6>
 8005eac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005eb0:	f240 80dd 	bls.w	800606e <_printf_float+0x3ae>
 8005eb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f7fa fe28 	bl	8000b10 <__aeabi_dcmpeq>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d033      	beq.n	8005f2c <_printf_float+0x26c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4628      	mov	r0, r5
 8005eca:	4a35      	ldr	r2, [pc, #212]	; (8005fa0 <_printf_float+0x2e0>)
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f43f af51 	beq.w	8005d76 <_printf_float+0xb6>
 8005ed4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	db02      	blt.n	8005ee2 <_printf_float+0x222>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	07d8      	lsls	r0, r3, #31
 8005ee0:	d50f      	bpl.n	8005f02 <_printf_float+0x242>
 8005ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4628      	mov	r0, r5
 8005eea:	47b8      	blx	r7
 8005eec:	3001      	adds	r0, #1
 8005eee:	f43f af42 	beq.w	8005d76 <_printf_float+0xb6>
 8005ef2:	f04f 0800 	mov.w	r8, #0
 8005ef6:	f104 091a 	add.w	r9, r4, #26
 8005efa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4543      	cmp	r3, r8
 8005f00:	dc09      	bgt.n	8005f16 <_printf_float+0x256>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079b      	lsls	r3, r3, #30
 8005f06:	f100 8102 	bmi.w	800610e <_printf_float+0x44e>
 8005f0a:	68e0      	ldr	r0, [r4, #12]
 8005f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f0e:	4298      	cmp	r0, r3
 8005f10:	bfb8      	it	lt
 8005f12:	4618      	movlt	r0, r3
 8005f14:	e731      	b.n	8005d7a <_printf_float+0xba>
 8005f16:	2301      	movs	r3, #1
 8005f18:	464a      	mov	r2, r9
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	47b8      	blx	r7
 8005f20:	3001      	adds	r0, #1
 8005f22:	f43f af28 	beq.w	8005d76 <_printf_float+0xb6>
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	e7e6      	b.n	8005efa <_printf_float+0x23a>
 8005f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	dc38      	bgt.n	8005fa4 <_printf_float+0x2e4>
 8005f32:	2301      	movs	r3, #1
 8005f34:	4631      	mov	r1, r6
 8005f36:	4628      	mov	r0, r5
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <_printf_float+0x2e0>)
 8005f3a:	47b8      	blx	r7
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	f43f af1a 	beq.w	8005d76 <_printf_float+0xb6>
 8005f42:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d102      	bne.n	8005f50 <_printf_float+0x290>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	07d9      	lsls	r1, r3, #31
 8005f4e:	d5d8      	bpl.n	8005f02 <_printf_float+0x242>
 8005f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f af0b 	beq.w	8005d76 <_printf_float+0xb6>
 8005f60:	f04f 0900 	mov.w	r9, #0
 8005f64:	f104 0a1a 	add.w	sl, r4, #26
 8005f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	454b      	cmp	r3, r9
 8005f6e:	dc01      	bgt.n	8005f74 <_printf_float+0x2b4>
 8005f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f72:	e794      	b.n	8005e9e <_printf_float+0x1de>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4652      	mov	r2, sl
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f aef9 	beq.w	8005d76 <_printf_float+0xb6>
 8005f84:	f109 0901 	add.w	r9, r9, #1
 8005f88:	e7ee      	b.n	8005f68 <_printf_float+0x2a8>
 8005f8a:	bf00      	nop
 8005f8c:	7fefffff 	.word	0x7fefffff
 8005f90:	0800970c 	.word	0x0800970c
 8005f94:	08009710 	.word	0x08009710
 8005f98:	08009718 	.word	0x08009718
 8005f9c:	08009714 	.word	0x08009714
 8005fa0:	0800971c 	.word	0x0800971c
 8005fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	bfa8      	it	ge
 8005fac:	461a      	movge	r2, r3
 8005fae:	2a00      	cmp	r2, #0
 8005fb0:	4691      	mov	r9, r2
 8005fb2:	dc37      	bgt.n	8006024 <_printf_float+0x364>
 8005fb4:	f04f 0b00 	mov.w	fp, #0
 8005fb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fbc:	f104 021a 	add.w	r2, r4, #26
 8005fc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fc4:	ebaa 0309 	sub.w	r3, sl, r9
 8005fc8:	455b      	cmp	r3, fp
 8005fca:	dc33      	bgt.n	8006034 <_printf_float+0x374>
 8005fcc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	db3b      	blt.n	800604c <_printf_float+0x38c>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07da      	lsls	r2, r3, #31
 8005fd8:	d438      	bmi.n	800604c <_printf_float+0x38c>
 8005fda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fdc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fde:	eba2 030a 	sub.w	r3, r2, sl
 8005fe2:	eba2 0901 	sub.w	r9, r2, r1
 8005fe6:	4599      	cmp	r9, r3
 8005fe8:	bfa8      	it	ge
 8005fea:	4699      	movge	r9, r3
 8005fec:	f1b9 0f00 	cmp.w	r9, #0
 8005ff0:	dc34      	bgt.n	800605c <_printf_float+0x39c>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ffa:	f104 0a1a 	add.w	sl, r4, #26
 8005ffe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	eba3 0309 	sub.w	r3, r3, r9
 8006008:	4543      	cmp	r3, r8
 800600a:	f77f af7a 	ble.w	8005f02 <_printf_float+0x242>
 800600e:	2301      	movs	r3, #1
 8006010:	4652      	mov	r2, sl
 8006012:	4631      	mov	r1, r6
 8006014:	4628      	mov	r0, r5
 8006016:	47b8      	blx	r7
 8006018:	3001      	adds	r0, #1
 800601a:	f43f aeac 	beq.w	8005d76 <_printf_float+0xb6>
 800601e:	f108 0801 	add.w	r8, r8, #1
 8006022:	e7ec      	b.n	8005ffe <_printf_float+0x33e>
 8006024:	4613      	mov	r3, r2
 8006026:	4631      	mov	r1, r6
 8006028:	4642      	mov	r2, r8
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	d1c0      	bne.n	8005fb4 <_printf_float+0x2f4>
 8006032:	e6a0      	b.n	8005d76 <_printf_float+0xb6>
 8006034:	2301      	movs	r3, #1
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	920b      	str	r2, [sp, #44]	; 0x2c
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f ae99 	beq.w	8005d76 <_printf_float+0xb6>
 8006044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006046:	f10b 0b01 	add.w	fp, fp, #1
 800604a:	e7b9      	b.n	8005fc0 <_printf_float+0x300>
 800604c:	4631      	mov	r1, r6
 800604e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	d1bf      	bne.n	8005fda <_printf_float+0x31a>
 800605a:	e68c      	b.n	8005d76 <_printf_float+0xb6>
 800605c:	464b      	mov	r3, r9
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	eb08 020a 	add.w	r2, r8, sl
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	d1c2      	bne.n	8005ff2 <_printf_float+0x332>
 800606c:	e683      	b.n	8005d76 <_printf_float+0xb6>
 800606e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006070:	2a01      	cmp	r2, #1
 8006072:	dc01      	bgt.n	8006078 <_printf_float+0x3b8>
 8006074:	07db      	lsls	r3, r3, #31
 8006076:	d537      	bpl.n	80060e8 <_printf_float+0x428>
 8006078:	2301      	movs	r3, #1
 800607a:	4642      	mov	r2, r8
 800607c:	4631      	mov	r1, r6
 800607e:	4628      	mov	r0, r5
 8006080:	47b8      	blx	r7
 8006082:	3001      	adds	r0, #1
 8006084:	f43f ae77 	beq.w	8005d76 <_printf_float+0xb6>
 8006088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608c:	4631      	mov	r1, r6
 800608e:	4628      	mov	r0, r5
 8006090:	47b8      	blx	r7
 8006092:	3001      	adds	r0, #1
 8006094:	f43f ae6f 	beq.w	8005d76 <_printf_float+0xb6>
 8006098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f7fa fd36 	bl	8000b10 <__aeabi_dcmpeq>
 80060a4:	b9d8      	cbnz	r0, 80060de <_printf_float+0x41e>
 80060a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060a8:	f108 0201 	add.w	r2, r8, #1
 80060ac:	3b01      	subs	r3, #1
 80060ae:	4631      	mov	r1, r6
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b8      	blx	r7
 80060b4:	3001      	adds	r0, #1
 80060b6:	d10e      	bne.n	80060d6 <_printf_float+0x416>
 80060b8:	e65d      	b.n	8005d76 <_printf_float+0xb6>
 80060ba:	2301      	movs	r3, #1
 80060bc:	464a      	mov	r2, r9
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b8      	blx	r7
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f ae56 	beq.w	8005d76 <_printf_float+0xb6>
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060d0:	3b01      	subs	r3, #1
 80060d2:	4543      	cmp	r3, r8
 80060d4:	dcf1      	bgt.n	80060ba <_printf_float+0x3fa>
 80060d6:	4653      	mov	r3, sl
 80060d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060dc:	e6e0      	b.n	8005ea0 <_printf_float+0x1e0>
 80060de:	f04f 0800 	mov.w	r8, #0
 80060e2:	f104 091a 	add.w	r9, r4, #26
 80060e6:	e7f2      	b.n	80060ce <_printf_float+0x40e>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4642      	mov	r2, r8
 80060ec:	e7df      	b.n	80060ae <_printf_float+0x3ee>
 80060ee:	2301      	movs	r3, #1
 80060f0:	464a      	mov	r2, r9
 80060f2:	4631      	mov	r1, r6
 80060f4:	4628      	mov	r0, r5
 80060f6:	47b8      	blx	r7
 80060f8:	3001      	adds	r0, #1
 80060fa:	f43f ae3c 	beq.w	8005d76 <_printf_float+0xb6>
 80060fe:	f108 0801 	add.w	r8, r8, #1
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006106:	1a5b      	subs	r3, r3, r1
 8006108:	4543      	cmp	r3, r8
 800610a:	dcf0      	bgt.n	80060ee <_printf_float+0x42e>
 800610c:	e6fd      	b.n	8005f0a <_printf_float+0x24a>
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	f104 0919 	add.w	r9, r4, #25
 8006116:	e7f4      	b.n	8006102 <_printf_float+0x442>

08006118 <_printf_common>:
 8006118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800611c:	4616      	mov	r6, r2
 800611e:	4699      	mov	r9, r3
 8006120:	688a      	ldr	r2, [r1, #8]
 8006122:	690b      	ldr	r3, [r1, #16]
 8006124:	4607      	mov	r7, r0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfb8      	it	lt
 800612a:	4613      	movlt	r3, r2
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006132:	460c      	mov	r4, r1
 8006134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006138:	b10a      	cbz	r2, 800613e <_printf_common+0x26>
 800613a:	3301      	adds	r3, #1
 800613c:	6033      	str	r3, [r6, #0]
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	0699      	lsls	r1, r3, #26
 8006142:	bf42      	ittt	mi
 8006144:	6833      	ldrmi	r3, [r6, #0]
 8006146:	3302      	addmi	r3, #2
 8006148:	6033      	strmi	r3, [r6, #0]
 800614a:	6825      	ldr	r5, [r4, #0]
 800614c:	f015 0506 	ands.w	r5, r5, #6
 8006150:	d106      	bne.n	8006160 <_printf_common+0x48>
 8006152:	f104 0a19 	add.w	sl, r4, #25
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	6832      	ldr	r2, [r6, #0]
 800615a:	1a9b      	subs	r3, r3, r2
 800615c:	42ab      	cmp	r3, r5
 800615e:	dc28      	bgt.n	80061b2 <_printf_common+0x9a>
 8006160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006164:	1e13      	subs	r3, r2, #0
 8006166:	6822      	ldr	r2, [r4, #0]
 8006168:	bf18      	it	ne
 800616a:	2301      	movne	r3, #1
 800616c:	0692      	lsls	r2, r2, #26
 800616e:	d42d      	bmi.n	80061cc <_printf_common+0xb4>
 8006170:	4649      	mov	r1, r9
 8006172:	4638      	mov	r0, r7
 8006174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d020      	beq.n	80061c0 <_printf_common+0xa8>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	68e5      	ldr	r5, [r4, #12]
 8006182:	f003 0306 	and.w	r3, r3, #6
 8006186:	2b04      	cmp	r3, #4
 8006188:	bf18      	it	ne
 800618a:	2500      	movne	r5, #0
 800618c:	6832      	ldr	r2, [r6, #0]
 800618e:	f04f 0600 	mov.w	r6, #0
 8006192:	68a3      	ldr	r3, [r4, #8]
 8006194:	bf08      	it	eq
 8006196:	1aad      	subeq	r5, r5, r2
 8006198:	6922      	ldr	r2, [r4, #16]
 800619a:	bf08      	it	eq
 800619c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061a0:	4293      	cmp	r3, r2
 80061a2:	bfc4      	itt	gt
 80061a4:	1a9b      	subgt	r3, r3, r2
 80061a6:	18ed      	addgt	r5, r5, r3
 80061a8:	341a      	adds	r4, #26
 80061aa:	42b5      	cmp	r5, r6
 80061ac:	d11a      	bne.n	80061e4 <_printf_common+0xcc>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e008      	b.n	80061c4 <_printf_common+0xac>
 80061b2:	2301      	movs	r3, #1
 80061b4:	4652      	mov	r2, sl
 80061b6:	4649      	mov	r1, r9
 80061b8:	4638      	mov	r0, r7
 80061ba:	47c0      	blx	r8
 80061bc:	3001      	adds	r0, #1
 80061be:	d103      	bne.n	80061c8 <_printf_common+0xb0>
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	3501      	adds	r5, #1
 80061ca:	e7c4      	b.n	8006156 <_printf_common+0x3e>
 80061cc:	2030      	movs	r0, #48	; 0x30
 80061ce:	18e1      	adds	r1, r4, r3
 80061d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061da:	4422      	add	r2, r4
 80061dc:	3302      	adds	r3, #2
 80061de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061e2:	e7c5      	b.n	8006170 <_printf_common+0x58>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4622      	mov	r2, r4
 80061e8:	4649      	mov	r1, r9
 80061ea:	4638      	mov	r0, r7
 80061ec:	47c0      	blx	r8
 80061ee:	3001      	adds	r0, #1
 80061f0:	d0e6      	beq.n	80061c0 <_printf_common+0xa8>
 80061f2:	3601      	adds	r6, #1
 80061f4:	e7d9      	b.n	80061aa <_printf_common+0x92>
	...

080061f8 <_printf_i>:
 80061f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061fc:	460c      	mov	r4, r1
 80061fe:	7e27      	ldrb	r7, [r4, #24]
 8006200:	4691      	mov	r9, r2
 8006202:	2f78      	cmp	r7, #120	; 0x78
 8006204:	4680      	mov	r8, r0
 8006206:	469a      	mov	sl, r3
 8006208:	990c      	ldr	r1, [sp, #48]	; 0x30
 800620a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800620e:	d807      	bhi.n	8006220 <_printf_i+0x28>
 8006210:	2f62      	cmp	r7, #98	; 0x62
 8006212:	d80a      	bhi.n	800622a <_printf_i+0x32>
 8006214:	2f00      	cmp	r7, #0
 8006216:	f000 80d9 	beq.w	80063cc <_printf_i+0x1d4>
 800621a:	2f58      	cmp	r7, #88	; 0x58
 800621c:	f000 80a4 	beq.w	8006368 <_printf_i+0x170>
 8006220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006228:	e03a      	b.n	80062a0 <_printf_i+0xa8>
 800622a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800622e:	2b15      	cmp	r3, #21
 8006230:	d8f6      	bhi.n	8006220 <_printf_i+0x28>
 8006232:	a001      	add	r0, pc, #4	; (adr r0, 8006238 <_printf_i+0x40>)
 8006234:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006238:	08006291 	.word	0x08006291
 800623c:	080062a5 	.word	0x080062a5
 8006240:	08006221 	.word	0x08006221
 8006244:	08006221 	.word	0x08006221
 8006248:	08006221 	.word	0x08006221
 800624c:	08006221 	.word	0x08006221
 8006250:	080062a5 	.word	0x080062a5
 8006254:	08006221 	.word	0x08006221
 8006258:	08006221 	.word	0x08006221
 800625c:	08006221 	.word	0x08006221
 8006260:	08006221 	.word	0x08006221
 8006264:	080063b3 	.word	0x080063b3
 8006268:	080062d5 	.word	0x080062d5
 800626c:	08006395 	.word	0x08006395
 8006270:	08006221 	.word	0x08006221
 8006274:	08006221 	.word	0x08006221
 8006278:	080063d5 	.word	0x080063d5
 800627c:	08006221 	.word	0x08006221
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006221 	.word	0x08006221
 8006288:	08006221 	.word	0x08006221
 800628c:	0800639d 	.word	0x0800639d
 8006290:	680b      	ldr	r3, [r1, #0]
 8006292:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	600a      	str	r2, [r1, #0]
 800629c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062a0:	2301      	movs	r3, #1
 80062a2:	e0a4      	b.n	80063ee <_printf_i+0x1f6>
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	6808      	ldr	r0, [r1, #0]
 80062a8:	062e      	lsls	r6, r5, #24
 80062aa:	f100 0304 	add.w	r3, r0, #4
 80062ae:	d50a      	bpl.n	80062c6 <_printf_i+0xce>
 80062b0:	6805      	ldr	r5, [r0, #0]
 80062b2:	600b      	str	r3, [r1, #0]
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	da03      	bge.n	80062c0 <_printf_i+0xc8>
 80062b8:	232d      	movs	r3, #45	; 0x2d
 80062ba:	426d      	negs	r5, r5
 80062bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062c0:	230a      	movs	r3, #10
 80062c2:	485e      	ldr	r0, [pc, #376]	; (800643c <_printf_i+0x244>)
 80062c4:	e019      	b.n	80062fa <_printf_i+0x102>
 80062c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062ca:	6805      	ldr	r5, [r0, #0]
 80062cc:	600b      	str	r3, [r1, #0]
 80062ce:	bf18      	it	ne
 80062d0:	b22d      	sxthne	r5, r5
 80062d2:	e7ef      	b.n	80062b4 <_printf_i+0xbc>
 80062d4:	680b      	ldr	r3, [r1, #0]
 80062d6:	6825      	ldr	r5, [r4, #0]
 80062d8:	1d18      	adds	r0, r3, #4
 80062da:	6008      	str	r0, [r1, #0]
 80062dc:	0628      	lsls	r0, r5, #24
 80062de:	d501      	bpl.n	80062e4 <_printf_i+0xec>
 80062e0:	681d      	ldr	r5, [r3, #0]
 80062e2:	e002      	b.n	80062ea <_printf_i+0xf2>
 80062e4:	0669      	lsls	r1, r5, #25
 80062e6:	d5fb      	bpl.n	80062e0 <_printf_i+0xe8>
 80062e8:	881d      	ldrh	r5, [r3, #0]
 80062ea:	2f6f      	cmp	r7, #111	; 0x6f
 80062ec:	bf0c      	ite	eq
 80062ee:	2308      	moveq	r3, #8
 80062f0:	230a      	movne	r3, #10
 80062f2:	4852      	ldr	r0, [pc, #328]	; (800643c <_printf_i+0x244>)
 80062f4:	2100      	movs	r1, #0
 80062f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062fa:	6866      	ldr	r6, [r4, #4]
 80062fc:	2e00      	cmp	r6, #0
 80062fe:	bfa8      	it	ge
 8006300:	6821      	ldrge	r1, [r4, #0]
 8006302:	60a6      	str	r6, [r4, #8]
 8006304:	bfa4      	itt	ge
 8006306:	f021 0104 	bicge.w	r1, r1, #4
 800630a:	6021      	strge	r1, [r4, #0]
 800630c:	b90d      	cbnz	r5, 8006312 <_printf_i+0x11a>
 800630e:	2e00      	cmp	r6, #0
 8006310:	d04d      	beq.n	80063ae <_printf_i+0x1b6>
 8006312:	4616      	mov	r6, r2
 8006314:	fbb5 f1f3 	udiv	r1, r5, r3
 8006318:	fb03 5711 	mls	r7, r3, r1, r5
 800631c:	5dc7      	ldrb	r7, [r0, r7]
 800631e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006322:	462f      	mov	r7, r5
 8006324:	42bb      	cmp	r3, r7
 8006326:	460d      	mov	r5, r1
 8006328:	d9f4      	bls.n	8006314 <_printf_i+0x11c>
 800632a:	2b08      	cmp	r3, #8
 800632c:	d10b      	bne.n	8006346 <_printf_i+0x14e>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	07df      	lsls	r7, r3, #31
 8006332:	d508      	bpl.n	8006346 <_printf_i+0x14e>
 8006334:	6923      	ldr	r3, [r4, #16]
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	4299      	cmp	r1, r3
 800633a:	bfde      	ittt	le
 800633c:	2330      	movle	r3, #48	; 0x30
 800633e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006342:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006346:	1b92      	subs	r2, r2, r6
 8006348:	6122      	str	r2, [r4, #16]
 800634a:	464b      	mov	r3, r9
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f8cd a000 	str.w	sl, [sp]
 8006354:	aa03      	add	r2, sp, #12
 8006356:	f7ff fedf 	bl	8006118 <_printf_common>
 800635a:	3001      	adds	r0, #1
 800635c:	d14c      	bne.n	80063f8 <_printf_i+0x200>
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	b004      	add	sp, #16
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	4834      	ldr	r0, [pc, #208]	; (800643c <_printf_i+0x244>)
 800636a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800636e:	680e      	ldr	r6, [r1, #0]
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f856 5b04 	ldr.w	r5, [r6], #4
 8006376:	061f      	lsls	r7, r3, #24
 8006378:	600e      	str	r6, [r1, #0]
 800637a:	d514      	bpl.n	80063a6 <_printf_i+0x1ae>
 800637c:	07d9      	lsls	r1, r3, #31
 800637e:	bf44      	itt	mi
 8006380:	f043 0320 	orrmi.w	r3, r3, #32
 8006384:	6023      	strmi	r3, [r4, #0]
 8006386:	b91d      	cbnz	r5, 8006390 <_printf_i+0x198>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	f023 0320 	bic.w	r3, r3, #32
 800638e:	6023      	str	r3, [r4, #0]
 8006390:	2310      	movs	r3, #16
 8006392:	e7af      	b.n	80062f4 <_printf_i+0xfc>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	f043 0320 	orr.w	r3, r3, #32
 800639a:	6023      	str	r3, [r4, #0]
 800639c:	2378      	movs	r3, #120	; 0x78
 800639e:	4828      	ldr	r0, [pc, #160]	; (8006440 <_printf_i+0x248>)
 80063a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a4:	e7e3      	b.n	800636e <_printf_i+0x176>
 80063a6:	065e      	lsls	r6, r3, #25
 80063a8:	bf48      	it	mi
 80063aa:	b2ad      	uxthmi	r5, r5
 80063ac:	e7e6      	b.n	800637c <_printf_i+0x184>
 80063ae:	4616      	mov	r6, r2
 80063b0:	e7bb      	b.n	800632a <_printf_i+0x132>
 80063b2:	680b      	ldr	r3, [r1, #0]
 80063b4:	6826      	ldr	r6, [r4, #0]
 80063b6:	1d1d      	adds	r5, r3, #4
 80063b8:	6960      	ldr	r0, [r4, #20]
 80063ba:	600d      	str	r5, [r1, #0]
 80063bc:	0635      	lsls	r5, r6, #24
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	d501      	bpl.n	80063c6 <_printf_i+0x1ce>
 80063c2:	6018      	str	r0, [r3, #0]
 80063c4:	e002      	b.n	80063cc <_printf_i+0x1d4>
 80063c6:	0671      	lsls	r1, r6, #25
 80063c8:	d5fb      	bpl.n	80063c2 <_printf_i+0x1ca>
 80063ca:	8018      	strh	r0, [r3, #0]
 80063cc:	2300      	movs	r3, #0
 80063ce:	4616      	mov	r6, r2
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	e7ba      	b.n	800634a <_printf_i+0x152>
 80063d4:	680b      	ldr	r3, [r1, #0]
 80063d6:	1d1a      	adds	r2, r3, #4
 80063d8:	600a      	str	r2, [r1, #0]
 80063da:	681e      	ldr	r6, [r3, #0]
 80063dc:	2100      	movs	r1, #0
 80063de:	4630      	mov	r0, r6
 80063e0:	6862      	ldr	r2, [r4, #4]
 80063e2:	f000 ff1b 	bl	800721c <memchr>
 80063e6:	b108      	cbz	r0, 80063ec <_printf_i+0x1f4>
 80063e8:	1b80      	subs	r0, r0, r6
 80063ea:	6060      	str	r0, [r4, #4]
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2300      	movs	r3, #0
 80063f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f6:	e7a8      	b.n	800634a <_printf_i+0x152>
 80063f8:	4632      	mov	r2, r6
 80063fa:	4649      	mov	r1, r9
 80063fc:	4640      	mov	r0, r8
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	47d0      	blx	sl
 8006402:	3001      	adds	r0, #1
 8006404:	d0ab      	beq.n	800635e <_printf_i+0x166>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	079b      	lsls	r3, r3, #30
 800640a:	d413      	bmi.n	8006434 <_printf_i+0x23c>
 800640c:	68e0      	ldr	r0, [r4, #12]
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	4298      	cmp	r0, r3
 8006412:	bfb8      	it	lt
 8006414:	4618      	movlt	r0, r3
 8006416:	e7a4      	b.n	8006362 <_printf_i+0x16a>
 8006418:	2301      	movs	r3, #1
 800641a:	4632      	mov	r2, r6
 800641c:	4649      	mov	r1, r9
 800641e:	4640      	mov	r0, r8
 8006420:	47d0      	blx	sl
 8006422:	3001      	adds	r0, #1
 8006424:	d09b      	beq.n	800635e <_printf_i+0x166>
 8006426:	3501      	adds	r5, #1
 8006428:	68e3      	ldr	r3, [r4, #12]
 800642a:	9903      	ldr	r1, [sp, #12]
 800642c:	1a5b      	subs	r3, r3, r1
 800642e:	42ab      	cmp	r3, r5
 8006430:	dcf2      	bgt.n	8006418 <_printf_i+0x220>
 8006432:	e7eb      	b.n	800640c <_printf_i+0x214>
 8006434:	2500      	movs	r5, #0
 8006436:	f104 0619 	add.w	r6, r4, #25
 800643a:	e7f5      	b.n	8006428 <_printf_i+0x230>
 800643c:	0800971e 	.word	0x0800971e
 8006440:	0800972f 	.word	0x0800972f

08006444 <siprintf>:
 8006444:	b40e      	push	{r1, r2, r3}
 8006446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800644a:	b500      	push	{lr}
 800644c:	b09c      	sub	sp, #112	; 0x70
 800644e:	ab1d      	add	r3, sp, #116	; 0x74
 8006450:	9002      	str	r0, [sp, #8]
 8006452:	9006      	str	r0, [sp, #24]
 8006454:	9107      	str	r1, [sp, #28]
 8006456:	9104      	str	r1, [sp, #16]
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <siprintf+0x38>)
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <siprintf+0x3c>)
 800645c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006460:	9105      	str	r1, [sp, #20]
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	a902      	add	r1, sp, #8
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	f001 fb86 	bl	8007b78 <_svfiprintf_r>
 800646c:	2200      	movs	r2, #0
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	b01c      	add	sp, #112	; 0x70
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b003      	add	sp, #12
 800647a:	4770      	bx	lr
 800647c:	2000001c 	.word	0x2000001c
 8006480:	ffff0208 	.word	0xffff0208

08006484 <__utoa>:
 8006484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006486:	b08b      	sub	sp, #44	; 0x2c
 8006488:	4605      	mov	r5, r0
 800648a:	460b      	mov	r3, r1
 800648c:	466e      	mov	r6, sp
 800648e:	4c1d      	ldr	r4, [pc, #116]	; (8006504 <__utoa+0x80>)
 8006490:	f104 0c20 	add.w	ip, r4, #32
 8006494:	4637      	mov	r7, r6
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	6861      	ldr	r1, [r4, #4]
 800649a:	3408      	adds	r4, #8
 800649c:	c703      	stmia	r7!, {r0, r1}
 800649e:	4564      	cmp	r4, ip
 80064a0:	463e      	mov	r6, r7
 80064a2:	d1f7      	bne.n	8006494 <__utoa+0x10>
 80064a4:	7921      	ldrb	r1, [r4, #4]
 80064a6:	6820      	ldr	r0, [r4, #0]
 80064a8:	7139      	strb	r1, [r7, #4]
 80064aa:	1e91      	subs	r1, r2, #2
 80064ac:	2922      	cmp	r1, #34	; 0x22
 80064ae:	6038      	str	r0, [r7, #0]
 80064b0:	f04f 0100 	mov.w	r1, #0
 80064b4:	d904      	bls.n	80064c0 <__utoa+0x3c>
 80064b6:	7019      	strb	r1, [r3, #0]
 80064b8:	460b      	mov	r3, r1
 80064ba:	4618      	mov	r0, r3
 80064bc:	b00b      	add	sp, #44	; 0x2c
 80064be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064c0:	1e58      	subs	r0, r3, #1
 80064c2:	4684      	mov	ip, r0
 80064c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80064c8:	fb02 5617 	mls	r6, r2, r7, r5
 80064cc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80064d0:	4476      	add	r6, lr
 80064d2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80064d6:	460c      	mov	r4, r1
 80064d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80064dc:	462e      	mov	r6, r5
 80064de:	42b2      	cmp	r2, r6
 80064e0:	463d      	mov	r5, r7
 80064e2:	f101 0101 	add.w	r1, r1, #1
 80064e6:	d9ed      	bls.n	80064c4 <__utoa+0x40>
 80064e8:	2200      	movs	r2, #0
 80064ea:	545a      	strb	r2, [r3, r1]
 80064ec:	1919      	adds	r1, r3, r4
 80064ee:	1aa5      	subs	r5, r4, r2
 80064f0:	42aa      	cmp	r2, r5
 80064f2:	dae2      	bge.n	80064ba <__utoa+0x36>
 80064f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80064f8:	780e      	ldrb	r6, [r1, #0]
 80064fa:	3201      	adds	r2, #1
 80064fc:	7006      	strb	r6, [r0, #0]
 80064fe:	f801 5901 	strb.w	r5, [r1], #-1
 8006502:	e7f4      	b.n	80064ee <__utoa+0x6a>
 8006504:	08009740 	.word	0x08009740

08006508 <quorem>:
 8006508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	6903      	ldr	r3, [r0, #16]
 800650e:	690c      	ldr	r4, [r1, #16]
 8006510:	4607      	mov	r7, r0
 8006512:	42a3      	cmp	r3, r4
 8006514:	f2c0 8083 	blt.w	800661e <quorem+0x116>
 8006518:	3c01      	subs	r4, #1
 800651a:	f100 0514 	add.w	r5, r0, #20
 800651e:	f101 0814 	add.w	r8, r1, #20
 8006522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800652c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006530:	3301      	adds	r3, #1
 8006532:	429a      	cmp	r2, r3
 8006534:	fbb2 f6f3 	udiv	r6, r2, r3
 8006538:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800653c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006540:	d332      	bcc.n	80065a8 <quorem+0xa0>
 8006542:	f04f 0e00 	mov.w	lr, #0
 8006546:	4640      	mov	r0, r8
 8006548:	46ac      	mov	ip, r5
 800654a:	46f2      	mov	sl, lr
 800654c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006550:	b293      	uxth	r3, r2
 8006552:	fb06 e303 	mla	r3, r6, r3, lr
 8006556:	0c12      	lsrs	r2, r2, #16
 8006558:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800655c:	fb06 e202 	mla	r2, r6, r2, lr
 8006560:	b29b      	uxth	r3, r3
 8006562:	ebaa 0303 	sub.w	r3, sl, r3
 8006566:	f8dc a000 	ldr.w	sl, [ip]
 800656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800656e:	fa1f fa8a 	uxth.w	sl, sl
 8006572:	4453      	add	r3, sl
 8006574:	fa1f fa82 	uxth.w	sl, r2
 8006578:	f8dc 2000 	ldr.w	r2, [ip]
 800657c:	4581      	cmp	r9, r0
 800657e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800658c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006590:	f84c 3b04 	str.w	r3, [ip], #4
 8006594:	d2da      	bcs.n	800654c <quorem+0x44>
 8006596:	f855 300b 	ldr.w	r3, [r5, fp]
 800659a:	b92b      	cbnz	r3, 80065a8 <quorem+0xa0>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	3b04      	subs	r3, #4
 80065a0:	429d      	cmp	r5, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	d32f      	bcc.n	8006606 <quorem+0xfe>
 80065a6:	613c      	str	r4, [r7, #16]
 80065a8:	4638      	mov	r0, r7
 80065aa:	f001 f8cd 	bl	8007748 <__mcmp>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	db25      	blt.n	80065fe <quorem+0xf6>
 80065b2:	4628      	mov	r0, r5
 80065b4:	f04f 0c00 	mov.w	ip, #0
 80065b8:	3601      	adds	r6, #1
 80065ba:	f858 1b04 	ldr.w	r1, [r8], #4
 80065be:	f8d0 e000 	ldr.w	lr, [r0]
 80065c2:	b28b      	uxth	r3, r1
 80065c4:	ebac 0303 	sub.w	r3, ip, r3
 80065c8:	fa1f f28e 	uxth.w	r2, lr
 80065cc:	4413      	add	r3, r2
 80065ce:	0c0a      	lsrs	r2, r1, #16
 80065d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065de:	45c1      	cmp	r9, r8
 80065e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065e4:	f840 3b04 	str.w	r3, [r0], #4
 80065e8:	d2e7      	bcs.n	80065ba <quorem+0xb2>
 80065ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065f2:	b922      	cbnz	r2, 80065fe <quorem+0xf6>
 80065f4:	3b04      	subs	r3, #4
 80065f6:	429d      	cmp	r5, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	d30a      	bcc.n	8006612 <quorem+0x10a>
 80065fc:	613c      	str	r4, [r7, #16]
 80065fe:	4630      	mov	r0, r6
 8006600:	b003      	add	sp, #12
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	3b04      	subs	r3, #4
 800660a:	2a00      	cmp	r2, #0
 800660c:	d1cb      	bne.n	80065a6 <quorem+0x9e>
 800660e:	3c01      	subs	r4, #1
 8006610:	e7c6      	b.n	80065a0 <quorem+0x98>
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	3b04      	subs	r3, #4
 8006616:	2a00      	cmp	r2, #0
 8006618:	d1f0      	bne.n	80065fc <quorem+0xf4>
 800661a:	3c01      	subs	r4, #1
 800661c:	e7eb      	b.n	80065f6 <quorem+0xee>
 800661e:	2000      	movs	r0, #0
 8006620:	e7ee      	b.n	8006600 <quorem+0xf8>
 8006622:	0000      	movs	r0, r0
 8006624:	0000      	movs	r0, r0
	...

08006628 <_dtoa_r>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	4616      	mov	r6, r2
 800662e:	461f      	mov	r7, r3
 8006630:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006632:	b099      	sub	sp, #100	; 0x64
 8006634:	4605      	mov	r5, r0
 8006636:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800663a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800663e:	b974      	cbnz	r4, 800665e <_dtoa_r+0x36>
 8006640:	2010      	movs	r0, #16
 8006642:	f000 fde3 	bl	800720c <malloc>
 8006646:	4602      	mov	r2, r0
 8006648:	6268      	str	r0, [r5, #36]	; 0x24
 800664a:	b920      	cbnz	r0, 8006656 <_dtoa_r+0x2e>
 800664c:	21ea      	movs	r1, #234	; 0xea
 800664e:	4bae      	ldr	r3, [pc, #696]	; (8006908 <_dtoa_r+0x2e0>)
 8006650:	48ae      	ldr	r0, [pc, #696]	; (800690c <_dtoa_r+0x2e4>)
 8006652:	f001 fba1 	bl	8007d98 <__assert_func>
 8006656:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800665a:	6004      	str	r4, [r0, #0]
 800665c:	60c4      	str	r4, [r0, #12]
 800665e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006660:	6819      	ldr	r1, [r3, #0]
 8006662:	b151      	cbz	r1, 800667a <_dtoa_r+0x52>
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	2301      	movs	r3, #1
 8006668:	4093      	lsls	r3, r2
 800666a:	604a      	str	r2, [r1, #4]
 800666c:	608b      	str	r3, [r1, #8]
 800666e:	4628      	mov	r0, r5
 8006670:	f000 fe30 	bl	80072d4 <_Bfree>
 8006674:	2200      	movs	r2, #0
 8006676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	1e3b      	subs	r3, r7, #0
 800667c:	bfaf      	iteee	ge
 800667e:	2300      	movge	r3, #0
 8006680:	2201      	movlt	r2, #1
 8006682:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006686:	9305      	strlt	r3, [sp, #20]
 8006688:	bfa8      	it	ge
 800668a:	f8c8 3000 	strge.w	r3, [r8]
 800668e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006692:	4b9f      	ldr	r3, [pc, #636]	; (8006910 <_dtoa_r+0x2e8>)
 8006694:	bfb8      	it	lt
 8006696:	f8c8 2000 	strlt.w	r2, [r8]
 800669a:	ea33 0309 	bics.w	r3, r3, r9
 800669e:	d119      	bne.n	80066d4 <_dtoa_r+0xac>
 80066a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066ac:	4333      	orrs	r3, r6
 80066ae:	f000 8580 	beq.w	80071b2 <_dtoa_r+0xb8a>
 80066b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066b4:	b953      	cbnz	r3, 80066cc <_dtoa_r+0xa4>
 80066b6:	4b97      	ldr	r3, [pc, #604]	; (8006914 <_dtoa_r+0x2ec>)
 80066b8:	e022      	b.n	8006700 <_dtoa_r+0xd8>
 80066ba:	4b97      	ldr	r3, [pc, #604]	; (8006918 <_dtoa_r+0x2f0>)
 80066bc:	9308      	str	r3, [sp, #32]
 80066be:	3308      	adds	r3, #8
 80066c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	9808      	ldr	r0, [sp, #32]
 80066c6:	b019      	add	sp, #100	; 0x64
 80066c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066cc:	4b91      	ldr	r3, [pc, #580]	; (8006914 <_dtoa_r+0x2ec>)
 80066ce:	9308      	str	r3, [sp, #32]
 80066d0:	3303      	adds	r3, #3
 80066d2:	e7f5      	b.n	80066c0 <_dtoa_r+0x98>
 80066d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80066dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066e0:	2200      	movs	r2, #0
 80066e2:	2300      	movs	r3, #0
 80066e4:	f7fa fa14 	bl	8000b10 <__aeabi_dcmpeq>
 80066e8:	4680      	mov	r8, r0
 80066ea:	b158      	cbz	r0, 8006704 <_dtoa_r+0xdc>
 80066ec:	2301      	movs	r3, #1
 80066ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066f0:	6013      	str	r3, [r2, #0]
 80066f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8559 	beq.w	80071ac <_dtoa_r+0xb84>
 80066fa:	4888      	ldr	r0, [pc, #544]	; (800691c <_dtoa_r+0x2f4>)
 80066fc:	6018      	str	r0, [r3, #0]
 80066fe:	1e43      	subs	r3, r0, #1
 8006700:	9308      	str	r3, [sp, #32]
 8006702:	e7df      	b.n	80066c4 <_dtoa_r+0x9c>
 8006704:	ab16      	add	r3, sp, #88	; 0x58
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	ab17      	add	r3, sp, #92	; 0x5c
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4628      	mov	r0, r5
 800670e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006712:	f001 f8c5 	bl	80078a0 <__d2b>
 8006716:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800671a:	4682      	mov	sl, r0
 800671c:	2c00      	cmp	r4, #0
 800671e:	d07e      	beq.n	800681e <_dtoa_r+0x1f6>
 8006720:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006724:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006726:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800672a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006732:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006736:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800673a:	2200      	movs	r2, #0
 800673c:	4b78      	ldr	r3, [pc, #480]	; (8006920 <_dtoa_r+0x2f8>)
 800673e:	f7f9 fdc7 	bl	80002d0 <__aeabi_dsub>
 8006742:	a36b      	add	r3, pc, #428	; (adr r3, 80068f0 <_dtoa_r+0x2c8>)
 8006744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006748:	f7f9 ff7a 	bl	8000640 <__aeabi_dmul>
 800674c:	a36a      	add	r3, pc, #424	; (adr r3, 80068f8 <_dtoa_r+0x2d0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fdbf 	bl	80002d4 <__adddf3>
 8006756:	4606      	mov	r6, r0
 8006758:	4620      	mov	r0, r4
 800675a:	460f      	mov	r7, r1
 800675c:	f7f9 ff06 	bl	800056c <__aeabi_i2d>
 8006760:	a367      	add	r3, pc, #412	; (adr r3, 8006900 <_dtoa_r+0x2d8>)
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f7f9 ff6b 	bl	8000640 <__aeabi_dmul>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4630      	mov	r0, r6
 8006770:	4639      	mov	r1, r7
 8006772:	f7f9 fdaf 	bl	80002d4 <__adddf3>
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	f7fa fa11 	bl	8000ba0 <__aeabi_d2iz>
 800677e:	2200      	movs	r2, #0
 8006780:	4681      	mov	r9, r0
 8006782:	2300      	movs	r3, #0
 8006784:	4630      	mov	r0, r6
 8006786:	4639      	mov	r1, r7
 8006788:	f7fa f9cc 	bl	8000b24 <__aeabi_dcmplt>
 800678c:	b148      	cbz	r0, 80067a2 <_dtoa_r+0x17a>
 800678e:	4648      	mov	r0, r9
 8006790:	f7f9 feec 	bl	800056c <__aeabi_i2d>
 8006794:	4632      	mov	r2, r6
 8006796:	463b      	mov	r3, r7
 8006798:	f7fa f9ba 	bl	8000b10 <__aeabi_dcmpeq>
 800679c:	b908      	cbnz	r0, 80067a2 <_dtoa_r+0x17a>
 800679e:	f109 39ff 	add.w	r9, r9, #4294967295
 80067a2:	f1b9 0f16 	cmp.w	r9, #22
 80067a6:	d857      	bhi.n	8006858 <_dtoa_r+0x230>
 80067a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067ac:	4b5d      	ldr	r3, [pc, #372]	; (8006924 <_dtoa_r+0x2fc>)
 80067ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	f7fa f9b5 	bl	8000b24 <__aeabi_dcmplt>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d04e      	beq.n	800685c <_dtoa_r+0x234>
 80067be:	2300      	movs	r3, #0
 80067c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80067c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067c8:	1b1c      	subs	r4, r3, r4
 80067ca:	1e63      	subs	r3, r4, #1
 80067cc:	9309      	str	r3, [sp, #36]	; 0x24
 80067ce:	bf49      	itett	mi
 80067d0:	f1c4 0301 	rsbmi	r3, r4, #1
 80067d4:	2300      	movpl	r3, #0
 80067d6:	9306      	strmi	r3, [sp, #24]
 80067d8:	2300      	movmi	r3, #0
 80067da:	bf54      	ite	pl
 80067dc:	9306      	strpl	r3, [sp, #24]
 80067de:	9309      	strmi	r3, [sp, #36]	; 0x24
 80067e0:	f1b9 0f00 	cmp.w	r9, #0
 80067e4:	db3c      	blt.n	8006860 <_dtoa_r+0x238>
 80067e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80067ec:	444b      	add	r3, r9
 80067ee:	9309      	str	r3, [sp, #36]	; 0x24
 80067f0:	2300      	movs	r3, #0
 80067f2:	930a      	str	r3, [sp, #40]	; 0x28
 80067f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f6:	2b09      	cmp	r3, #9
 80067f8:	d86c      	bhi.n	80068d4 <_dtoa_r+0x2ac>
 80067fa:	2b05      	cmp	r3, #5
 80067fc:	bfc4      	itt	gt
 80067fe:	3b04      	subgt	r3, #4
 8006800:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006804:	bfc8      	it	gt
 8006806:	2400      	movgt	r4, #0
 8006808:	f1a3 0302 	sub.w	r3, r3, #2
 800680c:	bfd8      	it	le
 800680e:	2401      	movle	r4, #1
 8006810:	2b03      	cmp	r3, #3
 8006812:	f200 808b 	bhi.w	800692c <_dtoa_r+0x304>
 8006816:	e8df f003 	tbb	[pc, r3]
 800681a:	4f2d      	.short	0x4f2d
 800681c:	5b4d      	.short	0x5b4d
 800681e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006822:	441c      	add	r4, r3
 8006824:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006828:	2b20      	cmp	r3, #32
 800682a:	bfc3      	ittte	gt
 800682c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006830:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006834:	fa09 f303 	lslgt.w	r3, r9, r3
 8006838:	f1c3 0320 	rsble	r3, r3, #32
 800683c:	bfc6      	itte	gt
 800683e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006842:	4318      	orrgt	r0, r3
 8006844:	fa06 f003 	lslle.w	r0, r6, r3
 8006848:	f7f9 fe80 	bl	800054c <__aeabi_ui2d>
 800684c:	2301      	movs	r3, #1
 800684e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006852:	3c01      	subs	r4, #1
 8006854:	9313      	str	r3, [sp, #76]	; 0x4c
 8006856:	e770      	b.n	800673a <_dtoa_r+0x112>
 8006858:	2301      	movs	r3, #1
 800685a:	e7b3      	b.n	80067c4 <_dtoa_r+0x19c>
 800685c:	900f      	str	r0, [sp, #60]	; 0x3c
 800685e:	e7b2      	b.n	80067c6 <_dtoa_r+0x19e>
 8006860:	9b06      	ldr	r3, [sp, #24]
 8006862:	eba3 0309 	sub.w	r3, r3, r9
 8006866:	9306      	str	r3, [sp, #24]
 8006868:	f1c9 0300 	rsb	r3, r9, #0
 800686c:	930a      	str	r3, [sp, #40]	; 0x28
 800686e:	2300      	movs	r3, #0
 8006870:	930e      	str	r3, [sp, #56]	; 0x38
 8006872:	e7bf      	b.n	80067f4 <_dtoa_r+0x1cc>
 8006874:	2300      	movs	r3, #0
 8006876:	930b      	str	r3, [sp, #44]	; 0x2c
 8006878:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800687a:	2b00      	cmp	r3, #0
 800687c:	dc59      	bgt.n	8006932 <_dtoa_r+0x30a>
 800687e:	f04f 0b01 	mov.w	fp, #1
 8006882:	465b      	mov	r3, fp
 8006884:	f8cd b008 	str.w	fp, [sp, #8]
 8006888:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800688c:	2200      	movs	r2, #0
 800688e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006890:	6042      	str	r2, [r0, #4]
 8006892:	2204      	movs	r2, #4
 8006894:	f102 0614 	add.w	r6, r2, #20
 8006898:	429e      	cmp	r6, r3
 800689a:	6841      	ldr	r1, [r0, #4]
 800689c:	d94f      	bls.n	800693e <_dtoa_r+0x316>
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 fcd8 	bl	8007254 <_Balloc>
 80068a4:	9008      	str	r0, [sp, #32]
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d14d      	bne.n	8006946 <_dtoa_r+0x31e>
 80068aa:	4602      	mov	r2, r0
 80068ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <_dtoa_r+0x300>)
 80068b2:	e6cd      	b.n	8006650 <_dtoa_r+0x28>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e7de      	b.n	8006876 <_dtoa_r+0x24e>
 80068b8:	2300      	movs	r3, #0
 80068ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80068bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068be:	eb09 0b03 	add.w	fp, r9, r3
 80068c2:	f10b 0301 	add.w	r3, fp, #1
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	9302      	str	r3, [sp, #8]
 80068ca:	bfb8      	it	lt
 80068cc:	2301      	movlt	r3, #1
 80068ce:	e7dd      	b.n	800688c <_dtoa_r+0x264>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e7f2      	b.n	80068ba <_dtoa_r+0x292>
 80068d4:	2401      	movs	r4, #1
 80068d6:	2300      	movs	r3, #0
 80068d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80068da:	9322      	str	r3, [sp, #136]	; 0x88
 80068dc:	f04f 3bff 	mov.w	fp, #4294967295
 80068e0:	2200      	movs	r2, #0
 80068e2:	2312      	movs	r3, #18
 80068e4:	f8cd b008 	str.w	fp, [sp, #8]
 80068e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80068ea:	e7cf      	b.n	800688c <_dtoa_r+0x264>
 80068ec:	f3af 8000 	nop.w
 80068f0:	636f4361 	.word	0x636f4361
 80068f4:	3fd287a7 	.word	0x3fd287a7
 80068f8:	8b60c8b3 	.word	0x8b60c8b3
 80068fc:	3fc68a28 	.word	0x3fc68a28
 8006900:	509f79fb 	.word	0x509f79fb
 8006904:	3fd34413 	.word	0x3fd34413
 8006908:	08009772 	.word	0x08009772
 800690c:	08009789 	.word	0x08009789
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	0800976e 	.word	0x0800976e
 8006918:	08009765 	.word	0x08009765
 800691c:	0800971d 	.word	0x0800971d
 8006920:	3ff80000 	.word	0x3ff80000
 8006924:	08009888 	.word	0x08009888
 8006928:	080097e8 	.word	0x080097e8
 800692c:	2301      	movs	r3, #1
 800692e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006930:	e7d4      	b.n	80068dc <_dtoa_r+0x2b4>
 8006932:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006936:	465b      	mov	r3, fp
 8006938:	f8cd b008 	str.w	fp, [sp, #8]
 800693c:	e7a6      	b.n	800688c <_dtoa_r+0x264>
 800693e:	3101      	adds	r1, #1
 8006940:	6041      	str	r1, [r0, #4]
 8006942:	0052      	lsls	r2, r2, #1
 8006944:	e7a6      	b.n	8006894 <_dtoa_r+0x26c>
 8006946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006948:	9a08      	ldr	r2, [sp, #32]
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	9b02      	ldr	r3, [sp, #8]
 800694e:	2b0e      	cmp	r3, #14
 8006950:	f200 80a8 	bhi.w	8006aa4 <_dtoa_r+0x47c>
 8006954:	2c00      	cmp	r4, #0
 8006956:	f000 80a5 	beq.w	8006aa4 <_dtoa_r+0x47c>
 800695a:	f1b9 0f00 	cmp.w	r9, #0
 800695e:	dd34      	ble.n	80069ca <_dtoa_r+0x3a2>
 8006960:	4a9a      	ldr	r2, [pc, #616]	; (8006bcc <_dtoa_r+0x5a4>)
 8006962:	f009 030f 	and.w	r3, r9, #15
 8006966:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800696a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800696e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006972:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006976:	ea4f 1429 	mov.w	r4, r9, asr #4
 800697a:	d016      	beq.n	80069aa <_dtoa_r+0x382>
 800697c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006980:	4b93      	ldr	r3, [pc, #588]	; (8006bd0 <_dtoa_r+0x5a8>)
 8006982:	2703      	movs	r7, #3
 8006984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006988:	f7f9 ff84 	bl	8000894 <__aeabi_ddiv>
 800698c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006990:	f004 040f 	and.w	r4, r4, #15
 8006994:	4e8e      	ldr	r6, [pc, #568]	; (8006bd0 <_dtoa_r+0x5a8>)
 8006996:	b954      	cbnz	r4, 80069ae <_dtoa_r+0x386>
 8006998:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800699c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a0:	f7f9 ff78 	bl	8000894 <__aeabi_ddiv>
 80069a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a8:	e029      	b.n	80069fe <_dtoa_r+0x3d6>
 80069aa:	2702      	movs	r7, #2
 80069ac:	e7f2      	b.n	8006994 <_dtoa_r+0x36c>
 80069ae:	07e1      	lsls	r1, r4, #31
 80069b0:	d508      	bpl.n	80069c4 <_dtoa_r+0x39c>
 80069b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069ba:	f7f9 fe41 	bl	8000640 <__aeabi_dmul>
 80069be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c2:	3701      	adds	r7, #1
 80069c4:	1064      	asrs	r4, r4, #1
 80069c6:	3608      	adds	r6, #8
 80069c8:	e7e5      	b.n	8006996 <_dtoa_r+0x36e>
 80069ca:	f000 80a5 	beq.w	8006b18 <_dtoa_r+0x4f0>
 80069ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80069d2:	f1c9 0400 	rsb	r4, r9, #0
 80069d6:	4b7d      	ldr	r3, [pc, #500]	; (8006bcc <_dtoa_r+0x5a4>)
 80069d8:	f004 020f 	and.w	r2, r4, #15
 80069dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	f7f9 fe2c 	bl	8000640 <__aeabi_dmul>
 80069e8:	2702      	movs	r7, #2
 80069ea:	2300      	movs	r3, #0
 80069ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069f0:	4e77      	ldr	r6, [pc, #476]	; (8006bd0 <_dtoa_r+0x5a8>)
 80069f2:	1124      	asrs	r4, r4, #4
 80069f4:	2c00      	cmp	r4, #0
 80069f6:	f040 8084 	bne.w	8006b02 <_dtoa_r+0x4da>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1d2      	bne.n	80069a4 <_dtoa_r+0x37c>
 80069fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 808b 	beq.w	8006b1c <_dtoa_r+0x4f4>
 8006a06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b6f      	ldr	r3, [pc, #444]	; (8006bd4 <_dtoa_r+0x5ac>)
 8006a16:	f7fa f885 	bl	8000b24 <__aeabi_dcmplt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d07e      	beq.n	8006b1c <_dtoa_r+0x4f4>
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d07b      	beq.n	8006b1c <_dtoa_r+0x4f4>
 8006a24:	f1bb 0f00 	cmp.w	fp, #0
 8006a28:	dd38      	ble.n	8006a9c <_dtoa_r+0x474>
 8006a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b69      	ldr	r3, [pc, #420]	; (8006bd8 <_dtoa_r+0x5b0>)
 8006a32:	f7f9 fe05 	bl	8000640 <__aeabi_dmul>
 8006a36:	465c      	mov	r4, fp
 8006a38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a3c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006a40:	3701      	adds	r7, #1
 8006a42:	4638      	mov	r0, r7
 8006a44:	f7f9 fd92 	bl	800056c <__aeabi_i2d>
 8006a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a4c:	f7f9 fdf8 	bl	8000640 <__aeabi_dmul>
 8006a50:	2200      	movs	r2, #0
 8006a52:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <_dtoa_r+0x5b4>)
 8006a54:	f7f9 fc3e 	bl	80002d4 <__adddf3>
 8006a58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a60:	9611      	str	r6, [sp, #68]	; 0x44
 8006a62:	2c00      	cmp	r4, #0
 8006a64:	d15d      	bne.n	8006b22 <_dtoa_r+0x4fa>
 8006a66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4b5c      	ldr	r3, [pc, #368]	; (8006be0 <_dtoa_r+0x5b8>)
 8006a6e:	f7f9 fc2f 	bl	80002d0 <__aeabi_dsub>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a7a:	4633      	mov	r3, r6
 8006a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a7e:	f7fa f86f 	bl	8000b60 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 829e 	bne.w	8006fc4 <_dtoa_r+0x99c>
 8006a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a92:	f7fa f847 	bl	8000b24 <__aeabi_dcmplt>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 8292 	bne.w	8006fc0 <_dtoa_r+0x998>
 8006a9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006aa0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f2c0 8153 	blt.w	8006d52 <_dtoa_r+0x72a>
 8006aac:	f1b9 0f0e 	cmp.w	r9, #14
 8006ab0:	f300 814f 	bgt.w	8006d52 <_dtoa_r+0x72a>
 8006ab4:	4b45      	ldr	r3, [pc, #276]	; (8006bcc <_dtoa_r+0x5a4>)
 8006ab6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006aba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006abe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006ac2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f280 80db 	bge.w	8006c80 <_dtoa_r+0x658>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f300 80d7 	bgt.w	8006c80 <_dtoa_r+0x658>
 8006ad2:	f040 8274 	bne.w	8006fbe <_dtoa_r+0x996>
 8006ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ada:	2200      	movs	r2, #0
 8006adc:	4b40      	ldr	r3, [pc, #256]	; (8006be0 <_dtoa_r+0x5b8>)
 8006ade:	f7f9 fdaf 	bl	8000640 <__aeabi_dmul>
 8006ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ae6:	f7fa f831 	bl	8000b4c <__aeabi_dcmpge>
 8006aea:	9c02      	ldr	r4, [sp, #8]
 8006aec:	4626      	mov	r6, r4
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f040 824a 	bne.w	8006f88 <_dtoa_r+0x960>
 8006af4:	2331      	movs	r3, #49	; 0x31
 8006af6:	9f08      	ldr	r7, [sp, #32]
 8006af8:	f109 0901 	add.w	r9, r9, #1
 8006afc:	f807 3b01 	strb.w	r3, [r7], #1
 8006b00:	e246      	b.n	8006f90 <_dtoa_r+0x968>
 8006b02:	07e2      	lsls	r2, r4, #31
 8006b04:	d505      	bpl.n	8006b12 <_dtoa_r+0x4ea>
 8006b06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b0a:	f7f9 fd99 	bl	8000640 <__aeabi_dmul>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	3701      	adds	r7, #1
 8006b12:	1064      	asrs	r4, r4, #1
 8006b14:	3608      	adds	r6, #8
 8006b16:	e76d      	b.n	80069f4 <_dtoa_r+0x3cc>
 8006b18:	2702      	movs	r7, #2
 8006b1a:	e770      	b.n	80069fe <_dtoa_r+0x3d6>
 8006b1c:	46c8      	mov	r8, r9
 8006b1e:	9c02      	ldr	r4, [sp, #8]
 8006b20:	e78f      	b.n	8006a42 <_dtoa_r+0x41a>
 8006b22:	9908      	ldr	r1, [sp, #32]
 8006b24:	4b29      	ldr	r3, [pc, #164]	; (8006bcc <_dtoa_r+0x5a4>)
 8006b26:	4421      	add	r1, r4
 8006b28:	9112      	str	r1, [sp, #72]	; 0x48
 8006b2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006b34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d055      	beq.n	8006be8 <_dtoa_r+0x5c0>
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	4929      	ldr	r1, [pc, #164]	; (8006be4 <_dtoa_r+0x5bc>)
 8006b40:	f7f9 fea8 	bl	8000894 <__aeabi_ddiv>
 8006b44:	463b      	mov	r3, r7
 8006b46:	4632      	mov	r2, r6
 8006b48:	f7f9 fbc2 	bl	80002d0 <__aeabi_dsub>
 8006b4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b50:	9f08      	ldr	r7, [sp, #32]
 8006b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b56:	f7fa f823 	bl	8000ba0 <__aeabi_d2iz>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	f7f9 fd06 	bl	800056c <__aeabi_i2d>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b68:	f7f9 fbb2 	bl	80002d0 <__aeabi_dsub>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	3430      	adds	r4, #48	; 0x30
 8006b72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b7a:	f807 4b01 	strb.w	r4, [r7], #1
 8006b7e:	f7f9 ffd1 	bl	8000b24 <__aeabi_dcmplt>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d174      	bne.n	8006c70 <_dtoa_r+0x648>
 8006b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	4911      	ldr	r1, [pc, #68]	; (8006bd4 <_dtoa_r+0x5ac>)
 8006b8e:	f7f9 fb9f 	bl	80002d0 <__aeabi_dsub>
 8006b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b96:	f7f9 ffc5 	bl	8000b24 <__aeabi_dcmplt>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f040 80b6 	bne.w	8006d0c <_dtoa_r+0x6e4>
 8006ba0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ba2:	429f      	cmp	r7, r3
 8006ba4:	f43f af7a 	beq.w	8006a9c <_dtoa_r+0x474>
 8006ba8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bac:	2200      	movs	r2, #0
 8006bae:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <_dtoa_r+0x5b0>)
 8006bb0:	f7f9 fd46 	bl	8000640 <__aeabi_dmul>
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bbe:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_dtoa_r+0x5b0>)
 8006bc0:	f7f9 fd3e 	bl	8000640 <__aeabi_dmul>
 8006bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc8:	e7c3      	b.n	8006b52 <_dtoa_r+0x52a>
 8006bca:	bf00      	nop
 8006bcc:	08009888 	.word	0x08009888
 8006bd0:	08009860 	.word	0x08009860
 8006bd4:	3ff00000 	.word	0x3ff00000
 8006bd8:	40240000 	.word	0x40240000
 8006bdc:	401c0000 	.word	0x401c0000
 8006be0:	40140000 	.word	0x40140000
 8006be4:	3fe00000 	.word	0x3fe00000
 8006be8:	4630      	mov	r0, r6
 8006bea:	4639      	mov	r1, r7
 8006bec:	f7f9 fd28 	bl	8000640 <__aeabi_dmul>
 8006bf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bf2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006bf6:	9c08      	ldr	r4, [sp, #32]
 8006bf8:	9314      	str	r3, [sp, #80]	; 0x50
 8006bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bfe:	f7f9 ffcf 	bl	8000ba0 <__aeabi_d2iz>
 8006c02:	9015      	str	r0, [sp, #84]	; 0x54
 8006c04:	f7f9 fcb2 	bl	800056c <__aeabi_i2d>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c10:	f7f9 fb5e 	bl	80002d0 <__aeabi_dsub>
 8006c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c16:	4606      	mov	r6, r0
 8006c18:	3330      	adds	r3, #48	; 0x30
 8006c1a:	f804 3b01 	strb.w	r3, [r4], #1
 8006c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c20:	460f      	mov	r7, r1
 8006c22:	429c      	cmp	r4, r3
 8006c24:	f04f 0200 	mov.w	r2, #0
 8006c28:	d124      	bne.n	8006c74 <_dtoa_r+0x64c>
 8006c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c2e:	4bb3      	ldr	r3, [pc, #716]	; (8006efc <_dtoa_r+0x8d4>)
 8006c30:	f7f9 fb50 	bl	80002d4 <__adddf3>
 8006c34:	4602      	mov	r2, r0
 8006c36:	460b      	mov	r3, r1
 8006c38:	4630      	mov	r0, r6
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	f7f9 ff90 	bl	8000b60 <__aeabi_dcmpgt>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d162      	bne.n	8006d0a <_dtoa_r+0x6e2>
 8006c44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c48:	2000      	movs	r0, #0
 8006c4a:	49ac      	ldr	r1, [pc, #688]	; (8006efc <_dtoa_r+0x8d4>)
 8006c4c:	f7f9 fb40 	bl	80002d0 <__aeabi_dsub>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 ff64 	bl	8000b24 <__aeabi_dcmplt>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	f43f af1d 	beq.w	8006a9c <_dtoa_r+0x474>
 8006c62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c64:	1e7b      	subs	r3, r7, #1
 8006c66:	9314      	str	r3, [sp, #80]	; 0x50
 8006c68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	d0f8      	beq.n	8006c62 <_dtoa_r+0x63a>
 8006c70:	46c1      	mov	r9, r8
 8006c72:	e03a      	b.n	8006cea <_dtoa_r+0x6c2>
 8006c74:	4ba2      	ldr	r3, [pc, #648]	; (8006f00 <_dtoa_r+0x8d8>)
 8006c76:	f7f9 fce3 	bl	8000640 <__aeabi_dmul>
 8006c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7e:	e7bc      	b.n	8006bfa <_dtoa_r+0x5d2>
 8006c80:	9f08      	ldr	r7, [sp, #32]
 8006c82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c8a:	f7f9 fe03 	bl	8000894 <__aeabi_ddiv>
 8006c8e:	f7f9 ff87 	bl	8000ba0 <__aeabi_d2iz>
 8006c92:	4604      	mov	r4, r0
 8006c94:	f7f9 fc6a 	bl	800056c <__aeabi_i2d>
 8006c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c9c:	f7f9 fcd0 	bl	8000640 <__aeabi_dmul>
 8006ca0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cac:	f7f9 fb10 	bl	80002d0 <__aeabi_dsub>
 8006cb0:	f807 6b01 	strb.w	r6, [r7], #1
 8006cb4:	9e08      	ldr	r6, [sp, #32]
 8006cb6:	9b02      	ldr	r3, [sp, #8]
 8006cb8:	1bbe      	subs	r6, r7, r6
 8006cba:	42b3      	cmp	r3, r6
 8006cbc:	d13a      	bne.n	8006d34 <_dtoa_r+0x70c>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	f7f9 fb07 	bl	80002d4 <__adddf3>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd2:	f7f9 ff45 	bl	8000b60 <__aeabi_dcmpgt>
 8006cd6:	bb58      	cbnz	r0, 8006d30 <_dtoa_r+0x708>
 8006cd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce0:	f7f9 ff16 	bl	8000b10 <__aeabi_dcmpeq>
 8006ce4:	b108      	cbz	r0, 8006cea <_dtoa_r+0x6c2>
 8006ce6:	07e1      	lsls	r1, r4, #31
 8006ce8:	d422      	bmi.n	8006d30 <_dtoa_r+0x708>
 8006cea:	4628      	mov	r0, r5
 8006cec:	4651      	mov	r1, sl
 8006cee:	f000 faf1 	bl	80072d4 <_Bfree>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	703b      	strb	r3, [r7, #0]
 8006cf6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006cf8:	f109 0001 	add.w	r0, r9, #1
 8006cfc:	6018      	str	r0, [r3, #0]
 8006cfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f43f acdf 	beq.w	80066c4 <_dtoa_r+0x9c>
 8006d06:	601f      	str	r7, [r3, #0]
 8006d08:	e4dc      	b.n	80066c4 <_dtoa_r+0x9c>
 8006d0a:	4627      	mov	r7, r4
 8006d0c:	463b      	mov	r3, r7
 8006d0e:	461f      	mov	r7, r3
 8006d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d14:	2a39      	cmp	r2, #57	; 0x39
 8006d16:	d107      	bne.n	8006d28 <_dtoa_r+0x700>
 8006d18:	9a08      	ldr	r2, [sp, #32]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d1f7      	bne.n	8006d0e <_dtoa_r+0x6e6>
 8006d1e:	2230      	movs	r2, #48	; 0x30
 8006d20:	9908      	ldr	r1, [sp, #32]
 8006d22:	f108 0801 	add.w	r8, r8, #1
 8006d26:	700a      	strb	r2, [r1, #0]
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	3201      	adds	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e79f      	b.n	8006c70 <_dtoa_r+0x648>
 8006d30:	46c8      	mov	r8, r9
 8006d32:	e7eb      	b.n	8006d0c <_dtoa_r+0x6e4>
 8006d34:	2200      	movs	r2, #0
 8006d36:	4b72      	ldr	r3, [pc, #456]	; (8006f00 <_dtoa_r+0x8d8>)
 8006d38:	f7f9 fc82 	bl	8000640 <__aeabi_dmul>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2300      	movs	r3, #0
 8006d48:	f7f9 fee2 	bl	8000b10 <__aeabi_dcmpeq>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d098      	beq.n	8006c82 <_dtoa_r+0x65a>
 8006d50:	e7cb      	b.n	8006cea <_dtoa_r+0x6c2>
 8006d52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	f000 80cd 	beq.w	8006ef4 <_dtoa_r+0x8cc>
 8006d5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d5c:	2a01      	cmp	r2, #1
 8006d5e:	f300 80af 	bgt.w	8006ec0 <_dtoa_r+0x898>
 8006d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	f000 80a7 	beq.w	8006eb8 <_dtoa_r+0x890>
 8006d6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d70:	9f06      	ldr	r7, [sp, #24]
 8006d72:	9a06      	ldr	r2, [sp, #24]
 8006d74:	2101      	movs	r1, #1
 8006d76:	441a      	add	r2, r3
 8006d78:	9206      	str	r2, [sp, #24]
 8006d7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	441a      	add	r2, r3
 8006d80:	9209      	str	r2, [sp, #36]	; 0x24
 8006d82:	f000 fb61 	bl	8007448 <__i2b>
 8006d86:	4606      	mov	r6, r0
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	dd0c      	ble.n	8006da6 <_dtoa_r+0x77e>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dd09      	ble.n	8006da6 <_dtoa_r+0x77e>
 8006d92:	42bb      	cmp	r3, r7
 8006d94:	bfa8      	it	ge
 8006d96:	463b      	movge	r3, r7
 8006d98:	9a06      	ldr	r2, [sp, #24]
 8006d9a:	1aff      	subs	r7, r7, r3
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	9206      	str	r2, [sp, #24]
 8006da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	b1f3      	cbz	r3, 8006de8 <_dtoa_r+0x7c0>
 8006daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80a9 	beq.w	8006f04 <_dtoa_r+0x8dc>
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	dd10      	ble.n	8006dd8 <_dtoa_r+0x7b0>
 8006db6:	4631      	mov	r1, r6
 8006db8:	4622      	mov	r2, r4
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f000 fbfe 	bl	80075bc <__pow5mult>
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	4601      	mov	r1, r0
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 fb54 	bl	8007474 <__multiply>
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4651      	mov	r1, sl
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 fa7f 	bl	80072d4 <_Bfree>
 8006dd6:	46c2      	mov	sl, r8
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dda:	1b1a      	subs	r2, r3, r4
 8006ddc:	d004      	beq.n	8006de8 <_dtoa_r+0x7c0>
 8006dde:	4651      	mov	r1, sl
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 fbeb 	bl	80075bc <__pow5mult>
 8006de6:	4682      	mov	sl, r0
 8006de8:	2101      	movs	r1, #1
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 fb2c 	bl	8007448 <__i2b>
 8006df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006df2:	4604      	mov	r4, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f340 8087 	ble.w	8006f08 <_dtoa_r+0x8e0>
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	4601      	mov	r1, r0
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 fbdc 	bl	80075bc <__pow5mult>
 8006e04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e06:	4604      	mov	r4, r0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f340 8080 	ble.w	8006f0e <_dtoa_r+0x8e6>
 8006e0e:	f04f 0800 	mov.w	r8, #0
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e18:	6918      	ldr	r0, [r3, #16]
 8006e1a:	f000 fac7 	bl	80073ac <__hi0bits>
 8006e1e:	f1c0 0020 	rsb	r0, r0, #32
 8006e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e24:	4418      	add	r0, r3
 8006e26:	f010 001f 	ands.w	r0, r0, #31
 8006e2a:	f000 8092 	beq.w	8006f52 <_dtoa_r+0x92a>
 8006e2e:	f1c0 0320 	rsb	r3, r0, #32
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	f340 808a 	ble.w	8006f4c <_dtoa_r+0x924>
 8006e38:	f1c0 001c 	rsb	r0, r0, #28
 8006e3c:	9b06      	ldr	r3, [sp, #24]
 8006e3e:	4407      	add	r7, r0
 8006e40:	4403      	add	r3, r0
 8006e42:	9306      	str	r3, [sp, #24]
 8006e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e46:	4403      	add	r3, r0
 8006e48:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4a:	9b06      	ldr	r3, [sp, #24]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd05      	ble.n	8006e5c <_dtoa_r+0x834>
 8006e50:	4651      	mov	r1, sl
 8006e52:	461a      	mov	r2, r3
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fc0b 	bl	8007670 <__lshift>
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	dd05      	ble.n	8006e6e <_dtoa_r+0x846>
 8006e62:	4621      	mov	r1, r4
 8006e64:	461a      	mov	r2, r3
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 fc02 	bl	8007670 <__lshift>
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d070      	beq.n	8006f56 <_dtoa_r+0x92e>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4650      	mov	r0, sl
 8006e78:	f000 fc66 	bl	8007748 <__mcmp>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	da6a      	bge.n	8006f56 <_dtoa_r+0x92e>
 8006e80:	2300      	movs	r3, #0
 8006e82:	4651      	mov	r1, sl
 8006e84:	220a      	movs	r2, #10
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 fa46 	bl	8007318 <__multadd>
 8006e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e8e:	4682      	mov	sl, r0
 8006e90:	f109 39ff 	add.w	r9, r9, #4294967295
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8193 	beq.w	80071c0 <_dtoa_r+0xb98>
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	220a      	movs	r2, #10
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fa39 	bl	8007318 <__multadd>
 8006ea6:	f1bb 0f00 	cmp.w	fp, #0
 8006eaa:	4606      	mov	r6, r0
 8006eac:	f300 8093 	bgt.w	8006fd6 <_dtoa_r+0x9ae>
 8006eb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	dc57      	bgt.n	8006f66 <_dtoa_r+0x93e>
 8006eb6:	e08e      	b.n	8006fd6 <_dtoa_r+0x9ae>
 8006eb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ebe:	e756      	b.n	8006d6e <_dtoa_r+0x746>
 8006ec0:	9b02      	ldr	r3, [sp, #8]
 8006ec2:	1e5c      	subs	r4, r3, #1
 8006ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	bfb7      	itett	lt
 8006eca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ecc:	1b1c      	subge	r4, r3, r4
 8006ece:	1ae2      	sublt	r2, r4, r3
 8006ed0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006ed2:	bfbe      	ittt	lt
 8006ed4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006ed6:	189b      	addlt	r3, r3, r2
 8006ed8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	bfb8      	it	lt
 8006ede:	2400      	movlt	r4, #0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	bfbb      	ittet	lt
 8006ee4:	9b06      	ldrlt	r3, [sp, #24]
 8006ee6:	9a02      	ldrlt	r2, [sp, #8]
 8006ee8:	9f06      	ldrge	r7, [sp, #24]
 8006eea:	1a9f      	sublt	r7, r3, r2
 8006eec:	bfac      	ite	ge
 8006eee:	9b02      	ldrge	r3, [sp, #8]
 8006ef0:	2300      	movlt	r3, #0
 8006ef2:	e73e      	b.n	8006d72 <_dtoa_r+0x74a>
 8006ef4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ef6:	9f06      	ldr	r7, [sp, #24]
 8006ef8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006efa:	e745      	b.n	8006d88 <_dtoa_r+0x760>
 8006efc:	3fe00000 	.word	0x3fe00000
 8006f00:	40240000 	.word	0x40240000
 8006f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f06:	e76a      	b.n	8006dde <_dtoa_r+0x7b6>
 8006f08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	dc19      	bgt.n	8006f42 <_dtoa_r+0x91a>
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	b9bb      	cbnz	r3, 8006f42 <_dtoa_r+0x91a>
 8006f12:	9b05      	ldr	r3, [sp, #20]
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	b99b      	cbnz	r3, 8006f42 <_dtoa_r+0x91a>
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	0d1b      	lsrs	r3, r3, #20
 8006f22:	051b      	lsls	r3, r3, #20
 8006f24:	b183      	cbz	r3, 8006f48 <_dtoa_r+0x920>
 8006f26:	f04f 0801 	mov.w	r8, #1
 8006f2a:	9b06      	ldr	r3, [sp, #24]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	9306      	str	r3, [sp, #24]
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	3301      	adds	r3, #1
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f47f af6a 	bne.w	8006e12 <_dtoa_r+0x7ea>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e76f      	b.n	8006e22 <_dtoa_r+0x7fa>
 8006f42:	f04f 0800 	mov.w	r8, #0
 8006f46:	e7f6      	b.n	8006f36 <_dtoa_r+0x90e>
 8006f48:	4698      	mov	r8, r3
 8006f4a:	e7f4      	b.n	8006f36 <_dtoa_r+0x90e>
 8006f4c:	f43f af7d 	beq.w	8006e4a <_dtoa_r+0x822>
 8006f50:	4618      	mov	r0, r3
 8006f52:	301c      	adds	r0, #28
 8006f54:	e772      	b.n	8006e3c <_dtoa_r+0x814>
 8006f56:	9b02      	ldr	r3, [sp, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc36      	bgt.n	8006fca <_dtoa_r+0x9a2>
 8006f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	dd33      	ble.n	8006fca <_dtoa_r+0x9a2>
 8006f62:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006f66:	f1bb 0f00 	cmp.w	fp, #0
 8006f6a:	d10d      	bne.n	8006f88 <_dtoa_r+0x960>
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	465b      	mov	r3, fp
 8006f70:	2205      	movs	r2, #5
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f9d0 	bl	8007318 <__multadd>
 8006f78:	4601      	mov	r1, r0
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	4650      	mov	r0, sl
 8006f7e:	f000 fbe3 	bl	8007748 <__mcmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f73f adb6 	bgt.w	8006af4 <_dtoa_r+0x4cc>
 8006f88:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f8a:	9f08      	ldr	r7, [sp, #32]
 8006f8c:	ea6f 0903 	mvn.w	r9, r3
 8006f90:	f04f 0800 	mov.w	r8, #0
 8006f94:	4621      	mov	r1, r4
 8006f96:	4628      	mov	r0, r5
 8006f98:	f000 f99c 	bl	80072d4 <_Bfree>
 8006f9c:	2e00      	cmp	r6, #0
 8006f9e:	f43f aea4 	beq.w	8006cea <_dtoa_r+0x6c2>
 8006fa2:	f1b8 0f00 	cmp.w	r8, #0
 8006fa6:	d005      	beq.n	8006fb4 <_dtoa_r+0x98c>
 8006fa8:	45b0      	cmp	r8, r6
 8006faa:	d003      	beq.n	8006fb4 <_dtoa_r+0x98c>
 8006fac:	4641      	mov	r1, r8
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 f990 	bl	80072d4 <_Bfree>
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 f98c 	bl	80072d4 <_Bfree>
 8006fbc:	e695      	b.n	8006cea <_dtoa_r+0x6c2>
 8006fbe:	2400      	movs	r4, #0
 8006fc0:	4626      	mov	r6, r4
 8006fc2:	e7e1      	b.n	8006f88 <_dtoa_r+0x960>
 8006fc4:	46c1      	mov	r9, r8
 8006fc6:	4626      	mov	r6, r4
 8006fc8:	e594      	b.n	8006af4 <_dtoa_r+0x4cc>
 8006fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fcc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 80fc 	beq.w	80071ce <_dtoa_r+0xba6>
 8006fd6:	2f00      	cmp	r7, #0
 8006fd8:	dd05      	ble.n	8006fe6 <_dtoa_r+0x9be>
 8006fda:	4631      	mov	r1, r6
 8006fdc:	463a      	mov	r2, r7
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fb46 	bl	8007670 <__lshift>
 8006fe4:	4606      	mov	r6, r0
 8006fe6:	f1b8 0f00 	cmp.w	r8, #0
 8006fea:	d05c      	beq.n	80070a6 <_dtoa_r+0xa7e>
 8006fec:	4628      	mov	r0, r5
 8006fee:	6871      	ldr	r1, [r6, #4]
 8006ff0:	f000 f930 	bl	8007254 <_Balloc>
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	b928      	cbnz	r0, 8007004 <_dtoa_r+0x9dc>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ffe:	4b7e      	ldr	r3, [pc, #504]	; (80071f8 <_dtoa_r+0xbd0>)
 8007000:	f7ff bb26 	b.w	8006650 <_dtoa_r+0x28>
 8007004:	6932      	ldr	r2, [r6, #16]
 8007006:	f106 010c 	add.w	r1, r6, #12
 800700a:	3202      	adds	r2, #2
 800700c:	0092      	lsls	r2, r2, #2
 800700e:	300c      	adds	r0, #12
 8007010:	f000 f912 	bl	8007238 <memcpy>
 8007014:	2201      	movs	r2, #1
 8007016:	4639      	mov	r1, r7
 8007018:	4628      	mov	r0, r5
 800701a:	f000 fb29 	bl	8007670 <__lshift>
 800701e:	46b0      	mov	r8, r6
 8007020:	4606      	mov	r6, r0
 8007022:	9b08      	ldr	r3, [sp, #32]
 8007024:	3301      	adds	r3, #1
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	9b08      	ldr	r3, [sp, #32]
 800702a:	445b      	add	r3, fp
 800702c:	930a      	str	r3, [sp, #40]	; 0x28
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	9309      	str	r3, [sp, #36]	; 0x24
 8007036:	9b02      	ldr	r3, [sp, #8]
 8007038:	4621      	mov	r1, r4
 800703a:	4650      	mov	r0, sl
 800703c:	f103 3bff 	add.w	fp, r3, #4294967295
 8007040:	f7ff fa62 	bl	8006508 <quorem>
 8007044:	4603      	mov	r3, r0
 8007046:	4641      	mov	r1, r8
 8007048:	3330      	adds	r3, #48	; 0x30
 800704a:	9004      	str	r0, [sp, #16]
 800704c:	4650      	mov	r0, sl
 800704e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007050:	f000 fb7a 	bl	8007748 <__mcmp>
 8007054:	4632      	mov	r2, r6
 8007056:	9006      	str	r0, [sp, #24]
 8007058:	4621      	mov	r1, r4
 800705a:	4628      	mov	r0, r5
 800705c:	f000 fb90 	bl	8007780 <__mdiff>
 8007060:	68c2      	ldr	r2, [r0, #12]
 8007062:	4607      	mov	r7, r0
 8007064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007066:	bb02      	cbnz	r2, 80070aa <_dtoa_r+0xa82>
 8007068:	4601      	mov	r1, r0
 800706a:	4650      	mov	r0, sl
 800706c:	f000 fb6c 	bl	8007748 <__mcmp>
 8007070:	4602      	mov	r2, r0
 8007072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007074:	4639      	mov	r1, r7
 8007076:	4628      	mov	r0, r5
 8007078:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800707c:	f000 f92a 	bl	80072d4 <_Bfree>
 8007080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007084:	9f02      	ldr	r7, [sp, #8]
 8007086:	ea43 0102 	orr.w	r1, r3, r2
 800708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800708c:	430b      	orrs	r3, r1
 800708e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007090:	d10d      	bne.n	80070ae <_dtoa_r+0xa86>
 8007092:	2b39      	cmp	r3, #57	; 0x39
 8007094:	d027      	beq.n	80070e6 <_dtoa_r+0xabe>
 8007096:	9a06      	ldr	r2, [sp, #24]
 8007098:	2a00      	cmp	r2, #0
 800709a:	dd01      	ble.n	80070a0 <_dtoa_r+0xa78>
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	3331      	adds	r3, #49	; 0x31
 80070a0:	f88b 3000 	strb.w	r3, [fp]
 80070a4:	e776      	b.n	8006f94 <_dtoa_r+0x96c>
 80070a6:	4630      	mov	r0, r6
 80070a8:	e7b9      	b.n	800701e <_dtoa_r+0x9f6>
 80070aa:	2201      	movs	r2, #1
 80070ac:	e7e2      	b.n	8007074 <_dtoa_r+0xa4c>
 80070ae:	9906      	ldr	r1, [sp, #24]
 80070b0:	2900      	cmp	r1, #0
 80070b2:	db04      	blt.n	80070be <_dtoa_r+0xa96>
 80070b4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80070b6:	4301      	orrs	r1, r0
 80070b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ba:	4301      	orrs	r1, r0
 80070bc:	d120      	bne.n	8007100 <_dtoa_r+0xad8>
 80070be:	2a00      	cmp	r2, #0
 80070c0:	ddee      	ble.n	80070a0 <_dtoa_r+0xa78>
 80070c2:	4651      	mov	r1, sl
 80070c4:	2201      	movs	r2, #1
 80070c6:	4628      	mov	r0, r5
 80070c8:	9302      	str	r3, [sp, #8]
 80070ca:	f000 fad1 	bl	8007670 <__lshift>
 80070ce:	4621      	mov	r1, r4
 80070d0:	4682      	mov	sl, r0
 80070d2:	f000 fb39 	bl	8007748 <__mcmp>
 80070d6:	2800      	cmp	r0, #0
 80070d8:	9b02      	ldr	r3, [sp, #8]
 80070da:	dc02      	bgt.n	80070e2 <_dtoa_r+0xaba>
 80070dc:	d1e0      	bne.n	80070a0 <_dtoa_r+0xa78>
 80070de:	07da      	lsls	r2, r3, #31
 80070e0:	d5de      	bpl.n	80070a0 <_dtoa_r+0xa78>
 80070e2:	2b39      	cmp	r3, #57	; 0x39
 80070e4:	d1da      	bne.n	800709c <_dtoa_r+0xa74>
 80070e6:	2339      	movs	r3, #57	; 0x39
 80070e8:	f88b 3000 	strb.w	r3, [fp]
 80070ec:	463b      	mov	r3, r7
 80070ee:	461f      	mov	r7, r3
 80070f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2a39      	cmp	r2, #57	; 0x39
 80070f8:	d050      	beq.n	800719c <_dtoa_r+0xb74>
 80070fa:	3201      	adds	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e749      	b.n	8006f94 <_dtoa_r+0x96c>
 8007100:	2a00      	cmp	r2, #0
 8007102:	dd03      	ble.n	800710c <_dtoa_r+0xae4>
 8007104:	2b39      	cmp	r3, #57	; 0x39
 8007106:	d0ee      	beq.n	80070e6 <_dtoa_r+0xabe>
 8007108:	3301      	adds	r3, #1
 800710a:	e7c9      	b.n	80070a0 <_dtoa_r+0xa78>
 800710c:	9a02      	ldr	r2, [sp, #8]
 800710e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007110:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007114:	428a      	cmp	r2, r1
 8007116:	d02a      	beq.n	800716e <_dtoa_r+0xb46>
 8007118:	4651      	mov	r1, sl
 800711a:	2300      	movs	r3, #0
 800711c:	220a      	movs	r2, #10
 800711e:	4628      	mov	r0, r5
 8007120:	f000 f8fa 	bl	8007318 <__multadd>
 8007124:	45b0      	cmp	r8, r6
 8007126:	4682      	mov	sl, r0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	f04f 020a 	mov.w	r2, #10
 8007130:	4641      	mov	r1, r8
 8007132:	4628      	mov	r0, r5
 8007134:	d107      	bne.n	8007146 <_dtoa_r+0xb1e>
 8007136:	f000 f8ef 	bl	8007318 <__multadd>
 800713a:	4680      	mov	r8, r0
 800713c:	4606      	mov	r6, r0
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	3301      	adds	r3, #1
 8007142:	9302      	str	r3, [sp, #8]
 8007144:	e777      	b.n	8007036 <_dtoa_r+0xa0e>
 8007146:	f000 f8e7 	bl	8007318 <__multadd>
 800714a:	4631      	mov	r1, r6
 800714c:	4680      	mov	r8, r0
 800714e:	2300      	movs	r3, #0
 8007150:	220a      	movs	r2, #10
 8007152:	4628      	mov	r0, r5
 8007154:	f000 f8e0 	bl	8007318 <__multadd>
 8007158:	4606      	mov	r6, r0
 800715a:	e7f0      	b.n	800713e <_dtoa_r+0xb16>
 800715c:	f1bb 0f00 	cmp.w	fp, #0
 8007160:	bfcc      	ite	gt
 8007162:	465f      	movgt	r7, fp
 8007164:	2701      	movle	r7, #1
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	9a08      	ldr	r2, [sp, #32]
 800716c:	4417      	add	r7, r2
 800716e:	4651      	mov	r1, sl
 8007170:	2201      	movs	r2, #1
 8007172:	4628      	mov	r0, r5
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	f000 fa7b 	bl	8007670 <__lshift>
 800717a:	4621      	mov	r1, r4
 800717c:	4682      	mov	sl, r0
 800717e:	f000 fae3 	bl	8007748 <__mcmp>
 8007182:	2800      	cmp	r0, #0
 8007184:	dcb2      	bgt.n	80070ec <_dtoa_r+0xac4>
 8007186:	d102      	bne.n	800718e <_dtoa_r+0xb66>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d4ae      	bmi.n	80070ec <_dtoa_r+0xac4>
 800718e:	463b      	mov	r3, r7
 8007190:	461f      	mov	r7, r3
 8007192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007196:	2a30      	cmp	r2, #48	; 0x30
 8007198:	d0fa      	beq.n	8007190 <_dtoa_r+0xb68>
 800719a:	e6fb      	b.n	8006f94 <_dtoa_r+0x96c>
 800719c:	9a08      	ldr	r2, [sp, #32]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d1a5      	bne.n	80070ee <_dtoa_r+0xac6>
 80071a2:	2331      	movs	r3, #49	; 0x31
 80071a4:	f109 0901 	add.w	r9, r9, #1
 80071a8:	7013      	strb	r3, [r2, #0]
 80071aa:	e6f3      	b.n	8006f94 <_dtoa_r+0x96c>
 80071ac:	4b13      	ldr	r3, [pc, #76]	; (80071fc <_dtoa_r+0xbd4>)
 80071ae:	f7ff baa7 	b.w	8006700 <_dtoa_r+0xd8>
 80071b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f47f aa80 	bne.w	80066ba <_dtoa_r+0x92>
 80071ba:	4b11      	ldr	r3, [pc, #68]	; (8007200 <_dtoa_r+0xbd8>)
 80071bc:	f7ff baa0 	b.w	8006700 <_dtoa_r+0xd8>
 80071c0:	f1bb 0f00 	cmp.w	fp, #0
 80071c4:	dc03      	bgt.n	80071ce <_dtoa_r+0xba6>
 80071c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	f73f aecc 	bgt.w	8006f66 <_dtoa_r+0x93e>
 80071ce:	9f08      	ldr	r7, [sp, #32]
 80071d0:	4621      	mov	r1, r4
 80071d2:	4650      	mov	r0, sl
 80071d4:	f7ff f998 	bl	8006508 <quorem>
 80071d8:	9a08      	ldr	r2, [sp, #32]
 80071da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071de:	f807 3b01 	strb.w	r3, [r7], #1
 80071e2:	1aba      	subs	r2, r7, r2
 80071e4:	4593      	cmp	fp, r2
 80071e6:	ddb9      	ble.n	800715c <_dtoa_r+0xb34>
 80071e8:	4651      	mov	r1, sl
 80071ea:	2300      	movs	r3, #0
 80071ec:	220a      	movs	r2, #10
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 f892 	bl	8007318 <__multadd>
 80071f4:	4682      	mov	sl, r0
 80071f6:	e7eb      	b.n	80071d0 <_dtoa_r+0xba8>
 80071f8:	080097e8 	.word	0x080097e8
 80071fc:	0800971c 	.word	0x0800971c
 8007200:	08009765 	.word	0x08009765

08007204 <_localeconv_r>:
 8007204:	4800      	ldr	r0, [pc, #0]	; (8007208 <_localeconv_r+0x4>)
 8007206:	4770      	bx	lr
 8007208:	20000170 	.word	0x20000170

0800720c <malloc>:
 800720c:	4b02      	ldr	r3, [pc, #8]	; (8007218 <malloc+0xc>)
 800720e:	4601      	mov	r1, r0
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	f000 bbfb 	b.w	8007a0c <_malloc_r>
 8007216:	bf00      	nop
 8007218:	2000001c 	.word	0x2000001c

0800721c <memchr>:
 800721c:	4603      	mov	r3, r0
 800721e:	b510      	push	{r4, lr}
 8007220:	b2c9      	uxtb	r1, r1
 8007222:	4402      	add	r2, r0
 8007224:	4293      	cmp	r3, r2
 8007226:	4618      	mov	r0, r3
 8007228:	d101      	bne.n	800722e <memchr+0x12>
 800722a:	2000      	movs	r0, #0
 800722c:	e003      	b.n	8007236 <memchr+0x1a>
 800722e:	7804      	ldrb	r4, [r0, #0]
 8007230:	3301      	adds	r3, #1
 8007232:	428c      	cmp	r4, r1
 8007234:	d1f6      	bne.n	8007224 <memchr+0x8>
 8007236:	bd10      	pop	{r4, pc}

08007238 <memcpy>:
 8007238:	440a      	add	r2, r1
 800723a:	4291      	cmp	r1, r2
 800723c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007240:	d100      	bne.n	8007244 <memcpy+0xc>
 8007242:	4770      	bx	lr
 8007244:	b510      	push	{r4, lr}
 8007246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724a:	4291      	cmp	r1, r2
 800724c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007250:	d1f9      	bne.n	8007246 <memcpy+0xe>
 8007252:	bd10      	pop	{r4, pc}

08007254 <_Balloc>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	b976      	cbnz	r6, 800727c <_Balloc+0x28>
 800725e:	2010      	movs	r0, #16
 8007260:	f7ff ffd4 	bl	800720c <malloc>
 8007264:	4602      	mov	r2, r0
 8007266:	6260      	str	r0, [r4, #36]	; 0x24
 8007268:	b920      	cbnz	r0, 8007274 <_Balloc+0x20>
 800726a:	2166      	movs	r1, #102	; 0x66
 800726c:	4b17      	ldr	r3, [pc, #92]	; (80072cc <_Balloc+0x78>)
 800726e:	4818      	ldr	r0, [pc, #96]	; (80072d0 <_Balloc+0x7c>)
 8007270:	f000 fd92 	bl	8007d98 <__assert_func>
 8007274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007278:	6006      	str	r6, [r0, #0]
 800727a:	60c6      	str	r6, [r0, #12]
 800727c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800727e:	68f3      	ldr	r3, [r6, #12]
 8007280:	b183      	cbz	r3, 80072a4 <_Balloc+0x50>
 8007282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800728a:	b9b8      	cbnz	r0, 80072bc <_Balloc+0x68>
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f605 	lsl.w	r6, r1, r5
 8007292:	1d72      	adds	r2, r6, #5
 8007294:	4620      	mov	r0, r4
 8007296:	0092      	lsls	r2, r2, #2
 8007298:	f000 fb5e 	bl	8007958 <_calloc_r>
 800729c:	b160      	cbz	r0, 80072b8 <_Balloc+0x64>
 800729e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80072a2:	e00e      	b.n	80072c2 <_Balloc+0x6e>
 80072a4:	2221      	movs	r2, #33	; 0x21
 80072a6:	2104      	movs	r1, #4
 80072a8:	4620      	mov	r0, r4
 80072aa:	f000 fb55 	bl	8007958 <_calloc_r>
 80072ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b0:	60f0      	str	r0, [r6, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e4      	bne.n	8007282 <_Balloc+0x2e>
 80072b8:	2000      	movs	r0, #0
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
 80072bc:	6802      	ldr	r2, [r0, #0]
 80072be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072c2:	2300      	movs	r3, #0
 80072c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c8:	e7f7      	b.n	80072ba <_Balloc+0x66>
 80072ca:	bf00      	nop
 80072cc:	08009772 	.word	0x08009772
 80072d0:	080097f9 	.word	0x080097f9

080072d4 <_Bfree>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072d8:	4605      	mov	r5, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	b976      	cbnz	r6, 80072fc <_Bfree+0x28>
 80072de:	2010      	movs	r0, #16
 80072e0:	f7ff ff94 	bl	800720c <malloc>
 80072e4:	4602      	mov	r2, r0
 80072e6:	6268      	str	r0, [r5, #36]	; 0x24
 80072e8:	b920      	cbnz	r0, 80072f4 <_Bfree+0x20>
 80072ea:	218a      	movs	r1, #138	; 0x8a
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <_Bfree+0x3c>)
 80072ee:	4809      	ldr	r0, [pc, #36]	; (8007314 <_Bfree+0x40>)
 80072f0:	f000 fd52 	bl	8007d98 <__assert_func>
 80072f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f8:	6006      	str	r6, [r0, #0]
 80072fa:	60c6      	str	r6, [r0, #12]
 80072fc:	b13c      	cbz	r4, 800730e <_Bfree+0x3a>
 80072fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007300:	6862      	ldr	r2, [r4, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007308:	6021      	str	r1, [r4, #0]
 800730a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	08009772 	.word	0x08009772
 8007314:	080097f9 	.word	0x080097f9

08007318 <__multadd>:
 8007318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731c:	4698      	mov	r8, r3
 800731e:	460c      	mov	r4, r1
 8007320:	2300      	movs	r3, #0
 8007322:	690e      	ldr	r6, [r1, #16]
 8007324:	4607      	mov	r7, r0
 8007326:	f101 0014 	add.w	r0, r1, #20
 800732a:	6805      	ldr	r5, [r0, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	b2a9      	uxth	r1, r5
 8007330:	fb02 8101 	mla	r1, r2, r1, r8
 8007334:	0c2d      	lsrs	r5, r5, #16
 8007336:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800733a:	fb02 c505 	mla	r5, r2, r5, ip
 800733e:	b289      	uxth	r1, r1
 8007340:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007344:	429e      	cmp	r6, r3
 8007346:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800734a:	f840 1b04 	str.w	r1, [r0], #4
 800734e:	dcec      	bgt.n	800732a <__multadd+0x12>
 8007350:	f1b8 0f00 	cmp.w	r8, #0
 8007354:	d022      	beq.n	800739c <__multadd+0x84>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	42b3      	cmp	r3, r6
 800735a:	dc19      	bgt.n	8007390 <__multadd+0x78>
 800735c:	6861      	ldr	r1, [r4, #4]
 800735e:	4638      	mov	r0, r7
 8007360:	3101      	adds	r1, #1
 8007362:	f7ff ff77 	bl	8007254 <_Balloc>
 8007366:	4605      	mov	r5, r0
 8007368:	b928      	cbnz	r0, 8007376 <__multadd+0x5e>
 800736a:	4602      	mov	r2, r0
 800736c:	21b5      	movs	r1, #181	; 0xb5
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <__multadd+0x8c>)
 8007370:	480d      	ldr	r0, [pc, #52]	; (80073a8 <__multadd+0x90>)
 8007372:	f000 fd11 	bl	8007d98 <__assert_func>
 8007376:	6922      	ldr	r2, [r4, #16]
 8007378:	f104 010c 	add.w	r1, r4, #12
 800737c:	3202      	adds	r2, #2
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	300c      	adds	r0, #12
 8007382:	f7ff ff59 	bl	8007238 <memcpy>
 8007386:	4621      	mov	r1, r4
 8007388:	4638      	mov	r0, r7
 800738a:	f7ff ffa3 	bl	80072d4 <_Bfree>
 800738e:	462c      	mov	r4, r5
 8007390:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007394:	3601      	adds	r6, #1
 8007396:	f8c3 8014 	str.w	r8, [r3, #20]
 800739a:	6126      	str	r6, [r4, #16]
 800739c:	4620      	mov	r0, r4
 800739e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a2:	bf00      	nop
 80073a4:	080097e8 	.word	0x080097e8
 80073a8:	080097f9 	.word	0x080097f9

080073ac <__hi0bits>:
 80073ac:	0c02      	lsrs	r2, r0, #16
 80073ae:	0412      	lsls	r2, r2, #16
 80073b0:	4603      	mov	r3, r0
 80073b2:	b9ca      	cbnz	r2, 80073e8 <__hi0bits+0x3c>
 80073b4:	0403      	lsls	r3, r0, #16
 80073b6:	2010      	movs	r0, #16
 80073b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073bc:	bf04      	itt	eq
 80073be:	021b      	lsleq	r3, r3, #8
 80073c0:	3008      	addeq	r0, #8
 80073c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073c6:	bf04      	itt	eq
 80073c8:	011b      	lsleq	r3, r3, #4
 80073ca:	3004      	addeq	r0, #4
 80073cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073d0:	bf04      	itt	eq
 80073d2:	009b      	lsleq	r3, r3, #2
 80073d4:	3002      	addeq	r0, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	db05      	blt.n	80073e6 <__hi0bits+0x3a>
 80073da:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80073de:	f100 0001 	add.w	r0, r0, #1
 80073e2:	bf08      	it	eq
 80073e4:	2020      	moveq	r0, #32
 80073e6:	4770      	bx	lr
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7e5      	b.n	80073b8 <__hi0bits+0xc>

080073ec <__lo0bits>:
 80073ec:	6803      	ldr	r3, [r0, #0]
 80073ee:	4602      	mov	r2, r0
 80073f0:	f013 0007 	ands.w	r0, r3, #7
 80073f4:	d00b      	beq.n	800740e <__lo0bits+0x22>
 80073f6:	07d9      	lsls	r1, r3, #31
 80073f8:	d422      	bmi.n	8007440 <__lo0bits+0x54>
 80073fa:	0798      	lsls	r0, r3, #30
 80073fc:	bf49      	itett	mi
 80073fe:	085b      	lsrmi	r3, r3, #1
 8007400:	089b      	lsrpl	r3, r3, #2
 8007402:	2001      	movmi	r0, #1
 8007404:	6013      	strmi	r3, [r2, #0]
 8007406:	bf5c      	itt	pl
 8007408:	2002      	movpl	r0, #2
 800740a:	6013      	strpl	r3, [r2, #0]
 800740c:	4770      	bx	lr
 800740e:	b299      	uxth	r1, r3
 8007410:	b909      	cbnz	r1, 8007416 <__lo0bits+0x2a>
 8007412:	2010      	movs	r0, #16
 8007414:	0c1b      	lsrs	r3, r3, #16
 8007416:	f013 0fff 	tst.w	r3, #255	; 0xff
 800741a:	bf04      	itt	eq
 800741c:	0a1b      	lsreq	r3, r3, #8
 800741e:	3008      	addeq	r0, #8
 8007420:	0719      	lsls	r1, r3, #28
 8007422:	bf04      	itt	eq
 8007424:	091b      	lsreq	r3, r3, #4
 8007426:	3004      	addeq	r0, #4
 8007428:	0799      	lsls	r1, r3, #30
 800742a:	bf04      	itt	eq
 800742c:	089b      	lsreq	r3, r3, #2
 800742e:	3002      	addeq	r0, #2
 8007430:	07d9      	lsls	r1, r3, #31
 8007432:	d403      	bmi.n	800743c <__lo0bits+0x50>
 8007434:	085b      	lsrs	r3, r3, #1
 8007436:	f100 0001 	add.w	r0, r0, #1
 800743a:	d003      	beq.n	8007444 <__lo0bits+0x58>
 800743c:	6013      	str	r3, [r2, #0]
 800743e:	4770      	bx	lr
 8007440:	2000      	movs	r0, #0
 8007442:	4770      	bx	lr
 8007444:	2020      	movs	r0, #32
 8007446:	4770      	bx	lr

08007448 <__i2b>:
 8007448:	b510      	push	{r4, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	2101      	movs	r1, #1
 800744e:	f7ff ff01 	bl	8007254 <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__i2b+0x1a>
 8007456:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800745a:	4b04      	ldr	r3, [pc, #16]	; (800746c <__i2b+0x24>)
 800745c:	4804      	ldr	r0, [pc, #16]	; (8007470 <__i2b+0x28>)
 800745e:	f000 fc9b 	bl	8007d98 <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	6144      	str	r4, [r0, #20]
 8007466:	6103      	str	r3, [r0, #16]
 8007468:	bd10      	pop	{r4, pc}
 800746a:	bf00      	nop
 800746c:	080097e8 	.word	0x080097e8
 8007470:	080097f9 	.word	0x080097f9

08007474 <__multiply>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	4614      	mov	r4, r2
 800747a:	690a      	ldr	r2, [r1, #16]
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	460d      	mov	r5, r1
 8007480:	429a      	cmp	r2, r3
 8007482:	bfbe      	ittt	lt
 8007484:	460b      	movlt	r3, r1
 8007486:	4625      	movlt	r5, r4
 8007488:	461c      	movlt	r4, r3
 800748a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800748e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007492:	68ab      	ldr	r3, [r5, #8]
 8007494:	6869      	ldr	r1, [r5, #4]
 8007496:	eb0a 0709 	add.w	r7, sl, r9
 800749a:	42bb      	cmp	r3, r7
 800749c:	b085      	sub	sp, #20
 800749e:	bfb8      	it	lt
 80074a0:	3101      	addlt	r1, #1
 80074a2:	f7ff fed7 	bl	8007254 <_Balloc>
 80074a6:	b930      	cbnz	r0, 80074b6 <__multiply+0x42>
 80074a8:	4602      	mov	r2, r0
 80074aa:	f240 115d 	movw	r1, #349	; 0x15d
 80074ae:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <__multiply+0x140>)
 80074b0:	4841      	ldr	r0, [pc, #260]	; (80075b8 <__multiply+0x144>)
 80074b2:	f000 fc71 	bl	8007d98 <__assert_func>
 80074b6:	f100 0614 	add.w	r6, r0, #20
 80074ba:	4633      	mov	r3, r6
 80074bc:	2200      	movs	r2, #0
 80074be:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80074c2:	4543      	cmp	r3, r8
 80074c4:	d31e      	bcc.n	8007504 <__multiply+0x90>
 80074c6:	f105 0c14 	add.w	ip, r5, #20
 80074ca:	f104 0314 	add.w	r3, r4, #20
 80074ce:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80074d2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	ebac 0205 	sub.w	r2, ip, r5
 80074dc:	3a15      	subs	r2, #21
 80074de:	f022 0203 	bic.w	r2, r2, #3
 80074e2:	3204      	adds	r2, #4
 80074e4:	f105 0115 	add.w	r1, r5, #21
 80074e8:	458c      	cmp	ip, r1
 80074ea:	bf38      	it	cc
 80074ec:	2204      	movcc	r2, #4
 80074ee:	9201      	str	r2, [sp, #4]
 80074f0:	9a02      	ldr	r2, [sp, #8]
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d808      	bhi.n	800750a <__multiply+0x96>
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	dc55      	bgt.n	80075a8 <__multiply+0x134>
 80074fc:	6107      	str	r7, [r0, #16]
 80074fe:	b005      	add	sp, #20
 8007500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007504:	f843 2b04 	str.w	r2, [r3], #4
 8007508:	e7db      	b.n	80074c2 <__multiply+0x4e>
 800750a:	f8b3 a000 	ldrh.w	sl, [r3]
 800750e:	f1ba 0f00 	cmp.w	sl, #0
 8007512:	d020      	beq.n	8007556 <__multiply+0xe2>
 8007514:	46b1      	mov	r9, r6
 8007516:	2200      	movs	r2, #0
 8007518:	f105 0e14 	add.w	lr, r5, #20
 800751c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007520:	f8d9 b000 	ldr.w	fp, [r9]
 8007524:	b2a1      	uxth	r1, r4
 8007526:	fa1f fb8b 	uxth.w	fp, fp
 800752a:	fb0a b101 	mla	r1, sl, r1, fp
 800752e:	4411      	add	r1, r2
 8007530:	f8d9 2000 	ldr.w	r2, [r9]
 8007534:	0c24      	lsrs	r4, r4, #16
 8007536:	0c12      	lsrs	r2, r2, #16
 8007538:	fb0a 2404 	mla	r4, sl, r4, r2
 800753c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007540:	b289      	uxth	r1, r1
 8007542:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007546:	45f4      	cmp	ip, lr
 8007548:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800754c:	f849 1b04 	str.w	r1, [r9], #4
 8007550:	d8e4      	bhi.n	800751c <__multiply+0xa8>
 8007552:	9901      	ldr	r1, [sp, #4]
 8007554:	5072      	str	r2, [r6, r1]
 8007556:	9a03      	ldr	r2, [sp, #12]
 8007558:	3304      	adds	r3, #4
 800755a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800755e:	f1b9 0f00 	cmp.w	r9, #0
 8007562:	d01f      	beq.n	80075a4 <__multiply+0x130>
 8007564:	46b6      	mov	lr, r6
 8007566:	f04f 0a00 	mov.w	sl, #0
 800756a:	6834      	ldr	r4, [r6, #0]
 800756c:	f105 0114 	add.w	r1, r5, #20
 8007570:	880a      	ldrh	r2, [r1, #0]
 8007572:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007576:	b2a4      	uxth	r4, r4
 8007578:	fb09 b202 	mla	r2, r9, r2, fp
 800757c:	4492      	add	sl, r2
 800757e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007582:	f84e 4b04 	str.w	r4, [lr], #4
 8007586:	f851 4b04 	ldr.w	r4, [r1], #4
 800758a:	f8be 2000 	ldrh.w	r2, [lr]
 800758e:	0c24      	lsrs	r4, r4, #16
 8007590:	fb09 2404 	mla	r4, r9, r4, r2
 8007594:	458c      	cmp	ip, r1
 8007596:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800759a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800759e:	d8e7      	bhi.n	8007570 <__multiply+0xfc>
 80075a0:	9a01      	ldr	r2, [sp, #4]
 80075a2:	50b4      	str	r4, [r6, r2]
 80075a4:	3604      	adds	r6, #4
 80075a6:	e7a3      	b.n	80074f0 <__multiply+0x7c>
 80075a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1a5      	bne.n	80074fc <__multiply+0x88>
 80075b0:	3f01      	subs	r7, #1
 80075b2:	e7a1      	b.n	80074f8 <__multiply+0x84>
 80075b4:	080097e8 	.word	0x080097e8
 80075b8:	080097f9 	.word	0x080097f9

080075bc <__pow5mult>:
 80075bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075c0:	4615      	mov	r5, r2
 80075c2:	f012 0203 	ands.w	r2, r2, #3
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
 80075ca:	d007      	beq.n	80075dc <__pow5mult+0x20>
 80075cc:	4c25      	ldr	r4, [pc, #148]	; (8007664 <__pow5mult+0xa8>)
 80075ce:	3a01      	subs	r2, #1
 80075d0:	2300      	movs	r3, #0
 80075d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075d6:	f7ff fe9f 	bl	8007318 <__multadd>
 80075da:	4607      	mov	r7, r0
 80075dc:	10ad      	asrs	r5, r5, #2
 80075de:	d03d      	beq.n	800765c <__pow5mult+0xa0>
 80075e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075e2:	b97c      	cbnz	r4, 8007604 <__pow5mult+0x48>
 80075e4:	2010      	movs	r0, #16
 80075e6:	f7ff fe11 	bl	800720c <malloc>
 80075ea:	4602      	mov	r2, r0
 80075ec:	6270      	str	r0, [r6, #36]	; 0x24
 80075ee:	b928      	cbnz	r0, 80075fc <__pow5mult+0x40>
 80075f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075f4:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <__pow5mult+0xac>)
 80075f6:	481d      	ldr	r0, [pc, #116]	; (800766c <__pow5mult+0xb0>)
 80075f8:	f000 fbce 	bl	8007d98 <__assert_func>
 80075fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007600:	6004      	str	r4, [r0, #0]
 8007602:	60c4      	str	r4, [r0, #12]
 8007604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800760c:	b94c      	cbnz	r4, 8007622 <__pow5mult+0x66>
 800760e:	f240 2171 	movw	r1, #625	; 0x271
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ff18 	bl	8007448 <__i2b>
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007620:	6003      	str	r3, [r0, #0]
 8007622:	f04f 0900 	mov.w	r9, #0
 8007626:	07eb      	lsls	r3, r5, #31
 8007628:	d50a      	bpl.n	8007640 <__pow5mult+0x84>
 800762a:	4639      	mov	r1, r7
 800762c:	4622      	mov	r2, r4
 800762e:	4630      	mov	r0, r6
 8007630:	f7ff ff20 	bl	8007474 <__multiply>
 8007634:	4680      	mov	r8, r0
 8007636:	4639      	mov	r1, r7
 8007638:	4630      	mov	r0, r6
 800763a:	f7ff fe4b 	bl	80072d4 <_Bfree>
 800763e:	4647      	mov	r7, r8
 8007640:	106d      	asrs	r5, r5, #1
 8007642:	d00b      	beq.n	800765c <__pow5mult+0xa0>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	b938      	cbnz	r0, 8007658 <__pow5mult+0x9c>
 8007648:	4622      	mov	r2, r4
 800764a:	4621      	mov	r1, r4
 800764c:	4630      	mov	r0, r6
 800764e:	f7ff ff11 	bl	8007474 <__multiply>
 8007652:	6020      	str	r0, [r4, #0]
 8007654:	f8c0 9000 	str.w	r9, [r0]
 8007658:	4604      	mov	r4, r0
 800765a:	e7e4      	b.n	8007626 <__pow5mult+0x6a>
 800765c:	4638      	mov	r0, r7
 800765e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007662:	bf00      	nop
 8007664:	08009950 	.word	0x08009950
 8007668:	08009772 	.word	0x08009772
 800766c:	080097f9 	.word	0x080097f9

08007670 <__lshift>:
 8007670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007674:	460c      	mov	r4, r1
 8007676:	4607      	mov	r7, r0
 8007678:	4691      	mov	r9, r2
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	6849      	ldr	r1, [r1, #4]
 800767e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007682:	68a3      	ldr	r3, [r4, #8]
 8007684:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007688:	f108 0601 	add.w	r6, r8, #1
 800768c:	42b3      	cmp	r3, r6
 800768e:	db0b      	blt.n	80076a8 <__lshift+0x38>
 8007690:	4638      	mov	r0, r7
 8007692:	f7ff fddf 	bl	8007254 <_Balloc>
 8007696:	4605      	mov	r5, r0
 8007698:	b948      	cbnz	r0, 80076ae <__lshift+0x3e>
 800769a:	4602      	mov	r2, r0
 800769c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80076a0:	4b27      	ldr	r3, [pc, #156]	; (8007740 <__lshift+0xd0>)
 80076a2:	4828      	ldr	r0, [pc, #160]	; (8007744 <__lshift+0xd4>)
 80076a4:	f000 fb78 	bl	8007d98 <__assert_func>
 80076a8:	3101      	adds	r1, #1
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	e7ee      	b.n	800768c <__lshift+0x1c>
 80076ae:	2300      	movs	r3, #0
 80076b0:	f100 0114 	add.w	r1, r0, #20
 80076b4:	f100 0210 	add.w	r2, r0, #16
 80076b8:	4618      	mov	r0, r3
 80076ba:	4553      	cmp	r3, sl
 80076bc:	db33      	blt.n	8007726 <__lshift+0xb6>
 80076be:	6920      	ldr	r0, [r4, #16]
 80076c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076c4:	f104 0314 	add.w	r3, r4, #20
 80076c8:	f019 091f 	ands.w	r9, r9, #31
 80076cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076d4:	d02b      	beq.n	800772e <__lshift+0xbe>
 80076d6:	468a      	mov	sl, r1
 80076d8:	2200      	movs	r2, #0
 80076da:	f1c9 0e20 	rsb	lr, r9, #32
 80076de:	6818      	ldr	r0, [r3, #0]
 80076e0:	fa00 f009 	lsl.w	r0, r0, r9
 80076e4:	4302      	orrs	r2, r0
 80076e6:	f84a 2b04 	str.w	r2, [sl], #4
 80076ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ee:	459c      	cmp	ip, r3
 80076f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80076f4:	d8f3      	bhi.n	80076de <__lshift+0x6e>
 80076f6:	ebac 0304 	sub.w	r3, ip, r4
 80076fa:	3b15      	subs	r3, #21
 80076fc:	f023 0303 	bic.w	r3, r3, #3
 8007700:	3304      	adds	r3, #4
 8007702:	f104 0015 	add.w	r0, r4, #21
 8007706:	4584      	cmp	ip, r0
 8007708:	bf38      	it	cc
 800770a:	2304      	movcc	r3, #4
 800770c:	50ca      	str	r2, [r1, r3]
 800770e:	b10a      	cbz	r2, 8007714 <__lshift+0xa4>
 8007710:	f108 0602 	add.w	r6, r8, #2
 8007714:	3e01      	subs	r6, #1
 8007716:	4638      	mov	r0, r7
 8007718:	4621      	mov	r1, r4
 800771a:	612e      	str	r6, [r5, #16]
 800771c:	f7ff fdda 	bl	80072d4 <_Bfree>
 8007720:	4628      	mov	r0, r5
 8007722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007726:	f842 0f04 	str.w	r0, [r2, #4]!
 800772a:	3301      	adds	r3, #1
 800772c:	e7c5      	b.n	80076ba <__lshift+0x4a>
 800772e:	3904      	subs	r1, #4
 8007730:	f853 2b04 	ldr.w	r2, [r3], #4
 8007734:	459c      	cmp	ip, r3
 8007736:	f841 2f04 	str.w	r2, [r1, #4]!
 800773a:	d8f9      	bhi.n	8007730 <__lshift+0xc0>
 800773c:	e7ea      	b.n	8007714 <__lshift+0xa4>
 800773e:	bf00      	nop
 8007740:	080097e8 	.word	0x080097e8
 8007744:	080097f9 	.word	0x080097f9

08007748 <__mcmp>:
 8007748:	4603      	mov	r3, r0
 800774a:	690a      	ldr	r2, [r1, #16]
 800774c:	6900      	ldr	r0, [r0, #16]
 800774e:	b530      	push	{r4, r5, lr}
 8007750:	1a80      	subs	r0, r0, r2
 8007752:	d10d      	bne.n	8007770 <__mcmp+0x28>
 8007754:	3314      	adds	r3, #20
 8007756:	3114      	adds	r1, #20
 8007758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800775c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007768:	4295      	cmp	r5, r2
 800776a:	d002      	beq.n	8007772 <__mcmp+0x2a>
 800776c:	d304      	bcc.n	8007778 <__mcmp+0x30>
 800776e:	2001      	movs	r0, #1
 8007770:	bd30      	pop	{r4, r5, pc}
 8007772:	42a3      	cmp	r3, r4
 8007774:	d3f4      	bcc.n	8007760 <__mcmp+0x18>
 8007776:	e7fb      	b.n	8007770 <__mcmp+0x28>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	e7f8      	b.n	8007770 <__mcmp+0x28>
	...

08007780 <__mdiff>:
 8007780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	460c      	mov	r4, r1
 8007786:	4606      	mov	r6, r0
 8007788:	4611      	mov	r1, r2
 800778a:	4620      	mov	r0, r4
 800778c:	4692      	mov	sl, r2
 800778e:	f7ff ffdb 	bl	8007748 <__mcmp>
 8007792:	1e05      	subs	r5, r0, #0
 8007794:	d111      	bne.n	80077ba <__mdiff+0x3a>
 8007796:	4629      	mov	r1, r5
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff fd5b 	bl	8007254 <_Balloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	b928      	cbnz	r0, 80077ae <__mdiff+0x2e>
 80077a2:	f240 2132 	movw	r1, #562	; 0x232
 80077a6:	4b3c      	ldr	r3, [pc, #240]	; (8007898 <__mdiff+0x118>)
 80077a8:	483c      	ldr	r0, [pc, #240]	; (800789c <__mdiff+0x11c>)
 80077aa:	f000 faf5 	bl	8007d98 <__assert_func>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80077b4:	4610      	mov	r0, r2
 80077b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	bfa4      	itt	ge
 80077bc:	4653      	movge	r3, sl
 80077be:	46a2      	movge	sl, r4
 80077c0:	4630      	mov	r0, r6
 80077c2:	f8da 1004 	ldr.w	r1, [sl, #4]
 80077c6:	bfa6      	itte	ge
 80077c8:	461c      	movge	r4, r3
 80077ca:	2500      	movge	r5, #0
 80077cc:	2501      	movlt	r5, #1
 80077ce:	f7ff fd41 	bl	8007254 <_Balloc>
 80077d2:	4602      	mov	r2, r0
 80077d4:	b918      	cbnz	r0, 80077de <__mdiff+0x5e>
 80077d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077da:	4b2f      	ldr	r3, [pc, #188]	; (8007898 <__mdiff+0x118>)
 80077dc:	e7e4      	b.n	80077a8 <__mdiff+0x28>
 80077de:	f100 0814 	add.w	r8, r0, #20
 80077e2:	f8da 7010 	ldr.w	r7, [sl, #16]
 80077e6:	60c5      	str	r5, [r0, #12]
 80077e8:	f04f 0c00 	mov.w	ip, #0
 80077ec:	f10a 0514 	add.w	r5, sl, #20
 80077f0:	f10a 0010 	add.w	r0, sl, #16
 80077f4:	46c2      	mov	sl, r8
 80077f6:	6926      	ldr	r6, [r4, #16]
 80077f8:	f104 0914 	add.w	r9, r4, #20
 80077fc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007800:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007804:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007808:	f859 3b04 	ldr.w	r3, [r9], #4
 800780c:	fa1f f18b 	uxth.w	r1, fp
 8007810:	4461      	add	r1, ip
 8007812:	fa1f fc83 	uxth.w	ip, r3
 8007816:	0c1b      	lsrs	r3, r3, #16
 8007818:	eba1 010c 	sub.w	r1, r1, ip
 800781c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007820:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007824:	b289      	uxth	r1, r1
 8007826:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800782a:	454e      	cmp	r6, r9
 800782c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007830:	f84a 3b04 	str.w	r3, [sl], #4
 8007834:	d8e6      	bhi.n	8007804 <__mdiff+0x84>
 8007836:	1b33      	subs	r3, r6, r4
 8007838:	3b15      	subs	r3, #21
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	3415      	adds	r4, #21
 8007840:	3304      	adds	r3, #4
 8007842:	42a6      	cmp	r6, r4
 8007844:	bf38      	it	cc
 8007846:	2304      	movcc	r3, #4
 8007848:	441d      	add	r5, r3
 800784a:	4443      	add	r3, r8
 800784c:	461e      	mov	r6, r3
 800784e:	462c      	mov	r4, r5
 8007850:	4574      	cmp	r4, lr
 8007852:	d30e      	bcc.n	8007872 <__mdiff+0xf2>
 8007854:	f10e 0103 	add.w	r1, lr, #3
 8007858:	1b49      	subs	r1, r1, r5
 800785a:	f021 0103 	bic.w	r1, r1, #3
 800785e:	3d03      	subs	r5, #3
 8007860:	45ae      	cmp	lr, r5
 8007862:	bf38      	it	cc
 8007864:	2100      	movcc	r1, #0
 8007866:	4419      	add	r1, r3
 8007868:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800786c:	b18b      	cbz	r3, 8007892 <__mdiff+0x112>
 800786e:	6117      	str	r7, [r2, #16]
 8007870:	e7a0      	b.n	80077b4 <__mdiff+0x34>
 8007872:	f854 8b04 	ldr.w	r8, [r4], #4
 8007876:	fa1f f188 	uxth.w	r1, r8
 800787a:	4461      	add	r1, ip
 800787c:	1408      	asrs	r0, r1, #16
 800787e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007882:	b289      	uxth	r1, r1
 8007884:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007888:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800788c:	f846 1b04 	str.w	r1, [r6], #4
 8007890:	e7de      	b.n	8007850 <__mdiff+0xd0>
 8007892:	3f01      	subs	r7, #1
 8007894:	e7e8      	b.n	8007868 <__mdiff+0xe8>
 8007896:	bf00      	nop
 8007898:	080097e8 	.word	0x080097e8
 800789c:	080097f9 	.word	0x080097f9

080078a0 <__d2b>:
 80078a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80078a4:	2101      	movs	r1, #1
 80078a6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078aa:	4690      	mov	r8, r2
 80078ac:	461d      	mov	r5, r3
 80078ae:	f7ff fcd1 	bl	8007254 <_Balloc>
 80078b2:	4604      	mov	r4, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <__d2b+0x24>
 80078b6:	4602      	mov	r2, r0
 80078b8:	f240 310a 	movw	r1, #778	; 0x30a
 80078bc:	4b24      	ldr	r3, [pc, #144]	; (8007950 <__d2b+0xb0>)
 80078be:	4825      	ldr	r0, [pc, #148]	; (8007954 <__d2b+0xb4>)
 80078c0:	f000 fa6a 	bl	8007d98 <__assert_func>
 80078c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078c8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80078cc:	bb2d      	cbnz	r5, 800791a <__d2b+0x7a>
 80078ce:	9301      	str	r3, [sp, #4]
 80078d0:	f1b8 0300 	subs.w	r3, r8, #0
 80078d4:	d026      	beq.n	8007924 <__d2b+0x84>
 80078d6:	4668      	mov	r0, sp
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	f7ff fd87 	bl	80073ec <__lo0bits>
 80078de:	9900      	ldr	r1, [sp, #0]
 80078e0:	b1f0      	cbz	r0, 8007920 <__d2b+0x80>
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	40c2      	lsrs	r2, r0
 80078f0:	6163      	str	r3, [r4, #20]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	9b01      	ldr	r3, [sp, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bf14      	ite	ne
 80078fa:	2102      	movne	r1, #2
 80078fc:	2101      	moveq	r1, #1
 80078fe:	61a3      	str	r3, [r4, #24]
 8007900:	6121      	str	r1, [r4, #16]
 8007902:	b1c5      	cbz	r5, 8007936 <__d2b+0x96>
 8007904:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007908:	4405      	add	r5, r0
 800790a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800790e:	603d      	str	r5, [r7, #0]
 8007910:	6030      	str	r0, [r6, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	b002      	add	sp, #8
 8007916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791e:	e7d6      	b.n	80078ce <__d2b+0x2e>
 8007920:	6161      	str	r1, [r4, #20]
 8007922:	e7e7      	b.n	80078f4 <__d2b+0x54>
 8007924:	a801      	add	r0, sp, #4
 8007926:	f7ff fd61 	bl	80073ec <__lo0bits>
 800792a:	2101      	movs	r1, #1
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	6121      	str	r1, [r4, #16]
 8007930:	6163      	str	r3, [r4, #20]
 8007932:	3020      	adds	r0, #32
 8007934:	e7e5      	b.n	8007902 <__d2b+0x62>
 8007936:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800793a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800793e:	6038      	str	r0, [r7, #0]
 8007940:	6918      	ldr	r0, [r3, #16]
 8007942:	f7ff fd33 	bl	80073ac <__hi0bits>
 8007946:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800794a:	6031      	str	r1, [r6, #0]
 800794c:	e7e1      	b.n	8007912 <__d2b+0x72>
 800794e:	bf00      	nop
 8007950:	080097e8 	.word	0x080097e8
 8007954:	080097f9 	.word	0x080097f9

08007958 <_calloc_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	fb02 f501 	mul.w	r5, r2, r1
 800795e:	4629      	mov	r1, r5
 8007960:	f000 f854 	bl	8007a0c <_malloc_r>
 8007964:	4604      	mov	r4, r0
 8007966:	b118      	cbz	r0, 8007970 <_calloc_r+0x18>
 8007968:	462a      	mov	r2, r5
 800796a:	2100      	movs	r1, #0
 800796c:	f7fe f902 	bl	8005b74 <memset>
 8007970:	4620      	mov	r0, r4
 8007972:	bd38      	pop	{r3, r4, r5, pc}

08007974 <_free_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4605      	mov	r5, r0
 8007978:	2900      	cmp	r1, #0
 800797a:	d043      	beq.n	8007a04 <_free_r+0x90>
 800797c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007980:	1f0c      	subs	r4, r1, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	bfb8      	it	lt
 8007986:	18e4      	addlt	r4, r4, r3
 8007988:	f000 fa62 	bl	8007e50 <__malloc_lock>
 800798c:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <_free_r+0x94>)
 800798e:	6813      	ldr	r3, [r2, #0]
 8007990:	4610      	mov	r0, r2
 8007992:	b933      	cbnz	r3, 80079a2 <_free_r+0x2e>
 8007994:	6063      	str	r3, [r4, #4]
 8007996:	6014      	str	r4, [r2, #0]
 8007998:	4628      	mov	r0, r5
 800799a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799e:	f000 ba5d 	b.w	8007e5c <__malloc_unlock>
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	d90a      	bls.n	80079bc <_free_r+0x48>
 80079a6:	6821      	ldr	r1, [r4, #0]
 80079a8:	1862      	adds	r2, r4, r1
 80079aa:	4293      	cmp	r3, r2
 80079ac:	bf01      	itttt	eq
 80079ae:	681a      	ldreq	r2, [r3, #0]
 80079b0:	685b      	ldreq	r3, [r3, #4]
 80079b2:	1852      	addeq	r2, r2, r1
 80079b4:	6022      	streq	r2, [r4, #0]
 80079b6:	6063      	str	r3, [r4, #4]
 80079b8:	6004      	str	r4, [r0, #0]
 80079ba:	e7ed      	b.n	8007998 <_free_r+0x24>
 80079bc:	461a      	mov	r2, r3
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	b10b      	cbz	r3, 80079c6 <_free_r+0x52>
 80079c2:	42a3      	cmp	r3, r4
 80079c4:	d9fa      	bls.n	80079bc <_free_r+0x48>
 80079c6:	6811      	ldr	r1, [r2, #0]
 80079c8:	1850      	adds	r0, r2, r1
 80079ca:	42a0      	cmp	r0, r4
 80079cc:	d10b      	bne.n	80079e6 <_free_r+0x72>
 80079ce:	6820      	ldr	r0, [r4, #0]
 80079d0:	4401      	add	r1, r0
 80079d2:	1850      	adds	r0, r2, r1
 80079d4:	4283      	cmp	r3, r0
 80079d6:	6011      	str	r1, [r2, #0]
 80079d8:	d1de      	bne.n	8007998 <_free_r+0x24>
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4401      	add	r1, r0
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	6053      	str	r3, [r2, #4]
 80079e4:	e7d8      	b.n	8007998 <_free_r+0x24>
 80079e6:	d902      	bls.n	80079ee <_free_r+0x7a>
 80079e8:	230c      	movs	r3, #12
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	e7d4      	b.n	8007998 <_free_r+0x24>
 80079ee:	6820      	ldr	r0, [r4, #0]
 80079f0:	1821      	adds	r1, r4, r0
 80079f2:	428b      	cmp	r3, r1
 80079f4:	bf01      	itttt	eq
 80079f6:	6819      	ldreq	r1, [r3, #0]
 80079f8:	685b      	ldreq	r3, [r3, #4]
 80079fa:	1809      	addeq	r1, r1, r0
 80079fc:	6021      	streq	r1, [r4, #0]
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6054      	str	r4, [r2, #4]
 8007a02:	e7c9      	b.n	8007998 <_free_r+0x24>
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	20000640 	.word	0x20000640

08007a0c <_malloc_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	1ccd      	adds	r5, r1, #3
 8007a10:	f025 0503 	bic.w	r5, r5, #3
 8007a14:	3508      	adds	r5, #8
 8007a16:	2d0c      	cmp	r5, #12
 8007a18:	bf38      	it	cc
 8007a1a:	250c      	movcc	r5, #12
 8007a1c:	2d00      	cmp	r5, #0
 8007a1e:	4606      	mov	r6, r0
 8007a20:	db01      	blt.n	8007a26 <_malloc_r+0x1a>
 8007a22:	42a9      	cmp	r1, r5
 8007a24:	d903      	bls.n	8007a2e <_malloc_r+0x22>
 8007a26:	230c      	movs	r3, #12
 8007a28:	6033      	str	r3, [r6, #0]
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2e:	f000 fa0f 	bl	8007e50 <__malloc_lock>
 8007a32:	4921      	ldr	r1, [pc, #132]	; (8007ab8 <_malloc_r+0xac>)
 8007a34:	680a      	ldr	r2, [r1, #0]
 8007a36:	4614      	mov	r4, r2
 8007a38:	b99c      	cbnz	r4, 8007a62 <_malloc_r+0x56>
 8007a3a:	4f20      	ldr	r7, [pc, #128]	; (8007abc <_malloc_r+0xb0>)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	b923      	cbnz	r3, 8007a4a <_malloc_r+0x3e>
 8007a40:	4621      	mov	r1, r4
 8007a42:	4630      	mov	r0, r6
 8007a44:	f000 f998 	bl	8007d78 <_sbrk_r>
 8007a48:	6038      	str	r0, [r7, #0]
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	f000 f993 	bl	8007d78 <_sbrk_r>
 8007a52:	1c43      	adds	r3, r0, #1
 8007a54:	d123      	bne.n	8007a9e <_malloc_r+0x92>
 8007a56:	230c      	movs	r3, #12
 8007a58:	4630      	mov	r0, r6
 8007a5a:	6033      	str	r3, [r6, #0]
 8007a5c:	f000 f9fe 	bl	8007e5c <__malloc_unlock>
 8007a60:	e7e3      	b.n	8007a2a <_malloc_r+0x1e>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	1b5b      	subs	r3, r3, r5
 8007a66:	d417      	bmi.n	8007a98 <_malloc_r+0x8c>
 8007a68:	2b0b      	cmp	r3, #11
 8007a6a:	d903      	bls.n	8007a74 <_malloc_r+0x68>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	441c      	add	r4, r3
 8007a70:	6025      	str	r5, [r4, #0]
 8007a72:	e004      	b.n	8007a7e <_malloc_r+0x72>
 8007a74:	6863      	ldr	r3, [r4, #4]
 8007a76:	42a2      	cmp	r2, r4
 8007a78:	bf0c      	ite	eq
 8007a7a:	600b      	streq	r3, [r1, #0]
 8007a7c:	6053      	strne	r3, [r2, #4]
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f000 f9ec 	bl	8007e5c <__malloc_unlock>
 8007a84:	f104 000b 	add.w	r0, r4, #11
 8007a88:	1d23      	adds	r3, r4, #4
 8007a8a:	f020 0007 	bic.w	r0, r0, #7
 8007a8e:	1ac2      	subs	r2, r0, r3
 8007a90:	d0cc      	beq.n	8007a2c <_malloc_r+0x20>
 8007a92:	1a1b      	subs	r3, r3, r0
 8007a94:	50a3      	str	r3, [r4, r2]
 8007a96:	e7c9      	b.n	8007a2c <_malloc_r+0x20>
 8007a98:	4622      	mov	r2, r4
 8007a9a:	6864      	ldr	r4, [r4, #4]
 8007a9c:	e7cc      	b.n	8007a38 <_malloc_r+0x2c>
 8007a9e:	1cc4      	adds	r4, r0, #3
 8007aa0:	f024 0403 	bic.w	r4, r4, #3
 8007aa4:	42a0      	cmp	r0, r4
 8007aa6:	d0e3      	beq.n	8007a70 <_malloc_r+0x64>
 8007aa8:	1a21      	subs	r1, r4, r0
 8007aaa:	4630      	mov	r0, r6
 8007aac:	f000 f964 	bl	8007d78 <_sbrk_r>
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d1dd      	bne.n	8007a70 <_malloc_r+0x64>
 8007ab4:	e7cf      	b.n	8007a56 <_malloc_r+0x4a>
 8007ab6:	bf00      	nop
 8007ab8:	20000640 	.word	0x20000640
 8007abc:	20000644 	.word	0x20000644

08007ac0 <__ssputs_r>:
 8007ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac4:	688e      	ldr	r6, [r1, #8]
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	429e      	cmp	r6, r3
 8007aca:	460c      	mov	r4, r1
 8007acc:	4690      	mov	r8, r2
 8007ace:	461f      	mov	r7, r3
 8007ad0:	d838      	bhi.n	8007b44 <__ssputs_r+0x84>
 8007ad2:	898a      	ldrh	r2, [r1, #12]
 8007ad4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ad8:	d032      	beq.n	8007b40 <__ssputs_r+0x80>
 8007ada:	6825      	ldr	r5, [r4, #0]
 8007adc:	6909      	ldr	r1, [r1, #16]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	eba5 0901 	sub.w	r9, r5, r1
 8007ae4:	6965      	ldr	r5, [r4, #20]
 8007ae6:	444b      	add	r3, r9
 8007ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007af0:	106d      	asrs	r5, r5, #1
 8007af2:	429d      	cmp	r5, r3
 8007af4:	bf38      	it	cc
 8007af6:	461d      	movcc	r5, r3
 8007af8:	0553      	lsls	r3, r2, #21
 8007afa:	d531      	bpl.n	8007b60 <__ssputs_r+0xa0>
 8007afc:	4629      	mov	r1, r5
 8007afe:	f7ff ff85 	bl	8007a0c <_malloc_r>
 8007b02:	4606      	mov	r6, r0
 8007b04:	b950      	cbnz	r0, 8007b1c <__ssputs_r+0x5c>
 8007b06:	230c      	movs	r3, #12
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	f8ca 3000 	str.w	r3, [sl]
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1c:	464a      	mov	r2, r9
 8007b1e:	6921      	ldr	r1, [r4, #16]
 8007b20:	f7ff fb8a 	bl	8007238 <memcpy>
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	6126      	str	r6, [r4, #16]
 8007b32:	444e      	add	r6, r9
 8007b34:	6026      	str	r6, [r4, #0]
 8007b36:	463e      	mov	r6, r7
 8007b38:	6165      	str	r5, [r4, #20]
 8007b3a:	eba5 0509 	sub.w	r5, r5, r9
 8007b3e:	60a5      	str	r5, [r4, #8]
 8007b40:	42be      	cmp	r6, r7
 8007b42:	d900      	bls.n	8007b46 <__ssputs_r+0x86>
 8007b44:	463e      	mov	r6, r7
 8007b46:	4632      	mov	r2, r6
 8007b48:	4641      	mov	r1, r8
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	f000 f966 	bl	8007e1c <memmove>
 8007b50:	68a3      	ldr	r3, [r4, #8]
 8007b52:	6822      	ldr	r2, [r4, #0]
 8007b54:	1b9b      	subs	r3, r3, r6
 8007b56:	4432      	add	r2, r6
 8007b58:	2000      	movs	r0, #0
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	6022      	str	r2, [r4, #0]
 8007b5e:	e7db      	b.n	8007b18 <__ssputs_r+0x58>
 8007b60:	462a      	mov	r2, r5
 8007b62:	f000 f981 	bl	8007e68 <_realloc_r>
 8007b66:	4606      	mov	r6, r0
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d1e1      	bne.n	8007b30 <__ssputs_r+0x70>
 8007b6c:	4650      	mov	r0, sl
 8007b6e:	6921      	ldr	r1, [r4, #16]
 8007b70:	f7ff ff00 	bl	8007974 <_free_r>
 8007b74:	e7c7      	b.n	8007b06 <__ssputs_r+0x46>
	...

08007b78 <_svfiprintf_r>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	4698      	mov	r8, r3
 8007b7e:	898b      	ldrh	r3, [r1, #12]
 8007b80:	4607      	mov	r7, r0
 8007b82:	061b      	lsls	r3, r3, #24
 8007b84:	460d      	mov	r5, r1
 8007b86:	4614      	mov	r4, r2
 8007b88:	b09d      	sub	sp, #116	; 0x74
 8007b8a:	d50e      	bpl.n	8007baa <_svfiprintf_r+0x32>
 8007b8c:	690b      	ldr	r3, [r1, #16]
 8007b8e:	b963      	cbnz	r3, 8007baa <_svfiprintf_r+0x32>
 8007b90:	2140      	movs	r1, #64	; 0x40
 8007b92:	f7ff ff3b 	bl	8007a0c <_malloc_r>
 8007b96:	6028      	str	r0, [r5, #0]
 8007b98:	6128      	str	r0, [r5, #16]
 8007b9a:	b920      	cbnz	r0, 8007ba6 <_svfiprintf_r+0x2e>
 8007b9c:	230c      	movs	r3, #12
 8007b9e:	603b      	str	r3, [r7, #0]
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e0d1      	b.n	8007d4a <_svfiprintf_r+0x1d2>
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	616b      	str	r3, [r5, #20]
 8007baa:	2300      	movs	r3, #0
 8007bac:	9309      	str	r3, [sp, #36]	; 0x24
 8007bae:	2320      	movs	r3, #32
 8007bb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bb4:	2330      	movs	r3, #48	; 0x30
 8007bb6:	f04f 0901 	mov.w	r9, #1
 8007bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bbe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d64 <_svfiprintf_r+0x1ec>
 8007bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	469a      	mov	sl, r3
 8007bca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bce:	b10a      	cbz	r2, 8007bd4 <_svfiprintf_r+0x5c>
 8007bd0:	2a25      	cmp	r2, #37	; 0x25
 8007bd2:	d1f9      	bne.n	8007bc8 <_svfiprintf_r+0x50>
 8007bd4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bd8:	d00b      	beq.n	8007bf2 <_svfiprintf_r+0x7a>
 8007bda:	465b      	mov	r3, fp
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ff6d 	bl	8007ac0 <__ssputs_r>
 8007be6:	3001      	adds	r0, #1
 8007be8:	f000 80aa 	beq.w	8007d40 <_svfiprintf_r+0x1c8>
 8007bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bee:	445a      	add	r2, fp
 8007bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 80a2 	beq.w	8007d40 <_svfiprintf_r+0x1c8>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007c02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c06:	f10a 0a01 	add.w	sl, sl, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	9307      	str	r3, [sp, #28]
 8007c0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c12:	931a      	str	r3, [sp, #104]	; 0x68
 8007c14:	4654      	mov	r4, sl
 8007c16:	2205      	movs	r2, #5
 8007c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c1c:	4851      	ldr	r0, [pc, #324]	; (8007d64 <_svfiprintf_r+0x1ec>)
 8007c1e:	f7ff fafd 	bl	800721c <memchr>
 8007c22:	9a04      	ldr	r2, [sp, #16]
 8007c24:	b9d8      	cbnz	r0, 8007c5e <_svfiprintf_r+0xe6>
 8007c26:	06d0      	lsls	r0, r2, #27
 8007c28:	bf44      	itt	mi
 8007c2a:	2320      	movmi	r3, #32
 8007c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c30:	0711      	lsls	r1, r2, #28
 8007c32:	bf44      	itt	mi
 8007c34:	232b      	movmi	r3, #43	; 0x2b
 8007c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c40:	d015      	beq.n	8007c6e <_svfiprintf_r+0xf6>
 8007c42:	4654      	mov	r4, sl
 8007c44:	2000      	movs	r0, #0
 8007c46:	f04f 0c0a 	mov.w	ip, #10
 8007c4a:	9a07      	ldr	r2, [sp, #28]
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c52:	3b30      	subs	r3, #48	; 0x30
 8007c54:	2b09      	cmp	r3, #9
 8007c56:	d94e      	bls.n	8007cf6 <_svfiprintf_r+0x17e>
 8007c58:	b1b0      	cbz	r0, 8007c88 <_svfiprintf_r+0x110>
 8007c5a:	9207      	str	r2, [sp, #28]
 8007c5c:	e014      	b.n	8007c88 <_svfiprintf_r+0x110>
 8007c5e:	eba0 0308 	sub.w	r3, r0, r8
 8007c62:	fa09 f303 	lsl.w	r3, r9, r3
 8007c66:	4313      	orrs	r3, r2
 8007c68:	46a2      	mov	sl, r4
 8007c6a:	9304      	str	r3, [sp, #16]
 8007c6c:	e7d2      	b.n	8007c14 <_svfiprintf_r+0x9c>
 8007c6e:	9b03      	ldr	r3, [sp, #12]
 8007c70:	1d19      	adds	r1, r3, #4
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	9103      	str	r1, [sp, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	bfbb      	ittet	lt
 8007c7a:	425b      	neglt	r3, r3
 8007c7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c80:	9307      	strge	r3, [sp, #28]
 8007c82:	9307      	strlt	r3, [sp, #28]
 8007c84:	bfb8      	it	lt
 8007c86:	9204      	strlt	r2, [sp, #16]
 8007c88:	7823      	ldrb	r3, [r4, #0]
 8007c8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c8c:	d10c      	bne.n	8007ca8 <_svfiprintf_r+0x130>
 8007c8e:	7863      	ldrb	r3, [r4, #1]
 8007c90:	2b2a      	cmp	r3, #42	; 0x2a
 8007c92:	d135      	bne.n	8007d00 <_svfiprintf_r+0x188>
 8007c94:	9b03      	ldr	r3, [sp, #12]
 8007c96:	3402      	adds	r4, #2
 8007c98:	1d1a      	adds	r2, r3, #4
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	9203      	str	r2, [sp, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfb8      	it	lt
 8007ca2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ca6:	9305      	str	r3, [sp, #20]
 8007ca8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d74 <_svfiprintf_r+0x1fc>
 8007cac:	2203      	movs	r2, #3
 8007cae:	4650      	mov	r0, sl
 8007cb0:	7821      	ldrb	r1, [r4, #0]
 8007cb2:	f7ff fab3 	bl	800721c <memchr>
 8007cb6:	b140      	cbz	r0, 8007cca <_svfiprintf_r+0x152>
 8007cb8:	2340      	movs	r3, #64	; 0x40
 8007cba:	eba0 000a 	sub.w	r0, r0, sl
 8007cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8007cc2:	9b04      	ldr	r3, [sp, #16]
 8007cc4:	3401      	adds	r4, #1
 8007cc6:	4303      	orrs	r3, r0
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cce:	2206      	movs	r2, #6
 8007cd0:	4825      	ldr	r0, [pc, #148]	; (8007d68 <_svfiprintf_r+0x1f0>)
 8007cd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cd6:	f7ff faa1 	bl	800721c <memchr>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d038      	beq.n	8007d50 <_svfiprintf_r+0x1d8>
 8007cde:	4b23      	ldr	r3, [pc, #140]	; (8007d6c <_svfiprintf_r+0x1f4>)
 8007ce0:	bb1b      	cbnz	r3, 8007d2a <_svfiprintf_r+0x1b2>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	3307      	adds	r3, #7
 8007ce6:	f023 0307 	bic.w	r3, r3, #7
 8007cea:	3308      	adds	r3, #8
 8007cec:	9303      	str	r3, [sp, #12]
 8007cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf0:	4433      	add	r3, r6
 8007cf2:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf4:	e767      	b.n	8007bc6 <_svfiprintf_r+0x4e>
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cfe:	e7a5      	b.n	8007c4c <_svfiprintf_r+0xd4>
 8007d00:	2300      	movs	r3, #0
 8007d02:	f04f 0c0a 	mov.w	ip, #10
 8007d06:	4619      	mov	r1, r3
 8007d08:	3401      	adds	r4, #1
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d12:	3a30      	subs	r2, #48	; 0x30
 8007d14:	2a09      	cmp	r2, #9
 8007d16:	d903      	bls.n	8007d20 <_svfiprintf_r+0x1a8>
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0c5      	beq.n	8007ca8 <_svfiprintf_r+0x130>
 8007d1c:	9105      	str	r1, [sp, #20]
 8007d1e:	e7c3      	b.n	8007ca8 <_svfiprintf_r+0x130>
 8007d20:	4604      	mov	r4, r0
 8007d22:	2301      	movs	r3, #1
 8007d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d28:	e7f0      	b.n	8007d0c <_svfiprintf_r+0x194>
 8007d2a:	ab03      	add	r3, sp, #12
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	462a      	mov	r2, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	4b0f      	ldr	r3, [pc, #60]	; (8007d70 <_svfiprintf_r+0x1f8>)
 8007d34:	a904      	add	r1, sp, #16
 8007d36:	f7fd ffc3 	bl	8005cc0 <_printf_float>
 8007d3a:	1c42      	adds	r2, r0, #1
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	d1d6      	bne.n	8007cee <_svfiprintf_r+0x176>
 8007d40:	89ab      	ldrh	r3, [r5, #12]
 8007d42:	065b      	lsls	r3, r3, #25
 8007d44:	f53f af2c 	bmi.w	8007ba0 <_svfiprintf_r+0x28>
 8007d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d4a:	b01d      	add	sp, #116	; 0x74
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	ab03      	add	r3, sp, #12
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	462a      	mov	r2, r5
 8007d56:	4638      	mov	r0, r7
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <_svfiprintf_r+0x1f8>)
 8007d5a:	a904      	add	r1, sp, #16
 8007d5c:	f7fe fa4c 	bl	80061f8 <_printf_i>
 8007d60:	e7eb      	b.n	8007d3a <_svfiprintf_r+0x1c2>
 8007d62:	bf00      	nop
 8007d64:	0800995c 	.word	0x0800995c
 8007d68:	08009966 	.word	0x08009966
 8007d6c:	08005cc1 	.word	0x08005cc1
 8007d70:	08007ac1 	.word	0x08007ac1
 8007d74:	08009962 	.word	0x08009962

08007d78 <_sbrk_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4d05      	ldr	r5, [pc, #20]	; (8007d94 <_sbrk_r+0x1c>)
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	602b      	str	r3, [r5, #0]
 8007d84:	f7fb f8e8 	bl	8002f58 <_sbrk>
 8007d88:	1c43      	adds	r3, r0, #1
 8007d8a:	d102      	bne.n	8007d92 <_sbrk_r+0x1a>
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	b103      	cbz	r3, 8007d92 <_sbrk_r+0x1a>
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	20000824 	.word	0x20000824

08007d98 <__assert_func>:
 8007d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <__assert_func+0x2c>)
 8007da0:	4605      	mov	r5, r0
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68d8      	ldr	r0, [r3, #12]
 8007da6:	b14c      	cbz	r4, 8007dbc <__assert_func+0x24>
 8007da8:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <__assert_func+0x30>)
 8007daa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dae:	9100      	str	r1, [sp, #0]
 8007db0:	462b      	mov	r3, r5
 8007db2:	4906      	ldr	r1, [pc, #24]	; (8007dcc <__assert_func+0x34>)
 8007db4:	f000 f80e 	bl	8007dd4 <fiprintf>
 8007db8:	f000 faa2 	bl	8008300 <abort>
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <__assert_func+0x38>)
 8007dbe:	461c      	mov	r4, r3
 8007dc0:	e7f3      	b.n	8007daa <__assert_func+0x12>
 8007dc2:	bf00      	nop
 8007dc4:	2000001c 	.word	0x2000001c
 8007dc8:	0800996d 	.word	0x0800996d
 8007dcc:	0800997a 	.word	0x0800997a
 8007dd0:	080099a8 	.word	0x080099a8

08007dd4 <fiprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	b503      	push	{r0, r1, lr}
 8007dd8:	4601      	mov	r1, r0
 8007dda:	ab03      	add	r3, sp, #12
 8007ddc:	4805      	ldr	r0, [pc, #20]	; (8007df4 <fiprintf+0x20>)
 8007dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8007de2:	6800      	ldr	r0, [r0, #0]
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	f000 f88d 	bl	8007f04 <_vfiprintf_r>
 8007dea:	b002      	add	sp, #8
 8007dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df0:	b003      	add	sp, #12
 8007df2:	4770      	bx	lr
 8007df4:	2000001c 	.word	0x2000001c

08007df8 <__ascii_mbtowc>:
 8007df8:	b082      	sub	sp, #8
 8007dfa:	b901      	cbnz	r1, 8007dfe <__ascii_mbtowc+0x6>
 8007dfc:	a901      	add	r1, sp, #4
 8007dfe:	b142      	cbz	r2, 8007e12 <__ascii_mbtowc+0x1a>
 8007e00:	b14b      	cbz	r3, 8007e16 <__ascii_mbtowc+0x1e>
 8007e02:	7813      	ldrb	r3, [r2, #0]
 8007e04:	600b      	str	r3, [r1, #0]
 8007e06:	7812      	ldrb	r2, [r2, #0]
 8007e08:	1e10      	subs	r0, r2, #0
 8007e0a:	bf18      	it	ne
 8007e0c:	2001      	movne	r0, #1
 8007e0e:	b002      	add	sp, #8
 8007e10:	4770      	bx	lr
 8007e12:	4610      	mov	r0, r2
 8007e14:	e7fb      	b.n	8007e0e <__ascii_mbtowc+0x16>
 8007e16:	f06f 0001 	mvn.w	r0, #1
 8007e1a:	e7f8      	b.n	8007e0e <__ascii_mbtowc+0x16>

08007e1c <memmove>:
 8007e1c:	4288      	cmp	r0, r1
 8007e1e:	b510      	push	{r4, lr}
 8007e20:	eb01 0402 	add.w	r4, r1, r2
 8007e24:	d902      	bls.n	8007e2c <memmove+0x10>
 8007e26:	4284      	cmp	r4, r0
 8007e28:	4623      	mov	r3, r4
 8007e2a:	d807      	bhi.n	8007e3c <memmove+0x20>
 8007e2c:	1e43      	subs	r3, r0, #1
 8007e2e:	42a1      	cmp	r1, r4
 8007e30:	d008      	beq.n	8007e44 <memmove+0x28>
 8007e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e3a:	e7f8      	b.n	8007e2e <memmove+0x12>
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4402      	add	r2, r0
 8007e40:	428a      	cmp	r2, r1
 8007e42:	d100      	bne.n	8007e46 <memmove+0x2a>
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e4e:	e7f7      	b.n	8007e40 <memmove+0x24>

08007e50 <__malloc_lock>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__malloc_lock+0x8>)
 8007e52:	f000 bc15 	b.w	8008680 <__retarget_lock_acquire_recursive>
 8007e56:	bf00      	nop
 8007e58:	2000082c 	.word	0x2000082c

08007e5c <__malloc_unlock>:
 8007e5c:	4801      	ldr	r0, [pc, #4]	; (8007e64 <__malloc_unlock+0x8>)
 8007e5e:	f000 bc10 	b.w	8008682 <__retarget_lock_release_recursive>
 8007e62:	bf00      	nop
 8007e64:	2000082c 	.word	0x2000082c

08007e68 <_realloc_r>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	4607      	mov	r7, r0
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	460e      	mov	r6, r1
 8007e70:	b921      	cbnz	r1, 8007e7c <_realloc_r+0x14>
 8007e72:	4611      	mov	r1, r2
 8007e74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e78:	f7ff bdc8 	b.w	8007a0c <_malloc_r>
 8007e7c:	b922      	cbnz	r2, 8007e88 <_realloc_r+0x20>
 8007e7e:	f7ff fd79 	bl	8007974 <_free_r>
 8007e82:	4625      	mov	r5, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e88:	f000 fc60 	bl	800874c <_malloc_usable_size_r>
 8007e8c:	42a0      	cmp	r0, r4
 8007e8e:	d20f      	bcs.n	8007eb0 <_realloc_r+0x48>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff fdba 	bl	8007a0c <_malloc_r>
 8007e98:	4605      	mov	r5, r0
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d0f2      	beq.n	8007e84 <_realloc_r+0x1c>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	f7ff f9c9 	bl	8007238 <memcpy>
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff fd63 	bl	8007974 <_free_r>
 8007eae:	e7e9      	b.n	8007e84 <_realloc_r+0x1c>
 8007eb0:	4635      	mov	r5, r6
 8007eb2:	e7e7      	b.n	8007e84 <_realloc_r+0x1c>

08007eb4 <__sfputc_r>:
 8007eb4:	6893      	ldr	r3, [r2, #8]
 8007eb6:	b410      	push	{r4}
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	6093      	str	r3, [r2, #8]
 8007ebe:	da07      	bge.n	8007ed0 <__sfputc_r+0x1c>
 8007ec0:	6994      	ldr	r4, [r2, #24]
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	db01      	blt.n	8007eca <__sfputc_r+0x16>
 8007ec6:	290a      	cmp	r1, #10
 8007ec8:	d102      	bne.n	8007ed0 <__sfputc_r+0x1c>
 8007eca:	bc10      	pop	{r4}
 8007ecc:	f000 b94a 	b.w	8008164 <__swbuf_r>
 8007ed0:	6813      	ldr	r3, [r2, #0]
 8007ed2:	1c58      	adds	r0, r3, #1
 8007ed4:	6010      	str	r0, [r2, #0]
 8007ed6:	7019      	strb	r1, [r3, #0]
 8007ed8:	4608      	mov	r0, r1
 8007eda:	bc10      	pop	{r4}
 8007edc:	4770      	bx	lr

08007ede <__sfputs_r>:
 8007ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	460f      	mov	r7, r1
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	18d5      	adds	r5, r2, r3
 8007ee8:	42ac      	cmp	r4, r5
 8007eea:	d101      	bne.n	8007ef0 <__sfputs_r+0x12>
 8007eec:	2000      	movs	r0, #0
 8007eee:	e007      	b.n	8007f00 <__sfputs_r+0x22>
 8007ef0:	463a      	mov	r2, r7
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef8:	f7ff ffdc 	bl	8007eb4 <__sfputc_r>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d1f3      	bne.n	8007ee8 <__sfputs_r+0xa>
 8007f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f04 <_vfiprintf_r>:
 8007f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	460d      	mov	r5, r1
 8007f0a:	4614      	mov	r4, r2
 8007f0c:	4698      	mov	r8, r3
 8007f0e:	4606      	mov	r6, r0
 8007f10:	b09d      	sub	sp, #116	; 0x74
 8007f12:	b118      	cbz	r0, 8007f1c <_vfiprintf_r+0x18>
 8007f14:	6983      	ldr	r3, [r0, #24]
 8007f16:	b90b      	cbnz	r3, 8007f1c <_vfiprintf_r+0x18>
 8007f18:	f000 fb14 	bl	8008544 <__sinit>
 8007f1c:	4b89      	ldr	r3, [pc, #548]	; (8008144 <_vfiprintf_r+0x240>)
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	d11b      	bne.n	8007f5a <_vfiprintf_r+0x56>
 8007f22:	6875      	ldr	r5, [r6, #4]
 8007f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d405      	bmi.n	8007f36 <_vfiprintf_r+0x32>
 8007f2a:	89ab      	ldrh	r3, [r5, #12]
 8007f2c:	059a      	lsls	r2, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_vfiprintf_r+0x32>
 8007f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f32:	f000 fba5 	bl	8008680 <__retarget_lock_acquire_recursive>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	071b      	lsls	r3, r3, #28
 8007f3a:	d501      	bpl.n	8007f40 <_vfiprintf_r+0x3c>
 8007f3c:	692b      	ldr	r3, [r5, #16]
 8007f3e:	b9eb      	cbnz	r3, 8007f7c <_vfiprintf_r+0x78>
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 f96e 	bl	8008224 <__swsetup_r>
 8007f48:	b1c0      	cbz	r0, 8007f7c <_vfiprintf_r+0x78>
 8007f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f4c:	07dc      	lsls	r4, r3, #31
 8007f4e:	d50e      	bpl.n	8007f6e <_vfiprintf_r+0x6a>
 8007f50:	f04f 30ff 	mov.w	r0, #4294967295
 8007f54:	b01d      	add	sp, #116	; 0x74
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	4b7b      	ldr	r3, [pc, #492]	; (8008148 <_vfiprintf_r+0x244>)
 8007f5c:	429d      	cmp	r5, r3
 8007f5e:	d101      	bne.n	8007f64 <_vfiprintf_r+0x60>
 8007f60:	68b5      	ldr	r5, [r6, #8]
 8007f62:	e7df      	b.n	8007f24 <_vfiprintf_r+0x20>
 8007f64:	4b79      	ldr	r3, [pc, #484]	; (800814c <_vfiprintf_r+0x248>)
 8007f66:	429d      	cmp	r5, r3
 8007f68:	bf08      	it	eq
 8007f6a:	68f5      	ldreq	r5, [r6, #12]
 8007f6c:	e7da      	b.n	8007f24 <_vfiprintf_r+0x20>
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	0598      	lsls	r0, r3, #22
 8007f72:	d4ed      	bmi.n	8007f50 <_vfiprintf_r+0x4c>
 8007f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f76:	f000 fb84 	bl	8008682 <__retarget_lock_release_recursive>
 8007f7a:	e7e9      	b.n	8007f50 <_vfiprintf_r+0x4c>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f80:	2320      	movs	r3, #32
 8007f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f86:	2330      	movs	r3, #48	; 0x30
 8007f88:	f04f 0901 	mov.w	r9, #1
 8007f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008150 <_vfiprintf_r+0x24c>
 8007f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f98:	4623      	mov	r3, r4
 8007f9a:	469a      	mov	sl, r3
 8007f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fa0:	b10a      	cbz	r2, 8007fa6 <_vfiprintf_r+0xa2>
 8007fa2:	2a25      	cmp	r2, #37	; 0x25
 8007fa4:	d1f9      	bne.n	8007f9a <_vfiprintf_r+0x96>
 8007fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8007faa:	d00b      	beq.n	8007fc4 <_vfiprintf_r+0xc0>
 8007fac:	465b      	mov	r3, fp
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f7ff ff93 	bl	8007ede <__sfputs_r>
 8007fb8:	3001      	adds	r0, #1
 8007fba:	f000 80aa 	beq.w	8008112 <_vfiprintf_r+0x20e>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fc0:	445a      	add	r2, fp
 8007fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 80a2 	beq.w	8008112 <_vfiprintf_r+0x20e>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd8:	f10a 0a01 	add.w	sl, sl, #1
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	9307      	str	r3, [sp, #28]
 8007fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2205      	movs	r2, #5
 8007fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fee:	4858      	ldr	r0, [pc, #352]	; (8008150 <_vfiprintf_r+0x24c>)
 8007ff0:	f7ff f914 	bl	800721c <memchr>
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	b9d8      	cbnz	r0, 8008030 <_vfiprintf_r+0x12c>
 8007ff8:	06d1      	lsls	r1, r2, #27
 8007ffa:	bf44      	itt	mi
 8007ffc:	2320      	movmi	r3, #32
 8007ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008002:	0713      	lsls	r3, r2, #28
 8008004:	bf44      	itt	mi
 8008006:	232b      	movmi	r3, #43	; 0x2b
 8008008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800800c:	f89a 3000 	ldrb.w	r3, [sl]
 8008010:	2b2a      	cmp	r3, #42	; 0x2a
 8008012:	d015      	beq.n	8008040 <_vfiprintf_r+0x13c>
 8008014:	4654      	mov	r4, sl
 8008016:	2000      	movs	r0, #0
 8008018:	f04f 0c0a 	mov.w	ip, #10
 800801c:	9a07      	ldr	r2, [sp, #28]
 800801e:	4621      	mov	r1, r4
 8008020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008024:	3b30      	subs	r3, #48	; 0x30
 8008026:	2b09      	cmp	r3, #9
 8008028:	d94e      	bls.n	80080c8 <_vfiprintf_r+0x1c4>
 800802a:	b1b0      	cbz	r0, 800805a <_vfiprintf_r+0x156>
 800802c:	9207      	str	r2, [sp, #28]
 800802e:	e014      	b.n	800805a <_vfiprintf_r+0x156>
 8008030:	eba0 0308 	sub.w	r3, r0, r8
 8008034:	fa09 f303 	lsl.w	r3, r9, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	46a2      	mov	sl, r4
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	e7d2      	b.n	8007fe6 <_vfiprintf_r+0xe2>
 8008040:	9b03      	ldr	r3, [sp, #12]
 8008042:	1d19      	adds	r1, r3, #4
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9103      	str	r1, [sp, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	bfbb      	ittet	lt
 800804c:	425b      	neglt	r3, r3
 800804e:	f042 0202 	orrlt.w	r2, r2, #2
 8008052:	9307      	strge	r3, [sp, #28]
 8008054:	9307      	strlt	r3, [sp, #28]
 8008056:	bfb8      	it	lt
 8008058:	9204      	strlt	r2, [sp, #16]
 800805a:	7823      	ldrb	r3, [r4, #0]
 800805c:	2b2e      	cmp	r3, #46	; 0x2e
 800805e:	d10c      	bne.n	800807a <_vfiprintf_r+0x176>
 8008060:	7863      	ldrb	r3, [r4, #1]
 8008062:	2b2a      	cmp	r3, #42	; 0x2a
 8008064:	d135      	bne.n	80080d2 <_vfiprintf_r+0x1ce>
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	3402      	adds	r4, #2
 800806a:	1d1a      	adds	r2, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9203      	str	r2, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfb8      	it	lt
 8008074:	f04f 33ff 	movlt.w	r3, #4294967295
 8008078:	9305      	str	r3, [sp, #20]
 800807a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008160 <_vfiprintf_r+0x25c>
 800807e:	2203      	movs	r2, #3
 8008080:	4650      	mov	r0, sl
 8008082:	7821      	ldrb	r1, [r4, #0]
 8008084:	f7ff f8ca 	bl	800721c <memchr>
 8008088:	b140      	cbz	r0, 800809c <_vfiprintf_r+0x198>
 800808a:	2340      	movs	r3, #64	; 0x40
 800808c:	eba0 000a 	sub.w	r0, r0, sl
 8008090:	fa03 f000 	lsl.w	r0, r3, r0
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	3401      	adds	r4, #1
 8008098:	4303      	orrs	r3, r0
 800809a:	9304      	str	r3, [sp, #16]
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	2206      	movs	r2, #6
 80080a2:	482c      	ldr	r0, [pc, #176]	; (8008154 <_vfiprintf_r+0x250>)
 80080a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080a8:	f7ff f8b8 	bl	800721c <memchr>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d03f      	beq.n	8008130 <_vfiprintf_r+0x22c>
 80080b0:	4b29      	ldr	r3, [pc, #164]	; (8008158 <_vfiprintf_r+0x254>)
 80080b2:	bb1b      	cbnz	r3, 80080fc <_vfiprintf_r+0x1f8>
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	3307      	adds	r3, #7
 80080b8:	f023 0307 	bic.w	r3, r3, #7
 80080bc:	3308      	adds	r3, #8
 80080be:	9303      	str	r3, [sp, #12]
 80080c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c2:	443b      	add	r3, r7
 80080c4:	9309      	str	r3, [sp, #36]	; 0x24
 80080c6:	e767      	b.n	8007f98 <_vfiprintf_r+0x94>
 80080c8:	460c      	mov	r4, r1
 80080ca:	2001      	movs	r0, #1
 80080cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80080d0:	e7a5      	b.n	800801e <_vfiprintf_r+0x11a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f04f 0c0a 	mov.w	ip, #10
 80080d8:	4619      	mov	r1, r3
 80080da:	3401      	adds	r4, #1
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	4620      	mov	r0, r4
 80080e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080e4:	3a30      	subs	r2, #48	; 0x30
 80080e6:	2a09      	cmp	r2, #9
 80080e8:	d903      	bls.n	80080f2 <_vfiprintf_r+0x1ee>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0c5      	beq.n	800807a <_vfiprintf_r+0x176>
 80080ee:	9105      	str	r1, [sp, #20]
 80080f0:	e7c3      	b.n	800807a <_vfiprintf_r+0x176>
 80080f2:	4604      	mov	r4, r0
 80080f4:	2301      	movs	r3, #1
 80080f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080fa:	e7f0      	b.n	80080de <_vfiprintf_r+0x1da>
 80080fc:	ab03      	add	r3, sp, #12
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	462a      	mov	r2, r5
 8008102:	4630      	mov	r0, r6
 8008104:	4b15      	ldr	r3, [pc, #84]	; (800815c <_vfiprintf_r+0x258>)
 8008106:	a904      	add	r1, sp, #16
 8008108:	f7fd fdda 	bl	8005cc0 <_printf_float>
 800810c:	4607      	mov	r7, r0
 800810e:	1c78      	adds	r0, r7, #1
 8008110:	d1d6      	bne.n	80080c0 <_vfiprintf_r+0x1bc>
 8008112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008114:	07d9      	lsls	r1, r3, #31
 8008116:	d405      	bmi.n	8008124 <_vfiprintf_r+0x220>
 8008118:	89ab      	ldrh	r3, [r5, #12]
 800811a:	059a      	lsls	r2, r3, #22
 800811c:	d402      	bmi.n	8008124 <_vfiprintf_r+0x220>
 800811e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008120:	f000 faaf 	bl	8008682 <__retarget_lock_release_recursive>
 8008124:	89ab      	ldrh	r3, [r5, #12]
 8008126:	065b      	lsls	r3, r3, #25
 8008128:	f53f af12 	bmi.w	8007f50 <_vfiprintf_r+0x4c>
 800812c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800812e:	e711      	b.n	8007f54 <_vfiprintf_r+0x50>
 8008130:	ab03      	add	r3, sp, #12
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	462a      	mov	r2, r5
 8008136:	4630      	mov	r0, r6
 8008138:	4b08      	ldr	r3, [pc, #32]	; (800815c <_vfiprintf_r+0x258>)
 800813a:	a904      	add	r1, sp, #16
 800813c:	f7fe f85c 	bl	80061f8 <_printf_i>
 8008140:	e7e4      	b.n	800810c <_vfiprintf_r+0x208>
 8008142:	bf00      	nop
 8008144:	08009ad4 	.word	0x08009ad4
 8008148:	08009af4 	.word	0x08009af4
 800814c:	08009ab4 	.word	0x08009ab4
 8008150:	0800995c 	.word	0x0800995c
 8008154:	08009966 	.word	0x08009966
 8008158:	08005cc1 	.word	0x08005cc1
 800815c:	08007edf 	.word	0x08007edf
 8008160:	08009962 	.word	0x08009962

08008164 <__swbuf_r>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	460e      	mov	r6, r1
 8008168:	4614      	mov	r4, r2
 800816a:	4605      	mov	r5, r0
 800816c:	b118      	cbz	r0, 8008176 <__swbuf_r+0x12>
 800816e:	6983      	ldr	r3, [r0, #24]
 8008170:	b90b      	cbnz	r3, 8008176 <__swbuf_r+0x12>
 8008172:	f000 f9e7 	bl	8008544 <__sinit>
 8008176:	4b21      	ldr	r3, [pc, #132]	; (80081fc <__swbuf_r+0x98>)
 8008178:	429c      	cmp	r4, r3
 800817a:	d12b      	bne.n	80081d4 <__swbuf_r+0x70>
 800817c:	686c      	ldr	r4, [r5, #4]
 800817e:	69a3      	ldr	r3, [r4, #24]
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	89a3      	ldrh	r3, [r4, #12]
 8008184:	071a      	lsls	r2, r3, #28
 8008186:	d52f      	bpl.n	80081e8 <__swbuf_r+0x84>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b36b      	cbz	r3, 80081e8 <__swbuf_r+0x84>
 800818c:	6923      	ldr	r3, [r4, #16]
 800818e:	6820      	ldr	r0, [r4, #0]
 8008190:	b2f6      	uxtb	r6, r6
 8008192:	1ac0      	subs	r0, r0, r3
 8008194:	6963      	ldr	r3, [r4, #20]
 8008196:	4637      	mov	r7, r6
 8008198:	4283      	cmp	r3, r0
 800819a:	dc04      	bgt.n	80081a6 <__swbuf_r+0x42>
 800819c:	4621      	mov	r1, r4
 800819e:	4628      	mov	r0, r5
 80081a0:	f000 f93c 	bl	800841c <_fflush_r>
 80081a4:	bb30      	cbnz	r0, 80081f4 <__swbuf_r+0x90>
 80081a6:	68a3      	ldr	r3, [r4, #8]
 80081a8:	3001      	adds	r0, #1
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60a3      	str	r3, [r4, #8]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	6022      	str	r2, [r4, #0]
 80081b4:	701e      	strb	r6, [r3, #0]
 80081b6:	6963      	ldr	r3, [r4, #20]
 80081b8:	4283      	cmp	r3, r0
 80081ba:	d004      	beq.n	80081c6 <__swbuf_r+0x62>
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	07db      	lsls	r3, r3, #31
 80081c0:	d506      	bpl.n	80081d0 <__swbuf_r+0x6c>
 80081c2:	2e0a      	cmp	r6, #10
 80081c4:	d104      	bne.n	80081d0 <__swbuf_r+0x6c>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 f927 	bl	800841c <_fflush_r>
 80081ce:	b988      	cbnz	r0, 80081f4 <__swbuf_r+0x90>
 80081d0:	4638      	mov	r0, r7
 80081d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081d4:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <__swbuf_r+0x9c>)
 80081d6:	429c      	cmp	r4, r3
 80081d8:	d101      	bne.n	80081de <__swbuf_r+0x7a>
 80081da:	68ac      	ldr	r4, [r5, #8]
 80081dc:	e7cf      	b.n	800817e <__swbuf_r+0x1a>
 80081de:	4b09      	ldr	r3, [pc, #36]	; (8008204 <__swbuf_r+0xa0>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	bf08      	it	eq
 80081e4:	68ec      	ldreq	r4, [r5, #12]
 80081e6:	e7ca      	b.n	800817e <__swbuf_r+0x1a>
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f81a 	bl	8008224 <__swsetup_r>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0cb      	beq.n	800818c <__swbuf_r+0x28>
 80081f4:	f04f 37ff 	mov.w	r7, #4294967295
 80081f8:	e7ea      	b.n	80081d0 <__swbuf_r+0x6c>
 80081fa:	bf00      	nop
 80081fc:	08009ad4 	.word	0x08009ad4
 8008200:	08009af4 	.word	0x08009af4
 8008204:	08009ab4 	.word	0x08009ab4

08008208 <__ascii_wctomb>:
 8008208:	4603      	mov	r3, r0
 800820a:	4608      	mov	r0, r1
 800820c:	b141      	cbz	r1, 8008220 <__ascii_wctomb+0x18>
 800820e:	2aff      	cmp	r2, #255	; 0xff
 8008210:	d904      	bls.n	800821c <__ascii_wctomb+0x14>
 8008212:	228a      	movs	r2, #138	; 0x8a
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	4770      	bx	lr
 800821c:	2001      	movs	r0, #1
 800821e:	700a      	strb	r2, [r1, #0]
 8008220:	4770      	bx	lr
	...

08008224 <__swsetup_r>:
 8008224:	4b32      	ldr	r3, [pc, #200]	; (80082f0 <__swsetup_r+0xcc>)
 8008226:	b570      	push	{r4, r5, r6, lr}
 8008228:	681d      	ldr	r5, [r3, #0]
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	b125      	cbz	r5, 800823a <__swsetup_r+0x16>
 8008230:	69ab      	ldr	r3, [r5, #24]
 8008232:	b913      	cbnz	r3, 800823a <__swsetup_r+0x16>
 8008234:	4628      	mov	r0, r5
 8008236:	f000 f985 	bl	8008544 <__sinit>
 800823a:	4b2e      	ldr	r3, [pc, #184]	; (80082f4 <__swsetup_r+0xd0>)
 800823c:	429c      	cmp	r4, r3
 800823e:	d10f      	bne.n	8008260 <__swsetup_r+0x3c>
 8008240:	686c      	ldr	r4, [r5, #4]
 8008242:	89a3      	ldrh	r3, [r4, #12]
 8008244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008248:	0719      	lsls	r1, r3, #28
 800824a:	d42c      	bmi.n	80082a6 <__swsetup_r+0x82>
 800824c:	06dd      	lsls	r5, r3, #27
 800824e:	d411      	bmi.n	8008274 <__swsetup_r+0x50>
 8008250:	2309      	movs	r3, #9
 8008252:	6033      	str	r3, [r6, #0]
 8008254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	81a3      	strh	r3, [r4, #12]
 800825e:	e03e      	b.n	80082de <__swsetup_r+0xba>
 8008260:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <__swsetup_r+0xd4>)
 8008262:	429c      	cmp	r4, r3
 8008264:	d101      	bne.n	800826a <__swsetup_r+0x46>
 8008266:	68ac      	ldr	r4, [r5, #8]
 8008268:	e7eb      	b.n	8008242 <__swsetup_r+0x1e>
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <__swsetup_r+0xd8>)
 800826c:	429c      	cmp	r4, r3
 800826e:	bf08      	it	eq
 8008270:	68ec      	ldreq	r4, [r5, #12]
 8008272:	e7e6      	b.n	8008242 <__swsetup_r+0x1e>
 8008274:	0758      	lsls	r0, r3, #29
 8008276:	d512      	bpl.n	800829e <__swsetup_r+0x7a>
 8008278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800827a:	b141      	cbz	r1, 800828e <__swsetup_r+0x6a>
 800827c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__swsetup_r+0x66>
 8008284:	4630      	mov	r0, r6
 8008286:	f7ff fb75 	bl	8007974 <_free_r>
 800828a:	2300      	movs	r3, #0
 800828c:	6363      	str	r3, [r4, #52]	; 0x34
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	2300      	movs	r3, #0
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	89a3      	ldrh	r3, [r4, #12]
 80082a0:	f043 0308 	orr.w	r3, r3, #8
 80082a4:	81a3      	strh	r3, [r4, #12]
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	b94b      	cbnz	r3, 80082be <__swsetup_r+0x9a>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b4:	d003      	beq.n	80082be <__swsetup_r+0x9a>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 fa07 	bl	80086cc <__smakebuf_r>
 80082be:	89a0      	ldrh	r0, [r4, #12]
 80082c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082c4:	f010 0301 	ands.w	r3, r0, #1
 80082c8:	d00a      	beq.n	80082e0 <__swsetup_r+0xbc>
 80082ca:	2300      	movs	r3, #0
 80082cc:	60a3      	str	r3, [r4, #8]
 80082ce:	6963      	ldr	r3, [r4, #20]
 80082d0:	425b      	negs	r3, r3
 80082d2:	61a3      	str	r3, [r4, #24]
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	b943      	cbnz	r3, 80082ea <__swsetup_r+0xc6>
 80082d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082dc:	d1ba      	bne.n	8008254 <__swsetup_r+0x30>
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	0781      	lsls	r1, r0, #30
 80082e2:	bf58      	it	pl
 80082e4:	6963      	ldrpl	r3, [r4, #20]
 80082e6:	60a3      	str	r3, [r4, #8]
 80082e8:	e7f4      	b.n	80082d4 <__swsetup_r+0xb0>
 80082ea:	2000      	movs	r0, #0
 80082ec:	e7f7      	b.n	80082de <__swsetup_r+0xba>
 80082ee:	bf00      	nop
 80082f0:	2000001c 	.word	0x2000001c
 80082f4:	08009ad4 	.word	0x08009ad4
 80082f8:	08009af4 	.word	0x08009af4
 80082fc:	08009ab4 	.word	0x08009ab4

08008300 <abort>:
 8008300:	2006      	movs	r0, #6
 8008302:	b508      	push	{r3, lr}
 8008304:	f000 fa52 	bl	80087ac <raise>
 8008308:	2001      	movs	r0, #1
 800830a:	f7fa fdce 	bl	8002eaa <_exit>
	...

08008310 <__sflush_r>:
 8008310:	898a      	ldrh	r2, [r1, #12]
 8008312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	4605      	mov	r5, r0
 8008318:	0710      	lsls	r0, r2, #28
 800831a:	460c      	mov	r4, r1
 800831c:	d458      	bmi.n	80083d0 <__sflush_r+0xc0>
 800831e:	684b      	ldr	r3, [r1, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc05      	bgt.n	8008330 <__sflush_r+0x20>
 8008324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008326:	2b00      	cmp	r3, #0
 8008328:	dc02      	bgt.n	8008330 <__sflush_r+0x20>
 800832a:	2000      	movs	r0, #0
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	2e00      	cmp	r6, #0
 8008334:	d0f9      	beq.n	800832a <__sflush_r+0x1a>
 8008336:	2300      	movs	r3, #0
 8008338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800833c:	682f      	ldr	r7, [r5, #0]
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	d032      	beq.n	80083a8 <__sflush_r+0x98>
 8008342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	075a      	lsls	r2, r3, #29
 8008348:	d505      	bpl.n	8008356 <__sflush_r+0x46>
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	1ac0      	subs	r0, r0, r3
 800834e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008350:	b10b      	cbz	r3, 8008356 <__sflush_r+0x46>
 8008352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008354:	1ac0      	subs	r0, r0, r3
 8008356:	2300      	movs	r3, #0
 8008358:	4602      	mov	r2, r0
 800835a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835c:	4628      	mov	r0, r5
 800835e:	6a21      	ldr	r1, [r4, #32]
 8008360:	47b0      	blx	r6
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	d106      	bne.n	8008376 <__sflush_r+0x66>
 8008368:	6829      	ldr	r1, [r5, #0]
 800836a:	291d      	cmp	r1, #29
 800836c:	d82c      	bhi.n	80083c8 <__sflush_r+0xb8>
 800836e:	4a2a      	ldr	r2, [pc, #168]	; (8008418 <__sflush_r+0x108>)
 8008370:	40ca      	lsrs	r2, r1
 8008372:	07d6      	lsls	r6, r2, #31
 8008374:	d528      	bpl.n	80083c8 <__sflush_r+0xb8>
 8008376:	2200      	movs	r2, #0
 8008378:	6062      	str	r2, [r4, #4]
 800837a:	6922      	ldr	r2, [r4, #16]
 800837c:	04d9      	lsls	r1, r3, #19
 800837e:	6022      	str	r2, [r4, #0]
 8008380:	d504      	bpl.n	800838c <__sflush_r+0x7c>
 8008382:	1c42      	adds	r2, r0, #1
 8008384:	d101      	bne.n	800838a <__sflush_r+0x7a>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b903      	cbnz	r3, 800838c <__sflush_r+0x7c>
 800838a:	6560      	str	r0, [r4, #84]	; 0x54
 800838c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800838e:	602f      	str	r7, [r5, #0]
 8008390:	2900      	cmp	r1, #0
 8008392:	d0ca      	beq.n	800832a <__sflush_r+0x1a>
 8008394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008398:	4299      	cmp	r1, r3
 800839a:	d002      	beq.n	80083a2 <__sflush_r+0x92>
 800839c:	4628      	mov	r0, r5
 800839e:	f7ff fae9 	bl	8007974 <_free_r>
 80083a2:	2000      	movs	r0, #0
 80083a4:	6360      	str	r0, [r4, #52]	; 0x34
 80083a6:	e7c1      	b.n	800832c <__sflush_r+0x1c>
 80083a8:	6a21      	ldr	r1, [r4, #32]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b0      	blx	r6
 80083b0:	1c41      	adds	r1, r0, #1
 80083b2:	d1c7      	bne.n	8008344 <__sflush_r+0x34>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0c4      	beq.n	8008344 <__sflush_r+0x34>
 80083ba:	2b1d      	cmp	r3, #29
 80083bc:	d001      	beq.n	80083c2 <__sflush_r+0xb2>
 80083be:	2b16      	cmp	r3, #22
 80083c0:	d101      	bne.n	80083c6 <__sflush_r+0xb6>
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	e7b1      	b.n	800832a <__sflush_r+0x1a>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	e7ad      	b.n	800832c <__sflush_r+0x1c>
 80083d0:	690f      	ldr	r7, [r1, #16]
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	d0a9      	beq.n	800832a <__sflush_r+0x1a>
 80083d6:	0793      	lsls	r3, r2, #30
 80083d8:	bf18      	it	ne
 80083da:	2300      	movne	r3, #0
 80083dc:	680e      	ldr	r6, [r1, #0]
 80083de:	bf08      	it	eq
 80083e0:	694b      	ldreq	r3, [r1, #20]
 80083e2:	eba6 0807 	sub.w	r8, r6, r7
 80083e6:	600f      	str	r7, [r1, #0]
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	f1b8 0f00 	cmp.w	r8, #0
 80083ee:	dd9c      	ble.n	800832a <__sflush_r+0x1a>
 80083f0:	4643      	mov	r3, r8
 80083f2:	463a      	mov	r2, r7
 80083f4:	4628      	mov	r0, r5
 80083f6:	6a21      	ldr	r1, [r4, #32]
 80083f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083fa:	47b0      	blx	r6
 80083fc:	2800      	cmp	r0, #0
 80083fe:	dc06      	bgt.n	800840e <__sflush_r+0xfe>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f04f 30ff 	mov.w	r0, #4294967295
 8008406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	e78e      	b.n	800832c <__sflush_r+0x1c>
 800840e:	4407      	add	r7, r0
 8008410:	eba8 0800 	sub.w	r8, r8, r0
 8008414:	e7e9      	b.n	80083ea <__sflush_r+0xda>
 8008416:	bf00      	nop
 8008418:	20400001 	.word	0x20400001

0800841c <_fflush_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	4605      	mov	r5, r0
 8008422:	460c      	mov	r4, r1
 8008424:	b913      	cbnz	r3, 800842c <_fflush_r+0x10>
 8008426:	2500      	movs	r5, #0
 8008428:	4628      	mov	r0, r5
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	b118      	cbz	r0, 8008436 <_fflush_r+0x1a>
 800842e:	6983      	ldr	r3, [r0, #24]
 8008430:	b90b      	cbnz	r3, 8008436 <_fflush_r+0x1a>
 8008432:	f000 f887 	bl	8008544 <__sinit>
 8008436:	4b14      	ldr	r3, [pc, #80]	; (8008488 <_fflush_r+0x6c>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d11b      	bne.n	8008474 <_fflush_r+0x58>
 800843c:	686c      	ldr	r4, [r5, #4]
 800843e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0ef      	beq.n	8008426 <_fflush_r+0xa>
 8008446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008448:	07d0      	lsls	r0, r2, #31
 800844a:	d404      	bmi.n	8008456 <_fflush_r+0x3a>
 800844c:	0599      	lsls	r1, r3, #22
 800844e:	d402      	bmi.n	8008456 <_fflush_r+0x3a>
 8008450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008452:	f000 f915 	bl	8008680 <__retarget_lock_acquire_recursive>
 8008456:	4628      	mov	r0, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7ff ff59 	bl	8008310 <__sflush_r>
 800845e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008460:	4605      	mov	r5, r0
 8008462:	07da      	lsls	r2, r3, #31
 8008464:	d4e0      	bmi.n	8008428 <_fflush_r+0xc>
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	059b      	lsls	r3, r3, #22
 800846a:	d4dd      	bmi.n	8008428 <_fflush_r+0xc>
 800846c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800846e:	f000 f908 	bl	8008682 <__retarget_lock_release_recursive>
 8008472:	e7d9      	b.n	8008428 <_fflush_r+0xc>
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <_fflush_r+0x70>)
 8008476:	429c      	cmp	r4, r3
 8008478:	d101      	bne.n	800847e <_fflush_r+0x62>
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	e7df      	b.n	800843e <_fflush_r+0x22>
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <_fflush_r+0x74>)
 8008480:	429c      	cmp	r4, r3
 8008482:	bf08      	it	eq
 8008484:	68ec      	ldreq	r4, [r5, #12]
 8008486:	e7da      	b.n	800843e <_fflush_r+0x22>
 8008488:	08009ad4 	.word	0x08009ad4
 800848c:	08009af4 	.word	0x08009af4
 8008490:	08009ab4 	.word	0x08009ab4

08008494 <std>:
 8008494:	2300      	movs	r3, #0
 8008496:	b510      	push	{r4, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	e9c0 3300 	strd	r3, r3, [r0]
 800849e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084a2:	6083      	str	r3, [r0, #8]
 80084a4:	8181      	strh	r1, [r0, #12]
 80084a6:	6643      	str	r3, [r0, #100]	; 0x64
 80084a8:	81c2      	strh	r2, [r0, #14]
 80084aa:	6183      	str	r3, [r0, #24]
 80084ac:	4619      	mov	r1, r3
 80084ae:	2208      	movs	r2, #8
 80084b0:	305c      	adds	r0, #92	; 0x5c
 80084b2:	f7fd fb5f 	bl	8005b74 <memset>
 80084b6:	4b05      	ldr	r3, [pc, #20]	; (80084cc <std+0x38>)
 80084b8:	6224      	str	r4, [r4, #32]
 80084ba:	6263      	str	r3, [r4, #36]	; 0x24
 80084bc:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <std+0x3c>)
 80084be:	62a3      	str	r3, [r4, #40]	; 0x28
 80084c0:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <std+0x40>)
 80084c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <std+0x44>)
 80084c6:	6323      	str	r3, [r4, #48]	; 0x30
 80084c8:	bd10      	pop	{r4, pc}
 80084ca:	bf00      	nop
 80084cc:	080087e5 	.word	0x080087e5
 80084d0:	08008807 	.word	0x08008807
 80084d4:	0800883f 	.word	0x0800883f
 80084d8:	08008863 	.word	0x08008863

080084dc <_cleanup_r>:
 80084dc:	4901      	ldr	r1, [pc, #4]	; (80084e4 <_cleanup_r+0x8>)
 80084de:	f000 b8af 	b.w	8008640 <_fwalk_reent>
 80084e2:	bf00      	nop
 80084e4:	0800841d 	.word	0x0800841d

080084e8 <__sfmoreglue>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	2568      	movs	r5, #104	; 0x68
 80084ec:	1e4a      	subs	r2, r1, #1
 80084ee:	4355      	muls	r5, r2
 80084f0:	460e      	mov	r6, r1
 80084f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084f6:	f7ff fa89 	bl	8007a0c <_malloc_r>
 80084fa:	4604      	mov	r4, r0
 80084fc:	b140      	cbz	r0, 8008510 <__sfmoreglue+0x28>
 80084fe:	2100      	movs	r1, #0
 8008500:	e9c0 1600 	strd	r1, r6, [r0]
 8008504:	300c      	adds	r0, #12
 8008506:	60a0      	str	r0, [r4, #8]
 8008508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800850c:	f7fd fb32 	bl	8005b74 <memset>
 8008510:	4620      	mov	r0, r4
 8008512:	bd70      	pop	{r4, r5, r6, pc}

08008514 <__sfp_lock_acquire>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sfp_lock_acquire+0x8>)
 8008516:	f000 b8b3 	b.w	8008680 <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	20000830 	.word	0x20000830

08008520 <__sfp_lock_release>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sfp_lock_release+0x8>)
 8008522:	f000 b8ae 	b.w	8008682 <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	20000830 	.word	0x20000830

0800852c <__sinit_lock_acquire>:
 800852c:	4801      	ldr	r0, [pc, #4]	; (8008534 <__sinit_lock_acquire+0x8>)
 800852e:	f000 b8a7 	b.w	8008680 <__retarget_lock_acquire_recursive>
 8008532:	bf00      	nop
 8008534:	2000082b 	.word	0x2000082b

08008538 <__sinit_lock_release>:
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <__sinit_lock_release+0x8>)
 800853a:	f000 b8a2 	b.w	8008682 <__retarget_lock_release_recursive>
 800853e:	bf00      	nop
 8008540:	2000082b 	.word	0x2000082b

08008544 <__sinit>:
 8008544:	b510      	push	{r4, lr}
 8008546:	4604      	mov	r4, r0
 8008548:	f7ff fff0 	bl	800852c <__sinit_lock_acquire>
 800854c:	69a3      	ldr	r3, [r4, #24]
 800854e:	b11b      	cbz	r3, 8008558 <__sinit+0x14>
 8008550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008554:	f7ff bff0 	b.w	8008538 <__sinit_lock_release>
 8008558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800855c:	6523      	str	r3, [r4, #80]	; 0x50
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <__sinit+0x68>)
 8008560:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <__sinit+0x6c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	62a2      	str	r2, [r4, #40]	; 0x28
 8008566:	42a3      	cmp	r3, r4
 8008568:	bf08      	it	eq
 800856a:	2301      	moveq	r3, #1
 800856c:	4620      	mov	r0, r4
 800856e:	bf08      	it	eq
 8008570:	61a3      	streq	r3, [r4, #24]
 8008572:	f000 f81f 	bl	80085b4 <__sfp>
 8008576:	6060      	str	r0, [r4, #4]
 8008578:	4620      	mov	r0, r4
 800857a:	f000 f81b 	bl	80085b4 <__sfp>
 800857e:	60a0      	str	r0, [r4, #8]
 8008580:	4620      	mov	r0, r4
 8008582:	f000 f817 	bl	80085b4 <__sfp>
 8008586:	2200      	movs	r2, #0
 8008588:	2104      	movs	r1, #4
 800858a:	60e0      	str	r0, [r4, #12]
 800858c:	6860      	ldr	r0, [r4, #4]
 800858e:	f7ff ff81 	bl	8008494 <std>
 8008592:	2201      	movs	r2, #1
 8008594:	2109      	movs	r1, #9
 8008596:	68a0      	ldr	r0, [r4, #8]
 8008598:	f7ff ff7c 	bl	8008494 <std>
 800859c:	2202      	movs	r2, #2
 800859e:	2112      	movs	r1, #18
 80085a0:	68e0      	ldr	r0, [r4, #12]
 80085a2:	f7ff ff77 	bl	8008494 <std>
 80085a6:	2301      	movs	r3, #1
 80085a8:	61a3      	str	r3, [r4, #24]
 80085aa:	e7d1      	b.n	8008550 <__sinit+0xc>
 80085ac:	08009708 	.word	0x08009708
 80085b0:	080084dd 	.word	0x080084dd

080085b4 <__sfp>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	4607      	mov	r7, r0
 80085b8:	f7ff ffac 	bl	8008514 <__sfp_lock_acquire>
 80085bc:	4b1e      	ldr	r3, [pc, #120]	; (8008638 <__sfp+0x84>)
 80085be:	681e      	ldr	r6, [r3, #0]
 80085c0:	69b3      	ldr	r3, [r6, #24]
 80085c2:	b913      	cbnz	r3, 80085ca <__sfp+0x16>
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff ffbd 	bl	8008544 <__sinit>
 80085ca:	3648      	adds	r6, #72	; 0x48
 80085cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	d503      	bpl.n	80085dc <__sfp+0x28>
 80085d4:	6833      	ldr	r3, [r6, #0]
 80085d6:	b30b      	cbz	r3, 800861c <__sfp+0x68>
 80085d8:	6836      	ldr	r6, [r6, #0]
 80085da:	e7f7      	b.n	80085cc <__sfp+0x18>
 80085dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085e0:	b9d5      	cbnz	r5, 8008618 <__sfp+0x64>
 80085e2:	4b16      	ldr	r3, [pc, #88]	; (800863c <__sfp+0x88>)
 80085e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085e8:	60e3      	str	r3, [r4, #12]
 80085ea:	6665      	str	r5, [r4, #100]	; 0x64
 80085ec:	f000 f847 	bl	800867e <__retarget_lock_init_recursive>
 80085f0:	f7ff ff96 	bl	8008520 <__sfp_lock_release>
 80085f4:	2208      	movs	r2, #8
 80085f6:	4629      	mov	r1, r5
 80085f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008600:	6025      	str	r5, [r4, #0]
 8008602:	61a5      	str	r5, [r4, #24]
 8008604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008608:	f7fd fab4 	bl	8005b74 <memset>
 800860c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008614:	4620      	mov	r0, r4
 8008616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008618:	3468      	adds	r4, #104	; 0x68
 800861a:	e7d9      	b.n	80085d0 <__sfp+0x1c>
 800861c:	2104      	movs	r1, #4
 800861e:	4638      	mov	r0, r7
 8008620:	f7ff ff62 	bl	80084e8 <__sfmoreglue>
 8008624:	4604      	mov	r4, r0
 8008626:	6030      	str	r0, [r6, #0]
 8008628:	2800      	cmp	r0, #0
 800862a:	d1d5      	bne.n	80085d8 <__sfp+0x24>
 800862c:	f7ff ff78 	bl	8008520 <__sfp_lock_release>
 8008630:	230c      	movs	r3, #12
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	e7ee      	b.n	8008614 <__sfp+0x60>
 8008636:	bf00      	nop
 8008638:	08009708 	.word	0x08009708
 800863c:	ffff0001 	.word	0xffff0001

08008640 <_fwalk_reent>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4606      	mov	r6, r0
 8008646:	4688      	mov	r8, r1
 8008648:	2700      	movs	r7, #0
 800864a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800864e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008652:	f1b9 0901 	subs.w	r9, r9, #1
 8008656:	d505      	bpl.n	8008664 <_fwalk_reent+0x24>
 8008658:	6824      	ldr	r4, [r4, #0]
 800865a:	2c00      	cmp	r4, #0
 800865c:	d1f7      	bne.n	800864e <_fwalk_reent+0xe>
 800865e:	4638      	mov	r0, r7
 8008660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008664:	89ab      	ldrh	r3, [r5, #12]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d907      	bls.n	800867a <_fwalk_reent+0x3a>
 800866a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800866e:	3301      	adds	r3, #1
 8008670:	d003      	beq.n	800867a <_fwalk_reent+0x3a>
 8008672:	4629      	mov	r1, r5
 8008674:	4630      	mov	r0, r6
 8008676:	47c0      	blx	r8
 8008678:	4307      	orrs	r7, r0
 800867a:	3568      	adds	r5, #104	; 0x68
 800867c:	e7e9      	b.n	8008652 <_fwalk_reent+0x12>

0800867e <__retarget_lock_init_recursive>:
 800867e:	4770      	bx	lr

08008680 <__retarget_lock_acquire_recursive>:
 8008680:	4770      	bx	lr

08008682 <__retarget_lock_release_recursive>:
 8008682:	4770      	bx	lr

08008684 <__swhatbuf_r>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	460e      	mov	r6, r1
 8008688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800868c:	4614      	mov	r4, r2
 800868e:	2900      	cmp	r1, #0
 8008690:	461d      	mov	r5, r3
 8008692:	b096      	sub	sp, #88	; 0x58
 8008694:	da07      	bge.n	80086a6 <__swhatbuf_r+0x22>
 8008696:	2300      	movs	r3, #0
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	89b3      	ldrh	r3, [r6, #12]
 800869c:	061a      	lsls	r2, r3, #24
 800869e:	d410      	bmi.n	80086c2 <__swhatbuf_r+0x3e>
 80086a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086a4:	e00e      	b.n	80086c4 <__swhatbuf_r+0x40>
 80086a6:	466a      	mov	r2, sp
 80086a8:	f000 f902 	bl	80088b0 <_fstat_r>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	dbf2      	blt.n	8008696 <__swhatbuf_r+0x12>
 80086b0:	9a01      	ldr	r2, [sp, #4]
 80086b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086ba:	425a      	negs	r2, r3
 80086bc:	415a      	adcs	r2, r3
 80086be:	602a      	str	r2, [r5, #0]
 80086c0:	e7ee      	b.n	80086a0 <__swhatbuf_r+0x1c>
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	2000      	movs	r0, #0
 80086c6:	6023      	str	r3, [r4, #0]
 80086c8:	b016      	add	sp, #88	; 0x58
 80086ca:	bd70      	pop	{r4, r5, r6, pc}

080086cc <__smakebuf_r>:
 80086cc:	898b      	ldrh	r3, [r1, #12]
 80086ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086d0:	079d      	lsls	r5, r3, #30
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	d507      	bpl.n	80086e8 <__smakebuf_r+0x1c>
 80086d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	2301      	movs	r3, #1
 80086e2:	6163      	str	r3, [r4, #20]
 80086e4:	b002      	add	sp, #8
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	466a      	mov	r2, sp
 80086ea:	ab01      	add	r3, sp, #4
 80086ec:	f7ff ffca 	bl	8008684 <__swhatbuf_r>
 80086f0:	9900      	ldr	r1, [sp, #0]
 80086f2:	4605      	mov	r5, r0
 80086f4:	4630      	mov	r0, r6
 80086f6:	f7ff f989 	bl	8007a0c <_malloc_r>
 80086fa:	b948      	cbnz	r0, 8008710 <__smakebuf_r+0x44>
 80086fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008700:	059a      	lsls	r2, r3, #22
 8008702:	d4ef      	bmi.n	80086e4 <__smakebuf_r+0x18>
 8008704:	f023 0303 	bic.w	r3, r3, #3
 8008708:	f043 0302 	orr.w	r3, r3, #2
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	e7e3      	b.n	80086d8 <__smakebuf_r+0xc>
 8008710:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <__smakebuf_r+0x7c>)
 8008712:	62b3      	str	r3, [r6, #40]	; 0x28
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	6020      	str	r0, [r4, #0]
 8008718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	9b00      	ldr	r3, [sp, #0]
 8008720:	6120      	str	r0, [r4, #16]
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	9b01      	ldr	r3, [sp, #4]
 8008726:	b15b      	cbz	r3, 8008740 <__smakebuf_r+0x74>
 8008728:	4630      	mov	r0, r6
 800872a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800872e:	f000 f8d1 	bl	80088d4 <_isatty_r>
 8008732:	b128      	cbz	r0, 8008740 <__smakebuf_r+0x74>
 8008734:	89a3      	ldrh	r3, [r4, #12]
 8008736:	f023 0303 	bic.w	r3, r3, #3
 800873a:	f043 0301 	orr.w	r3, r3, #1
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	89a0      	ldrh	r0, [r4, #12]
 8008742:	4305      	orrs	r5, r0
 8008744:	81a5      	strh	r5, [r4, #12]
 8008746:	e7cd      	b.n	80086e4 <__smakebuf_r+0x18>
 8008748:	080084dd 	.word	0x080084dd

0800874c <_malloc_usable_size_r>:
 800874c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008750:	1f18      	subs	r0, r3, #4
 8008752:	2b00      	cmp	r3, #0
 8008754:	bfbc      	itt	lt
 8008756:	580b      	ldrlt	r3, [r1, r0]
 8008758:	18c0      	addlt	r0, r0, r3
 800875a:	4770      	bx	lr

0800875c <_raise_r>:
 800875c:	291f      	cmp	r1, #31
 800875e:	b538      	push	{r3, r4, r5, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	d904      	bls.n	8008770 <_raise_r+0x14>
 8008766:	2316      	movs	r3, #22
 8008768:	6003      	str	r3, [r0, #0]
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008772:	b112      	cbz	r2, 800877a <_raise_r+0x1e>
 8008774:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008778:	b94b      	cbnz	r3, 800878e <_raise_r+0x32>
 800877a:	4620      	mov	r0, r4
 800877c:	f000 f830 	bl	80087e0 <_getpid_r>
 8008780:	462a      	mov	r2, r5
 8008782:	4601      	mov	r1, r0
 8008784:	4620      	mov	r0, r4
 8008786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800878a:	f000 b817 	b.w	80087bc <_kill_r>
 800878e:	2b01      	cmp	r3, #1
 8008790:	d00a      	beq.n	80087a8 <_raise_r+0x4c>
 8008792:	1c59      	adds	r1, r3, #1
 8008794:	d103      	bne.n	800879e <_raise_r+0x42>
 8008796:	2316      	movs	r3, #22
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	2001      	movs	r0, #1
 800879c:	e7e7      	b.n	800876e <_raise_r+0x12>
 800879e:	2400      	movs	r4, #0
 80087a0:	4628      	mov	r0, r5
 80087a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087a6:	4798      	blx	r3
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7e0      	b.n	800876e <_raise_r+0x12>

080087ac <raise>:
 80087ac:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <raise+0xc>)
 80087ae:	4601      	mov	r1, r0
 80087b0:	6818      	ldr	r0, [r3, #0]
 80087b2:	f7ff bfd3 	b.w	800875c <_raise_r>
 80087b6:	bf00      	nop
 80087b8:	2000001c 	.word	0x2000001c

080087bc <_kill_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	2300      	movs	r3, #0
 80087c0:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_kill_r+0x20>)
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f7fa fb5e 	bl	8002e8a <_kill>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d102      	bne.n	80087d8 <_kill_r+0x1c>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	b103      	cbz	r3, 80087d8 <_kill_r+0x1c>
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop
 80087dc:	20000824 	.word	0x20000824

080087e0 <_getpid_r>:
 80087e0:	f7fa bb4c 	b.w	8002e7c <_getpid>

080087e4 <__sread>:
 80087e4:	b510      	push	{r4, lr}
 80087e6:	460c      	mov	r4, r1
 80087e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ec:	f000 f894 	bl	8008918 <_read_r>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	bfab      	itete	ge
 80087f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087f6:	89a3      	ldrhlt	r3, [r4, #12]
 80087f8:	181b      	addge	r3, r3, r0
 80087fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087fe:	bfac      	ite	ge
 8008800:	6563      	strge	r3, [r4, #84]	; 0x54
 8008802:	81a3      	strhlt	r3, [r4, #12]
 8008804:	bd10      	pop	{r4, pc}

08008806 <__swrite>:
 8008806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800880a:	461f      	mov	r7, r3
 800880c:	898b      	ldrh	r3, [r1, #12]
 800880e:	4605      	mov	r5, r0
 8008810:	05db      	lsls	r3, r3, #23
 8008812:	460c      	mov	r4, r1
 8008814:	4616      	mov	r6, r2
 8008816:	d505      	bpl.n	8008824 <__swrite+0x1e>
 8008818:	2302      	movs	r3, #2
 800881a:	2200      	movs	r2, #0
 800881c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008820:	f000 f868 	bl	80088f4 <_lseek_r>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	4632      	mov	r2, r6
 8008828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	4628      	mov	r0, r5
 8008830:	463b      	mov	r3, r7
 8008832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800883a:	f000 b817 	b.w	800886c <_write_r>

0800883e <__sseek>:
 800883e:	b510      	push	{r4, lr}
 8008840:	460c      	mov	r4, r1
 8008842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008846:	f000 f855 	bl	80088f4 <_lseek_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	89a3      	ldrh	r3, [r4, #12]
 800884e:	bf15      	itete	ne
 8008850:	6560      	strne	r0, [r4, #84]	; 0x54
 8008852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800885a:	81a3      	strheq	r3, [r4, #12]
 800885c:	bf18      	it	ne
 800885e:	81a3      	strhne	r3, [r4, #12]
 8008860:	bd10      	pop	{r4, pc}

08008862 <__sclose>:
 8008862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008866:	f000 b813 	b.w	8008890 <_close_r>
	...

0800886c <_write_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	4611      	mov	r1, r2
 8008874:	2200      	movs	r2, #0
 8008876:	4d05      	ldr	r5, [pc, #20]	; (800888c <_write_r+0x20>)
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f7f9 fcf0 	bl	8002260 <_write>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_write_r+0x1e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_write_r+0x1e>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	20000824 	.word	0x20000824

08008890 <_close_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	2300      	movs	r3, #0
 8008894:	4d05      	ldr	r5, [pc, #20]	; (80088ac <_close_r+0x1c>)
 8008896:	4604      	mov	r4, r0
 8008898:	4608      	mov	r0, r1
 800889a:	602b      	str	r3, [r5, #0]
 800889c:	f7fa fb2c 	bl	8002ef8 <_close>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d102      	bne.n	80088aa <_close_r+0x1a>
 80088a4:	682b      	ldr	r3, [r5, #0]
 80088a6:	b103      	cbz	r3, 80088aa <_close_r+0x1a>
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	bd38      	pop	{r3, r4, r5, pc}
 80088ac:	20000824 	.word	0x20000824

080088b0 <_fstat_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	2300      	movs	r3, #0
 80088b4:	4d06      	ldr	r5, [pc, #24]	; (80088d0 <_fstat_r+0x20>)
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	f7fa fb26 	bl	8002f0e <_fstat>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d102      	bne.n	80088cc <_fstat_r+0x1c>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b103      	cbz	r3, 80088cc <_fstat_r+0x1c>
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	bd38      	pop	{r3, r4, r5, pc}
 80088ce:	bf00      	nop
 80088d0:	20000824 	.word	0x20000824

080088d4 <_isatty_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	2300      	movs	r3, #0
 80088d8:	4d05      	ldr	r5, [pc, #20]	; (80088f0 <_isatty_r+0x1c>)
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	f7fa fb24 	bl	8002f2c <_isatty>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_isatty_r+0x1a>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_isatty_r+0x1a>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	20000824 	.word	0x20000824

080088f4 <_lseek_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4604      	mov	r4, r0
 80088f8:	4608      	mov	r0, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	2200      	movs	r2, #0
 80088fe:	4d05      	ldr	r5, [pc, #20]	; (8008914 <_lseek_r+0x20>)
 8008900:	602a      	str	r2, [r5, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	f7fa fb1c 	bl	8002f40 <_lseek>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_lseek_r+0x1e>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_lseek_r+0x1e>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000824 	.word	0x20000824

08008918 <_read_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	4608      	mov	r0, r1
 800891e:	4611      	mov	r1, r2
 8008920:	2200      	movs	r2, #0
 8008922:	4d05      	ldr	r5, [pc, #20]	; (8008938 <_read_r+0x20>)
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7fa fac9 	bl	8002ebe <_read>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_read_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_read_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000824 	.word	0x20000824

0800893c <_init>:
 800893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800893e:	bf00      	nop
 8008940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008942:	bc08      	pop	{r3}
 8008944:	469e      	mov	lr, r3
 8008946:	4770      	bx	lr

08008948 <_fini>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr
